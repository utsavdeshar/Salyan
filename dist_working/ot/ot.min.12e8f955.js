"use strict";angular.module("bahmni.common.routeErrorHandler",["ui.router"]).run(["$rootScope",function($rootScope){$rootScope.$on("$stateChangeError",function(event){event.preventDefault()})}]),angular.module("httpErrorInterceptor",[]).config(["$httpProvider",function($httpProvider){var interceptor=["$rootScope","$q",function($rootScope,$q){function stringAfter(value,searchString){var indexOfFirstColon=value.indexOf(searchString);return value.substr(indexOfFirstColon+1).trim()}function getServerError(message){return stringAfter(message,":")}function success(response){return response}function shouldRedirectToLogin(response){var errorMessage=response.data.error?response.data.error.message:response.data;if(errorMessage.search("HTTP Status 403 - Session timed out")>0)return!0}function error(response){var data=response.data,unexpectedError="There was an unexpected issue on the server. Please try again";if(500===response.status){var errorMessage=data.error&&data.error.message?getServerError(data.error.message):unexpectedError;showError(errorMessage)}else if(409===response.status){var errorMessage=data.error&&data.error.message?getServerError(data.error.message):"Duplicate entry error";showError(errorMessage)}else if(0===response.status)showError("Could not connect to the server. Please check your connection and try again");else if(405===response.status)showError(unexpectedError);else if(400===response.status){var errorMessage=data.error&&data.error.message?data.error.message:data.localizedMessage||"Could not connect to the server. Please check your connection and try again";showError(errorMessage)}else if(403===response.status){var errorMessage=data.error&&data.error.message?data.error.message:unexpectedError;shouldRedirectToLogin(response)?$rootScope.$broadcast("event:auth-loginRequired"):showError(errorMessage)}else 404===response.status&&(_.includes(response.config.url,"implementation_config")||_.includes(response.config.url,"locale_")||_.includes(response.config.url,"offlineMetadata")||showError("The requested information does not exist"));return $q.reject(response)}var serverErrorMessages=Bahmni.Common.Constants.serverErrorMessages,showError=function(errorMessage){var result=_.find(serverErrorMessages,function(listItem){return listItem.serverMessage===errorMessage});_.isEmpty(result)&&$rootScope.$broadcast("event:serverError",errorMessage)};return{response:success,responseError:error}}];$httpProvider.interceptors.push(interceptor)}]);var Bahmni=Bahmni||{};Bahmni.Auth=Bahmni.Auth||{},angular.module("authentication",["ui.router"]),Bahmni.Auth.User=function(user){angular.extend(this,user),this.userProperties=user.userProperties||{},this.favouriteObsTemplates=this.userProperties.favouriteObsTemplates?this.userProperties.favouriteObsTemplates.split("###"):[],this.favouriteWards=this.userProperties.favouriteWards?this.userProperties.favouriteWards.split("###"):[],this.recentlyViewedPatients=this.userProperties.recentlyViewedPatients?JSON.parse(this.userProperties.recentlyViewedPatients):[],this.toContract=function(){var user=angular.copy(this);return user.userProperties.favouriteObsTemplates=this.favouriteObsTemplates.join("###"),user.userProperties.favouriteWards=this.favouriteWards.join("###"),user.userProperties.recentlyViewedPatients=JSON.stringify(this.recentlyViewedPatients),delete user.favouriteObsTemplates,delete user.favouriteWards,delete user.recentlyViewedPatients,user},this.addDefaultLocale=function(locale){this.userProperties.defaultLocale=locale},this.addToRecentlyViewed=function(patient,maxPatients){_.some(this.recentlyViewedPatients,{uuid:patient.uuid})||(this.recentlyViewedPatients.unshift({uuid:patient.uuid,name:patient.name,identifier:patient.identifier}),_.size(this.recentlyViewedPatients)>=maxPatients&&(this.recentlyViewedPatients=_.take(this.recentlyViewedPatients,maxPatients)))},this.isFavouriteObsTemplate=function(conceptName){return _.includes(this.favouriteObsTemplates,conceptName)},this.toggleFavoriteObsTemplate=function(conceptName){this.isFavouriteObsTemplate(conceptName)?this.favouriteObsTemplates=_.without(this.favouriteObsTemplates,conceptName):this.favouriteObsTemplates.push(conceptName)},this.isFavouriteWard=function(wardName){return _.includes(this.favouriteWards,wardName)},this.toggleFavoriteWard=function(wardName){this.isFavouriteWard(wardName)?this.favouriteWards=_.without(this.favouriteWards,wardName):this.favouriteWards.push(wardName)}},angular.module("authentication").service("userService",["$rootScope","$http","$q",function($rootScope,$http,$q){var getUserFromServer=function(userName){return $http.get(Bahmni.Common.Constants.userUrl,{method:"GET",params:{username:userName,v:"custom:(username,uuid,person:(uuid,),privileges:(name,retired),userProperties)"},cache:!1})};this.getUser=function(userName){var deferrable=$q.defer();return getUserFromServer(userName).success(function(data){deferrable.resolve(data)}).error(function(){deferrable.reject("Unable to get user data")}),deferrable.promise},this.savePreferences=function(){var deferrable=$q.defer(),user=$rootScope.currentUser.toContract();return $http.post(Bahmni.Common.Constants.userUrl+"/"+user.uuid,{uuid:user.uuid,userProperties:user.userProperties},{withCredentials:!0}).then(function(response){$rootScope.currentUser.userProperties=response.data.userProperties,deferrable.resolve()}),deferrable.promise};var getProviderFromServer=function(uuid){return $http.get(Bahmni.Common.Constants.providerUrl,{method:"GET",params:{user:uuid},cache:!1})};this.getProviderForUser=function(uuid){var deferrable=$q.defer();return getProviderFromServer(uuid).success(function(data){if(data.results.length>0){var providerName=data.results[0].display.split("-")[1];data.results[0].name=providerName?providerName.trim():providerName,deferrable.resolve(data)}else deferrable.reject("UNABLE_TO_GET_PROVIDER_DATA")}).error(function(){deferrable.reject("UNABLE_TO_GET_PROVIDER_DATA")}),deferrable.promise},this.getPasswordPolicies=function(){return $http.get(Bahmni.Common.Constants.passwordPolicyUrl,{method:"GET",withCredentials:!0})}}]),angular.module("authentication").config(["$httpProvider",function($httpProvider){var interceptor=["$rootScope","$q",function($rootScope,$q){function success(response){return response}function error(response){return 401===response.status&&$rootScope.$broadcast("event:auth-loginRequired"),$q.reject(response)}return{response:success,responseError:error}}];$httpProvider.interceptors.push(interceptor)}]).run(["$rootScope","$window","$timeout",function($rootScope,$window,$timeout){$rootScope.$on("event:auth-loginRequired",function(){$timeout(function(){$window.location="../home/index.html#/login"})})}]).service("sessionService",["$rootScope","$http","$q","$bahmniCookieStore","userService",function($rootScope,$http,$q,$bahmniCookieStore,userService){var sessionResourcePath=Bahmni.Common.Constants.RESTWS_V1+"/session?v=custom:(uuid)",getAuthFromServer=function(username,password,otp){var btoa=otp?username+":"+password+":"+otp:username+":"+password;return $http.get(sessionResourcePath,{headers:{Authorization:"Basic "+window.btoa(btoa)},cache:!1})};this.resendOTP=function(username,password){var btoa=username+":"+password;return $http.get(sessionResourcePath+"&resendOTP=true",{headers:{Authorization:"Basic "+window.btoa(btoa)},cache:!1})};var createSession=function(username,password,otp){var deferrable=$q.defer();return destroySessionFromServer().success(function(){getAuthFromServer(username,password,otp).then(function(response){204==response.status&&deferrable.resolve({firstFactAuthorization:!0}),deferrable.resolve(response.data)},function(response){401==response.status?deferrable.reject("LOGIN_LABEL_WRONG_OTP_MESSAGE_KEY"):410==response.status?deferrable.reject("LOGIN_LABEL_OTP_EXPIRED"):429==response.status&&deferrable.reject("LOGIN_LABEL_MAX_FAILED_ATTEMPTS"),deferrable.reject("LOGIN_LABEL_LOGIN_ERROR_MESSAGE_KEY")})}).error(function(){deferrable.reject("LOGIN_LABEL_LOGIN_ERROR_MESSAGE_KEY")}),deferrable.promise},hasAnyActiveProvider=function(providers){return _.filter(providers,function(provider){return void 0==provider.retired||"false"==provider.retired}).length>0},self=this,destroySessionFromServer=function(){return $http["delete"](sessionResourcePath)},sessionCleanup=function(){delete $.cookie(Bahmni.Common.Constants.currentUser,null,{path:"/"}),delete $.cookie(Bahmni.Common.Constants.currentUser,null,{path:"/"}),delete $.cookie(Bahmni.Common.Constants.retrospectiveEntryEncounterDateCookieName,null,{path:"/"}),delete $.cookie(Bahmni.Common.Constants.grantProviderAccessDataCookieName,null,{path:"/"}),$rootScope.currentUser=void 0};this.destroy=function(){var deferrable=$q.defer();return destroySessionFromServer().then(function(){sessionCleanup(),deferrable.resolve()}),deferrable.promise},this.loginUser=function(username,password,location,otp){var deferrable=$q.defer();return createSession(username,password,otp).then(function(data){data.authenticated?($bahmniCookieStore.put(Bahmni.Common.Constants.currentUser,username,{path:"/",expires:7}),void 0!=location&&($bahmniCookieStore.remove(Bahmni.Common.Constants.locationCookieName),$bahmniCookieStore.put(Bahmni.Common.Constants.locationCookieName,{name:location.display,uuid:location.uuid},{path:"/",expires:7})),deferrable.resolve(data)):data.firstFactAuthorization?deferrable.resolve(data):deferrable.reject("LOGIN_LABEL_LOGIN_ERROR_MESSAGE_KEY")},function(errorInfo){deferrable.reject(errorInfo)}),deferrable.promise},this.get=function(){return $http.get(sessionResourcePath,{cache:!1})},this.loadCredentials=function(){var deferrable=$q.defer(),currentUser=$bahmniCookieStore.get(Bahmni.Common.Constants.currentUser);return currentUser?(userService.getUser(currentUser).then(function(data){userService.getProviderForUser(data.results[0].uuid).then(function(providers){!_.isEmpty(providers.results)&&hasAnyActiveProvider(providers.results)?($rootScope.currentUser=new Bahmni.Auth.User(data.results[0]),$rootScope.currentUser.currentLocation=$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName).name,$rootScope.$broadcast("event:user-credentialsLoaded",data.results[0]),deferrable.resolve(data.results[0])):(self.destroy(),deferrable.reject("YOU_HAVE_NOT_BEEN_SETUP_PROVIDER"))},function(){self.destroy(),deferrable.reject("COULD_NOT_GET_PROVIDER")})},function(){self.destroy(),deferrable.reject("Could not get roles for the current user.")}),deferrable.promise):(this.destroy()["finally"](function(){$rootScope.$broadcast("event:auth-loginRequired"),deferrable.reject("No User in session. Please login again.")}),deferrable.promise)},this.getLoginLocationUuid=function(){return $bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName)?$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName).uuid:null},this.changePassword=function(currentUserUuid,oldPassword,newPassword){return $http({method:"POST",url:Bahmni.Common.Constants.passwordUrl,data:{oldPassword:oldPassword,newPassword:newPassword},headers:{"Content-Type":"application/json"}})},this.loadProviders=function(userInfo){return $http.get(Bahmni.Common.Constants.providerUrl,{method:"GET",params:{user:userInfo.uuid},cache:!1}).success(function(data){var providerUuid=data.results.length>0?data.results[0].uuid:void 0;$rootScope.currentProvider={uuid:providerUuid}})}}]).factory("authenticator",["$rootScope","$q","$window","sessionService",function($rootScope,$q,$window,sessionService){var authenticateUser=function(){var defer=$q.defer(),sessionDetails=sessionService.get();return sessionDetails.then(function(response){response.data.authenticated?defer.resolve():(defer.reject("User not authenticated"),$rootScope.$broadcast("event:auth-loginRequired"))}),defer.promise};return{authenticateUser:authenticateUser}}]).directive("logOut",["sessionService","$window","configurationService","auditLogService",function(sessionService,$window,configurationService,auditLogService){return{link:function(scope,element){element.bind("click",function(){scope.$apply(function(){auditLogService.log(void 0,"USER_LOGOUT_SUCCESS",void 0,"MODULE_LABEL_LOGOUT_KEY").then(function(){sessionService.destroy().then(function(){$window.location="../home/index.html#/login"})})})})}}}]).directive("btnUserInfo",[function(){return{restrict:"CA",link:function(scope,elem){elem.bind("click",function(event){$(this).next().toggleClass("active"),event.stopPropagation()}),$(document).find("body").bind("click",function(){$(elem).next().removeClass("active")})}}}]),angular.module("bahmni.common.config",[]),angular.module("bahmni.common.config").service("configurations",["configurationService",function(configurationService){this.configs={},this.load=function(configNames){var self=this;return configurationService.getConfigurations(_.difference(configNames,Object.keys(this.configs))).then(function(configurations){angular.extend(self.configs,configurations)})},this.dosageInstructionConfig=function(){return this.configs.dosageInstructionConfig||[]},this.stoppedOrderReasonConfig=function(){return this.configs.stoppedOrderReasonConfig||[]},this.dosageFrequencyConfig=function(){return this.configs.dosageFrequencyConfig||[]},this.allTestsAndPanelsConcept=function(){return this.configs.allTestsAndPanelsConcept.results[0]||[]},this.impressionConcept=function(){return this.configs.radiologyImpressionConfig.results[0]||[]},this.labOrderNotesConcept=function(){return this.configs.labOrderNotesConfig.results[0]||[]},this.consultationNoteConcept=function(){return this.configs.consultationNoteConfig.results[0]||[]},this.patientConfig=function(){return this.configs.patientConfig||{}},this.encounterConfig=function(){return angular.extend(new EncounterConfig,this.configs.encounterConfig||[])},this.patientAttributesConfig=function(){return this.configs.patientAttributesConfig.results},this.identifierTypesConfig=function(){return this.configs.identifierTypesConfig},this.genderMap=function(){return this.configs.genderMap},this.addressLevels=function(){return this.configs.addressLevels},this.relationshipTypes=function(){return this.configs.relationshipTypeConfig.results||[]},this.relationshipTypeMap=function(){return this.configs.relationshipTypeMap||{}},this.loginLocationToVisitTypeMapping=function(){return this.configs.loginLocationToVisitTypeMapping||{}},this.defaultEncounterType=function(){return this.configs.defaultEncounterType}}]),angular.module("bahmni.common.appFramework",["authentication"]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.AppFramework=Bahmni.Common.AppFramework||{},angular.module("bahmni.common.appFramework").config(["$compileProvider",function($compileProvider){$compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|chrome-extension|file):/)}]).service("appService",["$http","$q","sessionService","$rootScope","mergeService","loadConfigService","messagingService","$translate",function($http,$q,sessionService,$rootScope,mergeService,loadConfigService,messagingService,$translate){var currentUser=null,baseUrl=Bahmni.Common.Constants.baseUrl,customUrl=Bahmni.Common.Constants.customUrl,appDescriptor=null,loadConfig=function(url){return loadConfigService.loadConfig(url,appDescriptor.contextPath)},loadTemplate=function(appDescriptor){var deferrable=$q.defer();return loadConfig(baseUrl+appDescriptor.contextPath+"/appTemplate.json").then(function(result){_.keys(result.data).length>0&&appDescriptor.setTemplate(result.data),deferrable.resolve(appDescriptor)},function(error){404!==error.status?deferrable.reject(error):deferrable.resolve(appDescriptor)}),deferrable.promise},setDefinition=function(baseResultData,customResultData){customResultData&&(_.keys(baseResultData).length>0||_.keys(customResultData.length>0))?appDescriptor.setDefinition(baseResultData,customResultData):_.keys(baseResultData).length>0&&appDescriptor.setDefinition(baseResultData)},loadDefinition=function(appDescriptor){var deferrable=$q.defer();return loadConfig(baseUrl+appDescriptor.contextPath+"/app.json").then(function(baseResult){baseResult.data.shouldOverRideConfig?loadConfig(customUrl+appDescriptor.contextPath+"/app.json").then(function(customResult){setDefinition(baseResult.data,customResult.data),deferrable.resolve(appDescriptor)},function(){setDefinition(baseResult.data),deferrable.resolve(appDescriptor)}):(setDefinition(baseResult.data),deferrable.resolve(appDescriptor))},function(error){404!==error.status?deferrable.reject(error):deferrable.resolve(appDescriptor)}),deferrable.promise},setExtensions=function(baseResultData,customResultData){customResultData?appDescriptor.setExtensions(baseResultData,customResultData):appDescriptor.setExtensions(baseResultData)},loadExtensions=function(appDescriptor,extensionFileName){var deferrable=$q.defer();return loadConfig(baseUrl+appDescriptor.extensionPath+extensionFileName).then(function(baseResult){baseResult.data.shouldOverRideConfig?loadConfig(customUrl+appDescriptor.extensionPath+extensionFileName).then(function(customResult){setExtensions(baseResult.data,customResult.data),deferrable.resolve(appDescriptor)},function(){setExtensions(baseResult.data),deferrable.resolve(appDescriptor)}):(setExtensions(baseResult.data),deferrable.resolve(appDescriptor))},function(error){404!==error.status?deferrable.reject(error):deferrable.resolve(appDescriptor)}),deferrable.promise},setDefaultPageConfig=function(pageName,baseResultData,customResultData){customResultData&&(_.keys(customResultData).length>0||_.keys(baseResultData).length>0)?appDescriptor.addConfigForPage(pageName,baseResultData,customResultData):_.keys(baseResultData).length>0&&appDescriptor.addConfigForPage(pageName,baseResultData)},hasPrivilegeOf=function(privilegeName){return _.some(currentUser.privileges,{name:privilegeName})},loadPageConfig=function(pageName,appDescriptor){var deferrable=$q.defer();return loadConfig(baseUrl+appDescriptor.contextPath+"/"+pageName+".json").then(function(baseResult){baseResult.data.shouldOverRideConfig?loadConfig(customUrl+appDescriptor.contextPath+"/"+pageName+".json").then(function(customResult){setDefaultPageConfig(pageName,baseResult.data,customResult.data),deferrable.resolve(appDescriptor)},function(){setDefaultPageConfig(pageName,baseResult.data),deferrable.resolve(appDescriptor)}):(setDefaultPageConfig(pageName,baseResult.data),deferrable.resolve(appDescriptor))},function(error){404!==error.status?(messagingService.showMessage("error","Incorrect Configuration:  "+error.message),deferrable.reject(error)):deferrable.resolve(appDescriptor)}),deferrable.promise};this.getAppDescriptor=function(){return appDescriptor},this.configBaseUrl=function(){return baseUrl},this.loadCsvFileFromConfig=function(name){return loadConfig(baseUrl+appDescriptor.contextPath+"/"+name)},this.loadConfig=function(name,shouldMerge){return loadConfig(baseUrl+appDescriptor.contextPath+"/"+name).then(function(baseResponse){return baseResponse.data.shouldOverRideConfig?loadConfig(customUrl+appDescriptor.contextPath+"/"+name).then(function(customResponse){return shouldMerge||void 0===shouldMerge?mergeService.merge(baseResponse.data,customResponse.data):[baseResponse.data,customResponse.data]},function(){return baseResponse.data}):baseResponse.data})},this.loadMandatoryConfig=function(path){return $http.get(path)},this.getAppName=function(){return this.appName},this.checkPrivilege=function(privilegeName){return hasPrivilegeOf(privilegeName)?$q.when(!0):(messagingService.showMessage("error",$translate.instant(Bahmni.Common.Constants.privilegeRequiredErrorMessage)+" [Privileges required: "+privilegeName+"]"),$q.reject())},this.initApp=function(appName,options,extensionFileSuffix,configPages){this.appName=appName;var appLoader=$q.defer(),extensionFileName=extensionFileSuffix&&"default"!==extensionFileSuffix.toLowerCase()?"/extension-"+extensionFileSuffix+".json":"/extension.json",promises=[],opts=options||{app:!0,extension:!0},inheritAppContext=!opts.inherit||opts.inherit;appDescriptor=new Bahmni.Common.AppFramework.AppDescriptor(appName,inheritAppContext,function(){return currentUser},mergeService);var loadCredentialsPromise=sessionService.loadCredentials(),loadProviderPromise=loadCredentialsPromise.then(sessionService.loadProviders);return promises.push(loadCredentialsPromise),promises.push(loadProviderPromise),opts.extension&&promises.push(loadExtensions(appDescriptor,extensionFileName)),opts.template&&promises.push(loadTemplate(appDescriptor)),opts.app&&promises.push(loadDefinition(appDescriptor)),_.isEmpty(configPages)||configPages.forEach(function(configPage){promises.push(loadPageConfig(configPage,appDescriptor))}),$q.all(promises).then(function(results){currentUser=results[0],appLoader.resolve(appDescriptor),$rootScope.$broadcast("event:appExtensions-loaded")},function(errors){appLoader.reject(errors)}),appLoader.promise}}]),angular.module("bahmni.common.appFramework").service("mergeService",[function(){this.merge=function(base,custom){var mergeResult=$.extend(!0,{},base,custom);return deleteNullValuedKeys(mergeResult)};var deleteNullValuedKeys=function(currentObject){return _.forOwn(currentObject,function(value,key){(_.isUndefined(value)||_.isNull(value)||_.isNaN(value)||_.isObject(value)&&_.isNull(deleteNullValuedKeys(value)))&&delete currentObject[key]}),currentObject}}]),angular.module("bahmni.common.appFramework").directive("appExtensionList",["appService",function(appService){var appDescriptor=appService.getAppDescriptor();return{restrict:"EA",template:'<ul><li ng-repeat="appExtn in appExtensions"><a href="{{formatUrl(appExtn.url, extnParams)}}" class="{{appExtn.icon}}"  onclick="return false;" title="{{appExtn.label}}" ng-click="extnLinkClick(appExtn, extnParams)"> <span ng-show="showLabel">{{appExtn.label}}</span></a></li></ul>',scope:{extnPointId:"@",showLabel:"@",onExtensionClick:"&",contextModel:"&"},compile:function(cElement,cAttrs){var extnList=appDescriptor.getExtensions(cAttrs.extnPointId);return function(scope){scope.appExtensions=extnList;var model=scope.contextModel();scope.extnParams=model||{}}},controller:function($scope,$location){$scope.formatUrl=appDescriptor.formatUrl,$scope.extnLinkClick=function(extn,params){var proceedWithDefault=!0,clickHandler=$scope.onExtensionClick(),target=appDescriptor.formatUrl(extn.url,params);if(clickHandler){var event={src:extn,target:target,params:params,preventDefault:function(){proceedWithDefault=!1}};clickHandler(event)}proceedWithDefault&&$location.url(target)}}}}]),Bahmni.Common.AppFramework.AppDescriptor=function(context,inheritContext,retrieveUserCallback,mergeService){this.id=null,this.instanceOf=null,this.description=null,this.contextModel=null,this.baseExtensionPoints=[],this.customExtensionPoints=[],this.baseExtensions={},this.customExtensions={},this.customConfigs={},this.baseConfigs={},this.extensionPath=context,this.contextPath=inheritContext?context.split("/")[0]:context;var self=this,setExtensionPointsFromExtensions=function(currentExtensions,currentExtensionPoints){_.values(currentExtensions).forEach(function(extn){if(extn){var existing=self[currentExtensionPoints].filter(function(ep){return ep.id===extn.extensionPointId});0===existing.length&&self[currentExtensionPoints].push({id:extn.extensionPointId,description:extn.description})}})};this.setExtensions=function(baseExtensions,customExtensions){customExtensions&&(setExtensionPointsFromExtensions(customExtensions,"customExtensionPoints"),self.customExtensions=customExtensions),self.baseExtensions=baseExtensions,setExtensionPointsFromExtensions(baseExtensions,"baseExtensionPoints")},this.setTemplate=function(template){self.instanceOf=template.id,self.description=self.description||template.description,self.contextModel=self.contextModel||template.contextModel,template.configOptions&&_.values(template.configOptions).forEach(function(opt){var existing=self.configs.filter(function(cfg){return cfg.name===opt.name});existing.length>0?existing[0].description=opt.description:self.configs.push({name:opt.name,description:opt.description,value:opt.defaultValue})})};var setConfig=function(instance,currentConfig){for(var configName in instance.config){var existingConfig=getConfig(self[currentConfig],configName);existingConfig?existingConfig.value=instance.config[configName]:self[currentConfig][configName]={name:configName,value:instance.config[configName]}}},setDefinitionExtensionPoints=function(extensionPoints,currentExtensionPoints){extensionPoints&&extensionPoints.forEach(function(iep){if(iep){var existing=self[currentExtensionPoints].filter(function(ep){return ep.id===iep.id});0===existing.length&&self[currentExtensionPoints].push(iep)}})};this.setDefinition=function(baseInstance,customInstance){self.instanceOf=customInstance&&customInstance.instanceOf?customInstance.instanceOf:baseInstance.instanceOf,self.id=customInstance&&customInstance.id?customInstance.id:baseInstance.id,self.description=customInstance&&customInstance.description?customInstance.description:baseInstance.description,self.contextModel=customInstance&&customInstance.contextModel?customInstance.contextModel:baseInstance.contextModel,setDefinitionExtensionPoints(baseInstance.extensionPoints,"baseExtensionPoints"),setConfig(baseInstance,"baseConfigs"),customInstance&&(setDefinitionExtensionPoints(customInstance.extensionPoints,"customExtensionPoints"),setConfig(customInstance,"customConfigs"))};var getExtensions=function(extPointId,type,extensions){var currentUser=retrieveUserCallback(),currentExtensions=_.values(extensions);if(currentUser&&currentExtensions){var extnType=type||"all",userPrivileges=currentUser.privileges.map(function(priv){return priv.retired?"":priv.name}),appsExtns=currentExtensions.filter(function(extn){return("all"===extnType||extn.type===extnType)&&extn.extensionPointId===extPointId&&(!extn.requiredPrivilege||userPrivileges.indexOf(extn.requiredPrivilege)>=0)});return appsExtns.sort(function(extn1,extn2){return extn1.order-extn2.order}),appsExtns}};this.getExtensions=function(extPointId,type,shouldMerge){if(shouldMerge||void 0===shouldMerge){var mergedExtensions=mergeService.merge(self.baseExtensions,self.customExtensions);return getExtensions(extPointId,type,mergedExtensions)}return[getExtensions(extPointId,type,self.baseExtensions),getExtensions(extPointId,type,self.customExtensions)]},this.getExtensionById=function(id,shouldMerge){if(shouldMerge||void 0===shouldMerge){var mergedExtensions=_.values(mergeService.merge(self.baseExtensions,self.customExtensions));return mergedExtensions.filter(function(extn){return extn.id===id})[0]}return[self.baseExtensions.filter(function(extn){return extn.id===id})[0],self.customExtensions.filter(function(extn){return extn.id===id})[0]]};var getConfig=function(config,configName){var cfgList=_.values(config).filter(function(cfg){return cfg.name===configName});return cfgList.length>0?cfgList[0]:null};this.getConfig=function(configName,shouldMerge){return shouldMerge||void 0===shouldMerge?getConfig(mergeService.merge(self.baseConfigs,self.customConfigs),configName):[getConfig(self.baseConfigs,configName),getConfig(self.customConfigs,configName)]},this.getConfigValue=function(configName,shouldMerge){var config=this.getConfig(configName,shouldMerge);return shouldMerge||void 0===shouldMerge?config?config.value:null:config},this.formatUrl=function(url,options,useQueryParams){var pattern=/{{([^}]*)}}/g,matches=url.match(pattern),replacedString=url,checkQueryParams=useQueryParams||!1,queryParameters=this.parseQueryParams();return matches&&matches.forEach(function(el){var key=el.replace("{{","").replace("}}",""),value=options[key];value||checkQueryParams!==!0||(value=queryParameters[key]||null),replacedString=replacedString.replace(el,value)}),replacedString.trim()},this.parseQueryParams=function(locationSearchString){var urlParams,match,pl=/\+/g,search=/([^&=]+)=?([^&]*)/g,decode=function(s){return decodeURIComponent(s.replace(pl," "))},queryString=locationSearchString||window.location.search.substring(1);for(urlParams={};match=search.exec(queryString);)urlParams[decode(match[1])]=decode(match[2]);return urlParams},this.addConfigForPage=function(pageName,baseConfig,customConfig){self.basePageConfigs=self.basePageConfigs||{},self.basePageConfigs[pageName]=baseConfig,self.customPageConfigs=self.customPageConfigs||{},self.customPageConfigs[pageName]=customConfig},this.getConfigForPage=function(pageName,shouldMerge){return shouldMerge||void 0===shouldMerge?mergeService.merge(self.basePageConfigs[pageName],self.customPageConfigs[pageName]):[_.values(self.basePageConfigs[pageName]),_.values(self.customPageConfigs[pageName])]}},angular.module("bahmni.common.appFramework").service("loadConfigService",["$http",function($http){this.loadConfig=function(url){return $http.get(url,{withCredentials:!0})}}]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},function(){var hostUrl=localStorage.getItem("host")?"https://"+localStorage.getItem("host"):"",rootDir=localStorage.getItem("rootDir")||"",RESTWS=hostUrl+"/openmrs/ws/rest",RESTWS_V1=hostUrl+"/openmrs/ws/rest/v1",BAHMNI_CORE=RESTWS_V1+"/bahmnicore",EMRAPI=RESTWS+"/emrapi",BACTERIOLOGY=RESTWS_V1,BASE_URL=hostUrl+"/bahmni_config/openmrs/apps/",CUSTOM_URL=hostUrl+"/implementation_config/openmrs/apps/",serverErrorMessages=[{serverMessage:"Cannot have more than one active order for the same orderable and care setting at same time",clientMessage:"One or more drugs you are trying to order are already active. Please change the start date of the conflicting drug or remove them from the new prescription."},{serverMessage:"[Order.cannot.have.more.than.one]",clientMessage:"One or more drugs you are trying to order are already active. Please change the start date of the conflicting drug or remove them from the new prescription."}],representation="custom:(uuid,name,names,conceptClass,setMembers:(uuid,name,names,conceptClass,setMembers:(uuid,name,names,conceptClass,setMembers:(uuid,name,names,conceptClass))))",unAuthenticatedReferenceDataMap={"/openmrs/ws/rest/v1/location?tags=Login+Location&s=byTags&v=default":"LoginLocations","/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=locale.allowed.list":"LocaleList"},authenticatedReferenceDataMap={"/openmrs/ws/rest/v1/idgen/identifiertype":"IdentifierTypes","/openmrs/module/addresshierarchy/ajax/getOrderedAddressHierarchyLevels.form":"AddressHierarchyLevels","/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=mrs.genders":"Genders","/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=bahmni.encountersession.duration":"encounterSessionDuration","/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=bahmni.relationshipTypeMap":"RelationshipTypeMap","/openmrs/ws/rest/v1/bahmnicore/config/bahmniencounter?callerContext=REGISTRATION_CONCEPTS":"RegistrationConcepts","/openmrs/ws/rest/v1/relationshiptype?v=custom:(aIsToB,bIsToA,uuid)":"RelationshipType","/openmrs/ws/rest/v1/personattributetype?v=custom:(uuid,name,sortWeight,description,format,concept)":"PersonAttributeType","/openmrs/ws/rest/v1/entitymapping?mappingType=loginlocation_visittype&s=byEntityAndMappingType":"LoginLocationToVisitTypeMapping","/openmrs/ws/rest/v1/bahmnicore/config/patient":"PatientConfig","/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Consultation+Note&v=custom:(uuid,name,answers)":"ConsultationNote","/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Lab+Order+Notes&v=custom:(uuid,name)":"LabOrderNotes","/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Impression&v=custom:(uuid,name)":"RadiologyImpressionConfig","/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=All_Tests_and_Panels&v=custom:(uuid,name:(uuid,name),setMembers:(uuid,name:(uuid,name)))":"AllTestsAndPanelsConcept","/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Dosage+Frequency&v=custom:(uuid,name,answers)":"DosageFrequencyConfig","/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Dosage+Instructions&v=custom:(uuid,name,answers)":"DosageInstructionConfig",
"/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=bahmni.encounterType.default":"DefaultEncounterType","/openmrs/ws/rest/v1/concept?s=byFullySpecifiedName&name=Stopped+Order+Reason&v=custom:(uuid,name,answers)":"StoppedOrderReasonConfig","/openmrs/ws/rest/v1/ordertype":"OrderType","/openmrs/ws/rest/v1/bahmnicore/config/drugOrders":"DrugOrderConfig","/openmrs/ws/rest/v1/bahmnicore/sql/globalproperty?property=drugOrder.drugOther":"NonCodedDrugConcept"};authenticatedReferenceDataMap["/openmrs/ws/rest/v1/entitymapping?mappingType=location_encountertype&s=byEntityAndMappingType&entityUuid="+(localStorage.getItem("LoginInformation")?JSON.parse(localStorage.getItem("LoginInformation")).currentLocation.uuid:"")]="LoginLocationToEncounterTypeMapping",Bahmni.Common.Constants={hostURL:hostUrl,dateFormat:"dd/mm/yyyy",dateDisplayFormat:"DD-MMM-YYYY",timeDisplayFormat:"hh:mm",emrapiDiagnosisUrl:EMRAPI+"/diagnosis",bahmniDiagnosisUrl:BAHMNI_CORE+"/diagnosis/search",bahmniDeleteDiagnosisUrl:BAHMNI_CORE+"/diagnosis/delete",diseaseTemplateUrl:BAHMNI_CORE+"/diseaseTemplates",AllDiseaseTemplateUrl:BAHMNI_CORE+"/diseaseTemplate",emrapiConceptUrl:EMRAPI+"/concept",encounterConfigurationUrl:BAHMNI_CORE+"/config/bahmniencounter",patientConfigurationUrl:BAHMNI_CORE+"/config/patient",drugOrderConfigurationUrl:BAHMNI_CORE+"/config/drugOrders",emrEncounterUrl:EMRAPI+"/encounter",encounterUrl:RESTWS_V1+"/encounter",locationUrl:RESTWS_V1+"/location",bahmniVisitLocationUrl:BAHMNI_CORE+"/visitLocation",bahmniOrderUrl:BAHMNI_CORE+"/orders",bahmniDrugOrderUrl:BAHMNI_CORE+"/drugOrders",bahmniDispositionByVisitUrl:BAHMNI_CORE+"/disposition/visit",bahmniDispositionByPatientUrl:BAHMNI_CORE+"/disposition/patient",bahmniSearchUrl:BAHMNI_CORE+"/search",bahmniLabOrderResultsUrl:BAHMNI_CORE+"/labOrderResults",bahmniEncounterUrl:BAHMNI_CORE+"/bahmniencounter",conceptUrl:RESTWS_V1+"/concept",bahmniConceptAnswerUrl:RESTWS_V1+"/bahmniconceptanswer",conceptSearchByFullNameUrl:RESTWS_V1+"/concept?s=byFullySpecifiedName",visitUrl:RESTWS_V1+"/visit",endVisitUrl:BAHMNI_CORE+"/visit/endVisit",changeVisit:BAHMNI_CORE+"/visit/updateVisit",endVisitAndCreateEncounterUrl:BAHMNI_CORE+"/visit/endVisitAndCreateEncounter",visitTypeUrl:RESTWS_V1+"/visittype",patientImageUrlByPatientUuid:RESTWS_V1+"/patientImage?patientUuid=",labResultUploadedFileNameUrl:"/uploaded_results/",visitSummaryUrl:BAHMNI_CORE+"/visit/summary",encounterModifierUrl:BAHMNI_CORE+"/bahmniencountermodifier",openmrsUrl:hostUrl+"/openmrs",loggingUrl:hostUrl+"/log/",idgenConfigurationURL:RESTWS_V1+"/idgen/identifiertype",bahmniRESTBaseURL:BAHMNI_CORE+"",observationsUrl:BAHMNI_CORE+"/observations",obsRelationshipUrl:BAHMNI_CORE+"/obsrelationships",encounterImportUrl:BAHMNI_CORE+"/admin/upload/encounter",programImportUrl:BAHMNI_CORE+"/admin/upload/program",conceptImportUrl:BAHMNI_CORE+"/admin/upload/concept",conceptSetImportUrl:BAHMNI_CORE+"/admin/upload/conceptset",drugImportUrl:BAHMNI_CORE+"/admin/upload/drug",labResultsImportUrl:BAHMNI_CORE+"/admin/upload/labResults",referenceTermsImportUrl:BAHMNI_CORE+"/admin/upload/referenceterms",updateReferenceTermsImportUrl:BAHMNI_CORE+"/admin/upload/referenceterms/new",relationshipImportUrl:BAHMNI_CORE+"/admin/upload/relationship",conceptSetExportUrl:BAHMNI_CORE+"/admin/export/conceptset?conceptName=:conceptName",patientImportUrl:BAHMNI_CORE+"/admin/upload/patient",adminImportStatusUrl:BAHMNI_CORE+"/admin/upload/status",programUrl:RESTWS_V1+"/program",programEnrollPatientUrl:RESTWS_V1+"/bahmniprogramenrollment",programStateDeletionUrl:RESTWS_V1+"/programenrollment",programEnrollmentDefaultInformation:"default",programEnrollmentFullInformation:"full",programAttributeTypes:RESTWS_V1+"/programattributetype",relationshipTypesUrl:RESTWS_V1+"/relationshiptype",personAttributeTypeUrl:RESTWS_V1+"/personattributetype",diseaseSummaryPivotUrl:BAHMNI_CORE+"/diseaseSummaryData",allTestsAndPanelsConceptName:"All_Tests_and_Panels",dosageFrequencyConceptName:"Dosage Frequency",dosageInstructionConceptName:"Dosage Instructions",stoppedOrderReasonConceptName:"Stopped Order Reason",consultationNoteConceptName:"Consultation Note",diagnosisConceptSet:"Diagnosis Concept Set",radiologyOrderType:"Radiology Order",radiologyResultConceptName:"Radiology Result",investigationEncounterType:"INVESTIGATION",validationNotesEncounterType:"VALIDATION NOTES",labOrderNotesConcept:"Lab Order Notes",impressionConcept:"Impression",qualifiedByRelationshipType:"qualified-by",dispositionConcept:"Disposition",dispositionGroupConcept:"Disposition Set",dispositionNoteConcept:"Disposition Note",ruledOutDiagnosisConceptName:"Ruled Out Diagnosis",emrapiConceptMappingSource:"org.openmrs.module.emrapi",abbreviationConceptMappingSource:"Abbreviation",includeAllObservations:!1,openmrsObsUrl:RESTWS_V1+"/obs",openmrsObsRepresentation:"custom:(uuid,obsDatetime,value:(uuid,name:(uuid,name)))",admissionCode:"ADMIT",dischargeCode:"DISCHARGE",transferCode:"TRANSFER",undoDischargeCode:"UNDO_DISCHARGE",vitalsConceptName:"Vitals",heightConceptName:"HEIGHT",weightConceptName:"WEIGHT",bmiConceptName:"BMI",bmiStatusConceptName:"BMI STATUS",abnormalObservationConceptName:"IS_ABNORMAL",documentsPath:"/document_images",documentsConceptName:"Document",miscConceptClassName:"Misc",abnormalConceptClassName:"Abnormal",unknownConceptClassName:"Unknown",durationConceptClassName:"Duration",conceptDetailsClassName:"Concept Details",admissionEncounterTypeName:"ADMISSION",dischargeEncounterTypeName:"DISCHARGE",imageClassName:"Image",videoClassName:"Video",locationCookieName:"bahmni.user.location",retrospectiveEntryEncounterDateCookieName:"bahmni.clinical.retrospectiveEncounterDate",JSESSIONID:"JSESSIONID",rootScopeRetrospectiveEntry:"retrospectiveEntry.encounterDate",patientFileConceptName:"Patient file",serverErrorMessages:serverErrorMessages,currentUser:"bahmni.user",retrospectivePrivilege:"app:clinical:retrospective",locationPickerPrivilege:"app:clinical:locationpicker",onBehalfOfPrivilege:"app:clinical:onbehalf",nutritionalConceptName:"Nutritional Values",messageForNoObservation:"NO_OBSERVATIONS_CAPTURED",messageForNoDisposition:"NO_DISPOSTIONS_AVAILABLE_MESSAGE_KEY",messageForNoFulfillment:"NO_FULFILMENT_MESSAGE",reportsUrl:"/bahmnireports",uploadReportTemplateUrl:"/bahmnireports/upload",ruledOutdiagnosisStatus:"Ruled Out Diagnosis",registartionConsultationPrivilege:"app:common:registration_consultation_link",manageIdentifierSequencePrivilege:"Manage Identifier Sequence",closeVisitPrivilege:"app:common:closeVisit",deleteDiagnosisPrivilege:"app:clinical:deleteDiagnosis",viewPatientsPrivilege:"View Patients",editPatientsPrivilege:"Edit Patients",addVisitsPrivilege:"Add Visits",deleteVisitsPrivilege:"Delete Visits",grantProviderAccess:"app:clinical:grantProviderAccess",grantProviderAccessDataCookieName:"app.clinical.grantProviderAccessData",globalPropertyUrl:BAHMNI_CORE+"/sql/globalproperty",passwordPolicyUrl:BAHMNI_CORE+"/globalProperty/passwordPolicyProperties",fulfillmentConfiguration:"fulfillment",fulfillmentFormSuffix:" Fulfillment Form",noNavigationLinksMessage:"NO_NAVIGATION_LINKS_AVAILABLE_MESSAGE",conceptSetRepresentationForOrderFulfillmentConfig:representation,entityMappingUrl:RESTWS_V1+"/entitymapping",encounterTypeUrl:RESTWS_V1+"/encountertype",defaultExtensionName:"default",orderSetMemberAttributeTypeUrl:RESTWS_V1+"/ordersetmemberattributetype",orderSetUrl:RESTWS_V1+"/bahmniorderset",primaryOrderSetMemberAttributeTypeName:"Primary",bahmniBacteriologyResultsUrl:BACTERIOLOGY+"/specimen",bedFromVisit:RESTWS_V1+"/beds",ordersUrl:RESTWS_V1+"/order",formDataUrl:RESTWS_V1+"/obs",providerUrl:RESTWS_V1+"/provider",drugUrl:RESTWS_V1+"/drug",orderTypeUrl:RESTWS_V1+"/ordertype",userUrl:RESTWS_V1+"/user",passwordUrl:RESTWS_V1+"/password",formUrl:RESTWS_V1+"/form",allFormsUrl:RESTWS_V1+"/bahmniie/form/allForms",latestPublishedForms:RESTWS_V1+"/bahmniie/form/latestPublishedForms",formTranslationsUrl:RESTWS_V1+"/bahmniie/form/translations",sqlUrl:BAHMNI_CORE+"/sql",patientAttributeDateFieldFormat:"org.openmrs.util.AttributableDate",platform:"user.platform",RESTWS_V1:RESTWS_V1,baseUrl:BASE_URL,customUrl:CUSTOM_URL,faviconUrl:hostUrl+"/bahmni/favicon.ico",platformType:{other:"other"},numericDataType:"Numeric",encryptionType:{SHA3:"SHA3"},LoginInformation:"LoginInformation",ServerDateTimeFormat:"YYYY-MM-DDTHH:mm:ssZZ",calculateDose:BAHMNI_CORE+"/calculateDose",unAuthenticatedReferenceDataMap:unAuthenticatedReferenceDataMap,authenticatedReferenceDataMap:authenticatedReferenceDataMap,rootDir:rootDir,dischargeUrl:BAHMNI_CORE+"/discharge",uuidRegex:"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",eventlogFilterUrl:hostUrl+"/openmrs/ws/rest/v1/eventlog/filter",bahmniConnectMetaDataDb:"metaData",serverDateTimeUrl:"/cgi-bin/systemdate",loginText:"/bahmni_config/openmrs/apps/home/whiteLabel.json",auditLogUrl:RESTWS_V1+"/auditlog",appointmentServiceUrl:RESTWS_V1+"/appointmentService",conditionUrl:EMRAPI+"/condition",conditionHistoryUrl:EMRAPI+"/conditionhistory",followUpConditionConcept:"Follow-up Condition",localeLangs:"/bahmni_config/openmrs/apps/home/locale_languages.json",privilegeRequiredErrorMessage:"PRIVILEGE_REQUIRED",patientFormsUrl:BAHMNI_CORE+"/patient/{patientUuid}/forms",defaultPossibleRelativeSearchLimit:10,formBuilderDisplayControlType:"formsV2",formBuilderType:"v2"}}();var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.Util=Bahmni.Common.Util||{},angular.module("bahmni.common.util",[]).provider("$bahmniCookieStore",[function(){var self=this;self.defaultOptions={};var fixedEncodeURIComponent=function(str){return encodeURIComponent(str).replace(/[!'()*]/g,function(c){return"%"+c.charCodeAt(0).toString(16)})};self.setDefaultOptions=function(options){self.defaultOptions=options},self.$get=function(){return{get:function(name){var jsonCookie=$.cookie(name);return jsonCookie?angular.fromJson(decodeURIComponent(jsonCookie)):null},put:function(name,value,options){options=$.extend({},self.defaultOptions,options),$.cookie.raw=!0,$.cookie(name,fixedEncodeURIComponent(angular.toJson(value)),options)},remove:function(name,options){options=$.extend({},self.defaultOptions,options),$.removeCookie(name,options)}}}}]),Bahmni.Common.Util.DateUtil={diffInDays:function(dateFrom,dateTo){return Math.floor((this.parse(dateTo)-this.parse(dateFrom))/864e5)},diffInMinutes:function(dateFrom,dateTo){return moment(dateTo).diff(moment(dateFrom),"minutes")},diffInSeconds:function(dateFrom,dateTo){return moment(dateFrom).diff(moment(dateTo),"seconds")},isInvalid:function(date){return"Invalid Date"==date},diffInDaysRegardlessOfTime:function(dateFrom,dateTo){var from=new Date(dateFrom),to=new Date(dateTo);return from.setHours(0,0,0,0),to.setHours(0,0,0,0),Math.floor((to-from)/864e5)},addSeconds:function(date,seconds){return moment(date).add(seconds,"seconds").toDate()},addMinutes:function(date,minutes){return this.addSeconds(date,60*minutes)},addDays:function(date,days){return moment(date).add(days,"day").toDate()},addMonths:function(date,months){return moment(date).add(months,"month").toDate()},addYears:function(date,years){return moment(date).add(years,"year").toDate()},subtractSeconds:function(date,seconds){return moment(date).subtract(seconds,"seconds").toDate()},subtractDays:function(date,days){return this.addDays(date,-1*days)},subtractMonths:function(date,months){return this.addMonths(date,-1*months)},subtractYears:function(date,years){return this.addYears(date,-1*years)},createDays:function(startDate,endDate){for(var startDate=this.getDate(startDate),endDate=this.getDate(endDate),numberOfDays=this.diffInDays(startDate,endDate),days=[],i=0;i<=numberOfDays;i++)days.push({dayNumber:i+1,date:this.addDays(startDate,i)});return days},getDayNumber:function(referenceDate,date){return this.diffInDays(this.getDate(referenceDate),this.getDate(date))+1},getDateWithoutTime:function(datetime){return datetime?moment(datetime).format("YYYY-MM-DD"):null},getDateInMonthsAndYears:function(date,format){var format=format||"MMM YY",dateRepresentation=isNaN(Number(date))?date:Number(date);return moment(dateRepresentation).isValid()?dateRepresentation?moment(dateRepresentation).format(format):null:date},formatDateWithTime:function(datetime){var dateRepresentation=isNaN(Number(datetime))?datetime:Number(datetime);return moment(dateRepresentation).isValid()?dateRepresentation?moment(dateRepresentation).format("DD MMM YY h:mm a"):null:datetime},formatDateWithoutTime:function(date){var dateRepresentation=isNaN(Number(date))?date:Number(date);return moment(dateRepresentation).isValid()?dateRepresentation?moment(dateRepresentation).format("DD MMM YY"):null:date},formatDateInStrictMode:function(date){var dateRepresentation=isNaN(Number(date))?date:Number(date);return moment(dateRepresentation,"YYYY-MM-DD",!0).isValid()?moment(dateRepresentation).format("DD MMM YY"):moment(dateRepresentation,"YYYY-MM-DDTHH:mm:ss.SSSZZ",!0).isValid()?moment(dateRepresentation).format("DD MMM YY"):date},formatTime:function(date){var dateRepresentation=isNaN(Number(date))?date:Number(date);return moment(dateRepresentation).isValid()?dateRepresentation?moment(dateRepresentation).format("h:mm a"):null:date},getDate:function(dateTime){return moment(this.parse(dateTime)).startOf("day").toDate()},parse:function(dateString){return dateString?moment(dateString).toDate():null},parseDatetime:function(dateTimeString){return dateTimeString?moment(dateTimeString):null},now:function(){return new Date},today:function(){return this.getDate(this.now())},endOfToday:function(){return moment(this.parse(this.now())).endOf("day").toDate()},getDateWithoutHours:function(dateString){return moment(dateString).toDate().setHours(0,0,0,0)},getDateTimeWithoutSeconds:function(dateString){return moment(dateString).toDate().setSeconds(0,0)},isSameDateTime:function(date1,date2){if(null==date1||null==date2)return!1;var dateOne=this.parse(date1),dateTwo=this.parse(date2);return dateOne.getTime()==dateTwo.getTime()},isBeforeDate:function(date1,date2){return moment(date1).isBefore(moment(date2))},isSameDate:function(date1,date2){if(null==date1||null==date2)return!1;var dateOne=this.parse(date1),dateTwo=this.parse(date2);return dateOne.getFullYear()===dateTwo.getFullYear()&&dateOne.getMonth()===dateTwo.getMonth()&&dateOne.getDate()===dateTwo.getDate()},diffInYearsMonthsDays:function(dateFrom,dateTo){dateFrom=this.parse(dateFrom),dateTo=this.parse(dateTo);var from={d:dateFrom.getDate(),m:dateFrom.getMonth(),y:dateFrom.getFullYear()},to={d:dateTo.getDate(),m:dateTo.getMonth(),y:dateTo.getFullYear()},age={d:0,m:0,y:0},daysFebruary=to.y%4!=0||to.y%100==0&&to.y%400!=0?28:29,daysInMonths=[31,daysFebruary,31,30,31,30,31,31,30,31,30,31];return age.y=to.y-from.y,age.m=to.m-from.m,from.m>to.m&&(age.y=age.y-1,age.m=to.m-from.m+12),age.d=to.d-from.d,from.d>to.d&&(age.m=age.m-1,from.m==to.m&&(age.y=age.y-1,age.m=age.m+12),age.d=to.d-from.d+daysInMonths[parseInt(from.m)]),{days:age.d,months:age.m,years:age.y}},convertToUnits:function(minutes){var allUnits={Years:525600,Months:43200,Weeks:10080,Days:1440,Hours:60,Minutes:1},durationRepresentation=function(value,unitName,unitValueInMinutes){return{value:value,unitName:unitName,unitValueInMinutes:unitValueInMinutes,allUnits:allUnits}};for(var unitName in allUnits){var unitValueInMinutes=allUnits[unitName];if((minutes||0!==minutes)&&minutes>=unitValueInMinutes&&minutes%unitValueInMinutes===0)return durationRepresentation(minutes/unitValueInMinutes,unitName,unitValueInMinutes)}return durationRepresentation(void 0,void 0,void 0)},getEndDateFromDuration:function(dateFrom,value,unit){dateFrom=this.parse(dateFrom);var from={h:dateFrom.getHours(),d:dateFrom.getDate(),m:dateFrom.getMonth(),y:dateFrom.getFullYear()},to=new Date(from.y,from.m,from.d,from.h);return"Months"===unit?to.setMonth(from.m+value):"Weeks"===unit?to.setDate(from.d+7*value):"Days"===unit?to.setDate(from.d+value):"Hours"===unit&&to.setHours(from.h+value),to},parseLongDateToServerFormat:function(longDate){return longDate?moment(longDate).format("YYYY-MM-DDTHH:mm:ss.SSS"):null},parseServerDateToDate:function(longDate){return longDate?moment(longDate,"YYYY-MM-DDTHH:mm:ss.SSSZZ").toDate():null},getDateTimeInSpecifiedFormat:function(date,format){return date?moment(date).format(format):null},getISOString:function(date){return date?moment(date).toDate().toISOString():null},npToday:function(){var currentDate=this.now(),currentNepaliDate=calendarFunctions.getBsDateByAdDate(currentDate.getFullYear(),currentDate.getMonth()+1,currentDate.getDate());return calendarFunctions.bsDateFormat("%y-%m-%d",currentNepaliDate.bsYear,currentNepaliDate.bsMonth,currentNepaliDate.bsDate)},isValid:function(date){var dateRepresentation=isNaN(Number(date))?date:Number(date);return moment(dateRepresentation).isValid()},isBeforeTime:function(time,otherTime){return moment(time,"hh:mm a").format("YYYY-MM-DD")}},Bahmni.Common.Util.DateTimeFormatter={getDateWithoutTime:function(datetime){return datetime?moment(datetime).format("YYYY-MM-DD"):null}},Bahmni.Common.Util.ArrayUtil={chunk:function(array,chunkSize){for(var chunks=[],i=0;i<array.length;i+=chunkSize)chunks.push(array.slice(i,i+chunkSize));return chunks},groupByPreservingOrder:function(records,groupingFunction,keyName,valueName){var groups=[];return records.forEach(function(record){var recordKey=groupingFunction(record),existingGroup=_.find(groups,function(group){return group[keyName]===recordKey});if(existingGroup)existingGroup[valueName].push(record);else{var newGroup={};newGroup[keyName]=recordKey,newGroup[valueName]=[record],groups.push(newGroup)}}),groups}},String.prototype.format=function(){for(var content=this,i=0;i<arguments.length;i++){var replacement="{"+i+"}";content=content.replace(replacement,arguments[i])}return content},String.prototype.toValidId=function(){var content=this;return content.replace(/\s/g,"-")},Modernizr.addTest("ios",function(){return!!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)}),Modernizr.addTest("windowOS",function(){return navigator.appVersion.indexOf("Win")!=-1});var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.Models=Bahmni.Common.Models||{},angular.module("bahmni.common.models",[]),Bahmni.Common.VisitControl=function(visitTypes,defaultVisitTypeName,encounterService,$translate,visitService){var self=this;self.visitTypes=visitTypes,self.defaultVisitTypeName=defaultVisitTypeName,self.defaultVisitType=visitTypes.filter(function(visitType){return visitType.name===defaultVisitTypeName})[0],self.startButtonText=function(visitType){return $translate.instant("REGISTRATION_START_VISIT",{visitType:visitType.name})},self.startVisit=function(visitType){self.selectedVisitType=visitType,self.onStartVisit()},self.createVisitOnly=function(patientUuid,visitLocationUuid){var visitType=self.selectedVisitType||self.defaultVisitType,visitDetails={patient:patientUuid,visitType:visitType.uuid,location:visitLocationUuid};return visitService.createVisit(visitDetails)}},Bahmni.Common.VisitSummary=function(visitSummary){angular.extend(this,visitSummary),this.isAdmitted=function(){return!(!this.admissionDetails||!this.admissionDetails.uuid)},this.isDischarged=function(){return!(!this.dischargeDetails||!this.dischargeDetails.uuid)},this.getAdmissionEncounterUuid=function(){return this.isAdmitted()?this.admissionDetails.uuid:void 0},this.getDischargeEncounterUuid=function(){return this.isDischarged()?this.dischargeDetails.uuid:void 0},this.hasBeenAdmitted=function(){return this.isAdmitted()&&!this.isDischarged()}},angular.module("bahmni.common.patient",[]),Bahmni.PatientMapper=function(patientConfig,$rootScope,$translate){this.patientConfig=patientConfig,this.map=function(openmrsPatient){var patient=this.mapBasic(openmrsPatient);return this.mapAttributes(patient,openmrsPatient.person.attributes),patient},this.mapBasic=function(openmrsPatient){var patient={};if(patient.uuid=openmrsPatient.uuid,patient.givenName=openmrsPatient.person.preferredName.givenName,patient.familyName=null===openmrsPatient.person.preferredName.familyName?"":openmrsPatient.person.preferredName.familyName,patient.name=patient.givenName+" "+patient.familyName,patient.age=openmrsPatient.person.age,patient.ageText=calculateAge(Bahmni.Common.Util.DateUtil.parseServerDateToDate(openmrsPatient.person.birthdate)),patient.gender=openmrsPatient.person.gender,patient.genderText=mapGenderText(patient.gender),patient.address=mapAddress(openmrsPatient.person.preferredAddress),patient.birthdateEstimated=openmrsPatient.person.birthdateEstimated,patient.birthtime=Bahmni.Common.Util.DateUtil.parseServerDateToDate(openmrsPatient.person.birthtime),patient.bloodGroupText=getPatientBloodGroupText(openmrsPatient),openmrsPatient.identifiers){var primaryIdentifier=openmrsPatient.identifiers[0].primaryIdentifier;patient.identifier=primaryIdentifier?primaryIdentifier:openmrsPatient.identifiers[0].identifier}return openmrsPatient.person.birthdate&&(patient.birthdate=parseDate(openmrsPatient.person.birthdate)),openmrsPatient.person.personDateCreated&&(patient.registrationDate=parseDate(openmrsPatient.person.personDateCreated)),patient.image=Bahmni.Common.Constants.patientImageUrlByPatientUuid+openmrsPatient.uuid,patient},this.getPatientConfigByUuid=function(patientConfig,attributeUuid){return this.patientConfig.personAttributeTypes?patientConfig.personAttributeTypes.filter(function(item){return item.uuid===attributeUuid})[0]:{}},this.mapAttributes=function(patient,attributes){var self=this;this.patientConfig&&attributes.forEach(function(attribute){var x=self.getPatientConfigByUuid(patientConfig,attribute.attributeType.uuid);patient[x.name]={label:x.description,value:attribute.value,isDateField:checkIfDateField(x)}})};var calculateAge=function(birthDate){var DateUtil=Bahmni.Common.Util.DateUtil,age=DateUtil.diffInYearsMonthsDays(birthDate,DateUtil.now()),ageInString="";return age.years&&(ageInString+=age.years+" <span> "+$translate.instant("CLINICAL_YEARS_TRANSLATION_KEY")+" </span>"),age.months&&(ageInString+=age.months+"<span>  "+$translate.instant("CLINICAL_MONTHS_TRANSLATION_KEY")+" </span>"),age.days&&(ageInString+=age.days+"<span>  "+$translate.instant("CLINICAL_DAYS_TRANSLATION_KEY")+" </span>"),ageInString},mapAddress=function(preferredAddress){return preferredAddress?{address1:preferredAddress.address1,address2:preferredAddress.address2,address3:preferredAddress.address3,cityVillage:preferredAddress.cityVillage,countyDistrict:null===preferredAddress.countyDistrict?"":preferredAddress.countyDistrict,stateProvince:preferredAddress.stateProvince}:{}},parseDate=function(dateStr){return dateStr?Bahmni.Common.Util.DateUtil.parse(dateStr.substr(0,10)):dateStr},mapGenderText=function(genderChar){return null==genderChar?null:"<span>"+$rootScope.genderMap[angular.uppercase(genderChar)]+"</span>"},getPatientBloodGroupText=function(openmrsPatient){if(openmrsPatient.person.bloodGroup)return"<span>"+openmrsPatient.person.bloodGroup+"</span>";if(openmrsPatient.person.attributes&&openmrsPatient.person.attributes.length>0){var bloodGroup;if(_.forEach(openmrsPatient.person.attributes,function(attribute){"bloodGroup"==attribute.attributeType.display&&(bloodGroup=attribute.display)}),bloodGroup)return"<span>"+bloodGroup+"</span>"}},checkIfDateField=function(x){return x.format===Bahmni.Common.Constants.patientAttributeDateFieldFormat}},angular.module("bahmni.common.patient").service("patientService",["$http","sessionService",function($http,sessionService){this.getPatient=function(uuid){var patient=$http.get(Bahmni.Common.Constants.openmrsUrl+"/ws/rest/v1/patient/"+uuid,{method:"GET",params:{v:"full"},withCredentials:!0});return patient},this.getRelationships=function(patientUuid){return $http.get(Bahmni.Common.Constants.openmrsUrl+"/ws/rest/v1/relationship",{method:"GET",params:{person:patientUuid,v:"full"},withCredentials:!0})},this.findPatients=function(params){return $http.get(Bahmni.Common.Constants.sqlUrl,{method:"GET",params:params,withCredentials:!0})},this.search=function(query,offset,identifier){return offset=offset||0,$http.get(Bahmni.Common.Constants.bahmniSearchUrl+"/patient",{method:"GET",params:{q:query,startIndex:offset,identifier:identifier,loginLocationUuid:sessionService.getLoginLocationUuid()},withCredentials:!0})},this.getPatientContext=function(patientUuid,programUuid,personAttributes,programAttributes,patientIdentifiers){return $http.get("/openmrs/ws/rest/v1/bahmnicore/patientcontext",{params:{patientUuid:patientUuid,programUuid:programUuid,personAttributes:personAttributes,programAttributes:programAttributes,patientIdentifiers:patientIdentifiers},withCredentials:!0})}}]),angular.module("bahmni.common.config").directive("showIfPrivilege",["$rootScope",function($rootScope){return{scope:{showIfPrivilege:"@"},link:function(scope,element){var privileges=scope.showIfPrivilege.split(","),requiredPrivilege=!1;if($rootScope.currentUser){var allTypesPrivileges=_.map($rootScope.currentUser.privileges,_.property("name")),intersect=_.intersectionWith(allTypesPrivileges,privileges,_.isEqual);requiredPrivilege=intersect.length>0}requiredPrivilege||element.hide()}}}]),angular.module("bahmni.common.patient").filter("gender",["$rootScope",function($rootScope){return function(genderChar){return null==genderChar?"Unknown":$rootScope.genderMap[angular.uppercase(genderChar)]}}]),angular.module("bahmni.common.patient").directive("patientSummary",function(){var link=function($scope){$scope.showPatientDetails=!1,$scope.togglePatientDetails=function(){$scope.showPatientDetails=!$scope.showPatientDetails},$scope.onImageClick=function(){$scope.onImageClickHandler&&$scope.onImageClickHandler()}};return{restrict:"E",templateUrl:"../common/patient/header/views/patientSummary.html",link:link,required:"patient",scope:{patient:"=",bedDetails:"=",onImageClickHandler:"&"}}}),angular.module("bahmni.common.patient").directive("fallbackSrc",function(){return{restrict:"A",link:function(scope,element,attrs){_.isEmpty(attrs.ngSrc)&&element.attr("src",attrs.fallbackSrc),element.bind("error",function(){element.attr("src",attrs.fallbackSrc)})}}});var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.Domain=Bahmni.Common.Domain||{},Bahmni.Common.Domain.Helper=Bahmni.Common.Domain.Helper||{},angular.module("bahmni.common.domain",[]),Bahmni.Common.Domain.RetrospectiveEntry=function(){var self=this;Object.defineProperty(this,"encounterDate",{get:function(){return self._encounterDate},set:function(value){value&&(self._encounterDate=value)}})},Bahmni.Common.Domain.RetrospectiveEntry.createFrom=function(retrospectiveEncounterDateCookie){var obj=new Bahmni.Common.Domain.RetrospectiveEntry;return obj.encounterDate=retrospectiveEncounterDateCookie,obj},Bahmni.Common.Domain.Diagnosis=function(codedAnswer,order,certainty,existingObsUuid,freeTextAnswer,diagnosisDateTime,voided){var self=this;self.codedAnswer=codedAnswer,self.order=order,self.certainty=certainty,self.existingObs=existingObsUuid,self.freeTextAnswer=freeTextAnswer,self.diagnosisDateTime=diagnosisDateTime,self.diagnosisStatus=void 0,self.isNonCodedAnswer=!1,self.codedAnswer&&(self.conceptName=self.codedAnswer.name),self.voided=voided,self.firstDiagnosis=null,self.comments="",self.getDisplayName=function(){return self.freeTextAnswer?self.freeTextAnswer:self.codedAnswer.shortName||self.codedAnswer.name},self.isPrimary=function(){return"PRIMARY"==self.order},self.isSecondary=function(){return"SECONDARY"==self.order},self.isRuledOut=function(){return self.diagnosisStatus==$rootScope.diagnosisStatus},self.answerNotFilled=function(){return!self.codedAnswer.name},self.isValidAnswer=function(){return self.codedAnswer.name&&self.codedAnswer.uuid||self.codedAnswer.name&&!self.codedAnswer.uuid&&self.isNonCodedAnswer||self.answerNotFilled()},self.isValidOrder=function(){return self.isEmpty()||void 0!==self.order},self.isValidCertainty=function(){return self.isEmpty()||void 0!==self.certainty},self.isEmpty=function(){return void 0===self.getDisplayName()||0===self.getDisplayName().length},self.diagnosisStatusValue=null,self.diagnosisStatusConcept=null,Object.defineProperty(this,"diagnosisStatus",{get:function(){return this.diagnosisStatusValue},set:function(newStatus){newStatus?(this.diagnosisStatusValue=newStatus,this.diagnosisStatusConcept={name:Bahmni.Common.Constants.ruledOutdiagnosisStatus}):(this.diagnosisStatusValue=null,this.diagnosisStatusConcept=null)}}),self.clearCodedAnswerUuid=function(){self.codedAnswer.uuid=void 0},self.setAsNonCodedAnswer=function(){self.isNonCodedAnswer=!self.isNonCodedAnswer}},angular.module("bahmni.common.domain").service("retrospectiveEntryService",["$rootScope","$bahmniCookieStore",function($rootScope,$bahmniCookieStore){var retrospectiveEntryService=this,dateUtil=Bahmni.Common.Util.DateUtil;this.getRetrospectiveEntry=function(){return $rootScope.retrospectiveEntry},this.isRetrospectiveMode=function(){return!_.isEmpty(retrospectiveEntryService.getRetrospectiveEntry())},this.getRetrospectiveDate=function(){return $rootScope.retrospectiveEntry&&$rootScope.retrospectiveEntry.encounterDate},this.initializeRetrospectiveEntry=function(){var retrospectiveEncounterDateCookie=$bahmniCookieStore.get(Bahmni.Common.Constants.retrospectiveEntryEncounterDateCookieName);retrospectiveEncounterDateCookie&&($rootScope.retrospectiveEntry=Bahmni.Common.Domain.RetrospectiveEntry.createFrom(dateUtil.getDate(retrospectiveEncounterDateCookie)))},this.resetRetrospectiveEntry=function(date){$bahmniCookieStore.remove(Bahmni.Common.Constants.retrospectiveEntryEncounterDateCookieName,{path:"/",expires:1}),$rootScope.retrospectiveEntry=void 0,date&&!dateUtil.isSameDate(date,dateUtil.today())&&($rootScope.retrospectiveEntry=Bahmni.Common.Domain.RetrospectiveEntry.createFrom(dateUtil.getDate(date)),$bahmniCookieStore.put(Bahmni.Common.Constants.retrospectiveEntryEncounterDateCookieName,date,{path:"/",expires:1}))}}]),angular.module("bahmni.common.domain").service("diagnosisService",["$http","$rootScope",function($http,$rootScope){var self=this;this.getAllFor=function(searchTerm){var url=Bahmni.Common.Constants.emrapiConceptUrl;return $http.get(url,{params:{term:searchTerm,limit:20}})},this.getDiagnoses=function(patientUuid,visitUuid){var url=Bahmni.Common.Constants.bahmniDiagnosisUrl;return $http.get(url,{params:{patientUuid:patientUuid,visitUuid:visitUuid}})},this.deleteDiagnosis=function(obsUuid){var url=Bahmni.Common.Constants.bahmniDeleteDiagnosisUrl;return $http.get(url,{params:{obsUuid:obsUuid}})},this.getDiagnosisConceptSet=function(){return $http.get(Bahmni.Common.Constants.conceptUrl,{method:"GET",params:{v:"custom:(uuid,name,setMembers)",code:Bahmni.Common.Constants.diagnosisConceptSet,source:Bahmni.Common.Constants.emrapiConceptMappingSource},withCredentials:!0})},this.getPastAndCurrentDiagnoses=function(patientUuid,encounterUuid){return self.getDiagnoses(patientUuid).then(function(response){var diagnosisMapper=new Bahmni.DiagnosisMapper($rootScope.diagnosisStatus),allDiagnoses=diagnosisMapper.mapDiagnoses(response.data),pastDiagnoses=diagnosisMapper.mapPastDiagnosis(allDiagnoses,encounterUuid),savedDiagnosesFromCurrentEncounter=diagnosisMapper.mapSavedDiagnosesFromCurrentEncounter(allDiagnoses,encounterUuid);return{pastDiagnoses:pastDiagnoses,savedDiagnosesFromCurrentEncounter:savedDiagnosesFromCurrentEncounter}})},this.populateDiagnosisInformation=function(patientUuid,consultation){return this.getPastAndCurrentDiagnoses(patientUuid,consultation.encounterUuid).then(function(diagnosis){return consultation.pastDiagnoses=diagnosis.pastDiagnoses,consultation.savedDiagnosesFromCurrentEncounter=diagnosis.savedDiagnosesFromCurrentEncounter,consultation})}}]),angular.module("bahmni.common.domain").service("bedService",["$http","$rootScope",function($http,$rootScope){var mapBedDetails=function(response){var results=response.data.results;if(!_.isEmpty(results)){var bed=_.first(results);return{wardName:bed.physicalLocation.parentLocation.display,wardUuid:bed.physicalLocation.parentLocation.uuid,
physicalLocationName:bed.physicalLocation.name,bedNumber:bed.bedNumber,bedId:bed.bedId}}};this.setBedDetailsForPatientOnRootScope=function(uuid){var promise=this.getAssignedBedForPatient(uuid);return promise.then(function(bedDetails){$rootScope.bedDetails=bedDetails}),promise},this.getAssignedBedForPatient=function(patientUuid,visitUuid){var params={patientUuid:patientUuid,v:"full"};return visitUuid&&(params.visitUuid=visitUuid,params.s="bedDetailsFromVisit"),$http.get(Bahmni.Common.Constants.bedFromVisit,{method:"GET",params:params,withCredentials:!0}).then(mapBedDetails)},this.assignBed=function(bedId,patientUuid,encounterUuid){var patientJson={patientUuid:patientUuid,encounterUuid:encounterUuid};return $http.post(Bahmni.Common.Constants.bedFromVisit+"/"+bedId,patientJson,{withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}})},this.getBedInfo=function(bedId){return $http.get(Bahmni.Common.Constants.bedFromVisit+"/"+bedId+"?v=custom:(bedId,bedNumber,patients:(uuid,person:(age,personName:(givenName,familyName),gender),identifiers:(uuid,identifier),),physicalLocation:(name))",{withCredentials:!0})},this.getCompleteBedDetailsByBedId=function(bedId){return $http.get(Bahmni.Common.Constants.bedFromVisit+"/"+bedId,{withCredentials:!0})}}]),angular.module("bahmni.common.domain").factory("configurationService",["$http","$q",function($http,$q){var configurationFunctions={};configurationFunctions.encounterConfig=function(){return $http.get(Bahmni.Common.Constants.encounterConfigurationUrl,{params:{callerContext:"REGISTRATION_CONCEPTS"},withCredentials:!0})},configurationFunctions.patientConfig=function(){var patientConfig=$http.get(Bahmni.Common.Constants.patientConfigurationUrl,{withCredentials:!0});return patientConfig},configurationFunctions.patientAttributesConfig=function(){return $http.get(Bahmni.Common.Constants.personAttributeTypeUrl,{params:{v:"custom:(uuid,name,sortWeight,description,format,concept)"},withCredentials:!0})},configurationFunctions.dosageFrequencyConfig=function(){var dosageFrequencyConfig=$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name,answers)",name:Bahmni.Common.Constants.dosageFrequencyConceptName},withCredentials:!0});return dosageFrequencyConfig},configurationFunctions.dosageInstructionConfig=function(){var dosageInstructionConfig=$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name,answers)",name:Bahmni.Common.Constants.dosageInstructionConceptName},withCredentials:!0});return dosageInstructionConfig},configurationFunctions.stoppedOrderReasonConfig=function(){var stoppedOrderReasonConfig=$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name,answers)",name:Bahmni.Common.Constants.stoppedOrderReasonConceptName},withCredentials:!0});return stoppedOrderReasonConfig},configurationFunctions.consultationNoteConfig=function(){var consultationNoteConfig=$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name,answers)",name:Bahmni.Common.Constants.consultationNoteConceptName},withCredentials:!0});return consultationNoteConfig},configurationFunctions.radiologyObservationConfig=function(){var radiologyObservationConfig=$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name)",name:Bahmni.Common.Constants.radiologyResultConceptName},withCredentials:!0});return radiologyObservationConfig},configurationFunctions.labOrderNotesConfig=function(){var labOrderNotesConfig=$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name)",name:Bahmni.Common.Constants.labOrderNotesConcept},withCredentials:!0});return labOrderNotesConfig},configurationFunctions.defaultEncounterType=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{params:{property:"bahmni.encounterType.default"},withCredentials:!0,transformResponse:[function(data){return data}]})},configurationFunctions.radiologyImpressionConfig=function(){var radiologyImpressionConfig=$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name)",name:Bahmni.Common.Constants.impressionConcept},withCredentials:!0});return radiologyImpressionConfig},configurationFunctions.addressLevels=function(){return $http.get(Bahmni.Common.Constants.openmrsUrl+"/module/addresshierarchy/ajax/getOrderedAddressHierarchyLevels.form",{withCredentials:!0})},configurationFunctions.allTestsAndPanelsConcept=function(){var allTestsAndPanelsConcept=$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name:(uuid,name),setMembers:(uuid,name:(uuid,name)))",name:Bahmni.Common.Constants.allTestsAndPanelsConceptName},withCredentials:!0});return allTestsAndPanelsConcept},configurationFunctions.identifierTypesConfig=function(){return $http.get(Bahmni.Common.Constants.idgenConfigurationURL,{withCredentials:!0})},configurationFunctions.genderMap=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{method:"GET",params:{property:"mrs.genders"},withCredentials:!0})},configurationFunctions.relationshipTypeMap=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{method:"GET",params:{property:"bahmni.relationshipTypeMap"},withCredentials:!0})},configurationFunctions.relationshipTypeConfig=function(){return $http.get(Bahmni.Common.Constants.relationshipTypesUrl,{withCredentials:!0,params:{v:"custom:(aIsToB,bIsToA,uuid)"}})},configurationFunctions.loginLocationToVisitTypeMapping=function(){var url=Bahmni.Common.Constants.entityMappingUrl;return $http.get(url,{params:{mappingType:"loginlocation_visittype",s:"byEntityAndMappingType"}})},configurationFunctions.enableAuditLog=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{method:"GET",params:{property:"bahmni.enableAuditLog"},withCredentials:!0})};var existingPromises={},configurations={},getConfigurations=function(configurationNames){var configurationsPromiseDefer=$q.defer(),promises=[];return configurationNames.forEach(function(configurationName){existingPromises[configurationName]||(existingPromises[configurationName]=configurationFunctions[configurationName]().then(function(response){configurations[configurationName]=response.data}),promises.push(existingPromises[configurationName]))}),$q.all(promises).then(function(){configurationsPromiseDefer.resolve(configurations)}),configurationsPromiseDefer.promise};return{getConfigurations:getConfigurations}}]),angular.module("bahmni.common.domain").factory("dispositionService",["$http",function($http){var getDispositionActions=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl+"&name="+Bahmni.Common.Constants.dispositionConcept+"&v=custom:(uuid,name,answers:(uuid,name,mappings))",{cache:!0})},getDispositionNoteConcept=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl+"&name="+Bahmni.Common.Constants.dispositionNoteConcept+"&v=custom:(uuid,name:(name))",{cache:!0})},getDispositionByVisit=function(visitUuid){return $http.get(Bahmni.Common.Constants.bahmniDispositionByVisitUrl,{params:{visitUuid:visitUuid}})},getDispositionByPatient=function(patientUuid,numberOfVisits){return $http.get(Bahmni.Common.Constants.bahmniDispositionByPatientUrl,{params:{patientUuid:patientUuid,numberOfVisits:numberOfVisits}})};return{getDispositionActions:getDispositionActions,getDispositionNoteConcept:getDispositionNoteConcept,getDispositionByVisit:getDispositionByVisit,getDispositionByPatient:getDispositionByPatient}}]),angular.module("bahmni.common.domain").service("visitService",["$http",function($http){this.getVisit=function(uuid,params){var parameters=params?params:"custom:(uuid,visitId,visitType,patient,encounters:(uuid,encounterType,voided,orders:(uuid,orderType,voided,concept:(uuid,set,name),),obs:(uuid,value,concept,obsDatetime,groupMembers:(uuid,concept:(uuid,name),obsDatetime,value:(uuid,name),groupMembers:(uuid,concept:(uuid,name),value:(uuid,name),groupMembers:(uuid,concept:(uuid,name),value:(uuid,name)))))))";return $http.get(Bahmni.Common.Constants.visitUrl+"/"+uuid,{params:{v:parameters}})},this.endVisit=function(visitUuid){return $http.post(Bahmni.Common.Constants.endVisitUrl+"?visitUuid="+visitUuid,{withCredentials:!0})},this.changeVisit=function(visitId,patientId){return $http.post(Bahmni.Common.Constants.changeVisit+"?visitId="+visitId+"&patientId="+patientId,{withCredentials:!0})},this.endVisitAndCreateEncounter=function(visitUuid,bahmniEncounterTransaction){return $http.post(Bahmni.Common.Constants.endVisitAndCreateEncounterUrl+"?visitUuid="+visitUuid,bahmniEncounterTransaction,{withCredentials:!0})},this.updateVisit=function(visitUuid,attributes){return $http.post(Bahmni.Common.Constants.visitUrl+"/"+visitUuid,attributes,{withCredentials:!0})},this.createVisit=function(visitDetails){return $http.post(Bahmni.Common.Constants.visitUrl,visitDetails,{withCredentials:!0})},this.getVisitSummary=function(visitUuid){return $http.get(Bahmni.Common.Constants.visitSummaryUrl,{params:{visitUuid:visitUuid},withCredentials:!0})},this.search=function(parameters){return $http.get(Bahmni.Common.Constants.visitUrl,{params:parameters,withCredentials:!0})},this.getVisitType=function(){return $http.get(Bahmni.Common.Constants.visitTypeUrl,{withCredentials:!0})}}]),angular.module("bahmni.common.domain").service("encounterService",["$http","$q","$rootScope","configurations","$bahmniCookieStore",function($http,$q,$rootScope,configurations,$bahmniCookieStore){function isObsConceptClassVideoOrImage(obs){return"Video"===obs.concept.conceptClass||"Image"===obs.concept.conceptClass}this.buildEncounter=function(encounter){encounter.observations=encounter.observations||[],encounter.observations.forEach(function(obs){stripExtraConceptInfo(obs)}),encounter.providers=encounter.providers||[];var providerData=$bahmniCookieStore.get(Bahmni.Common.Constants.grantProviderAccessDataCookieName);return _.isEmpty(encounter.providers)&&(providerData&&providerData.uuid?encounter.providers.push({uuid:providerData.uuid}):$rootScope.currentProvider&&$rootScope.currentProvider.uuid&&encounter.providers.push({uuid:$rootScope.currentProvider.uuid})),encounter};var getDefaultEncounterType=function(){var url=Bahmni.Common.Constants.encounterTypeUrl;return $http.get(url+"/"+configurations.defaultEncounterType()).then(function(response){return response.data})},getEncounterTypeBasedOnLoginLocation=function(loginLocationUuid){return $http.get(Bahmni.Common.Constants.entityMappingUrl,{params:{entityUuid:loginLocationUuid,mappingType:"location_encountertype",s:"byEntityAndMappingType"},withCredentials:!0})},getEncounterTypeBasedOnProgramUuid=function(programUuid){return $http.get(Bahmni.Common.Constants.entityMappingUrl,{params:{entityUuid:programUuid,mappingType:"program_encountertype",s:"byEntityAndMappingType"},withCredentials:!0})},getDefaultEncounterTypeIfMappingNotFound=function(entityMappings){var encounterType=entityMappings.data.results[0]&&entityMappings.data.results[0].mappings[0];return encounterType||(encounterType=getDefaultEncounterType()),encounterType};this.getEncounterType=function(programUuid,loginLocationUuid){return programUuid?getEncounterTypeBasedOnProgramUuid(programUuid).then(function(response){return getDefaultEncounterTypeIfMappingNotFound(response)}):loginLocationUuid?getEncounterTypeBasedOnLoginLocation(loginLocationUuid).then(function(response){return getDefaultEncounterTypeIfMappingNotFound(response)}):getDefaultEncounterType()},this.create=function(encounter){return encounter=this.buildEncounter(encounter),$http.post(Bahmni.Common.Constants.bahmniEncounterUrl,encounter,{withCredentials:!0})},this["delete"]=function(encounterUuid,reason){return $http["delete"](Bahmni.Common.Constants.bahmniEncounterUrl+"/"+encounterUuid,{params:{reason:reason}})};var deleteIfImageOrVideoObsIsVoided=function(obs){if(obs.voided&&obs.groupMembers&&!obs.groupMembers.length&&obs.value&&isObsConceptClassVideoOrImage(obs)){var url=Bahmni.Common.Constants.RESTWS_V1+"/bahmnicore/visitDocument?filename="+obs.value;$http["delete"](url,{withCredentials:!0})}},stripExtraConceptInfo=function(obs){deleteIfImageOrVideoObsIsVoided(obs),obs.concept={uuid:obs.concept.uuid,name:obs.concept.name,dataType:obs.concept.dataType},obs.groupMembers=obs.groupMembers||[],obs.groupMembers.forEach(function(groupMember){stripExtraConceptInfo(groupMember)})},searchWithoutEncounterDate=function(visitUuid){return $http.post(Bahmni.Common.Constants.bahmniEncounterUrl+"/find",{visitUuids:[visitUuid],includeAll:Bahmni.Common.Constants.includeAllObservations},{withCredentials:!0})};this.search=function(visitUuid,encounterDate){return encounterDate?$http.get(Bahmni.Common.Constants.emrEncounterUrl,{params:{visitUuid:visitUuid,encounterDate:encounterDate,includeAll:Bahmni.Common.Constants.includeAllObservations},withCredentials:!0}):searchWithoutEncounterDate(visitUuid)},this.find=function(params){return $http.post(Bahmni.Common.Constants.bahmniEncounterUrl+"/find",params,{withCredentials:!0})},this.findByEncounterUuid=function(encounterUuid){return $http.get(Bahmni.Common.Constants.bahmniEncounterUrl+"/"+encounterUuid,{params:{includeAll:!0},withCredentials:!0})},this.getEncountersForEncounterType=function(patientUuid,encounterTypeUuid){return $http.get(Bahmni.Common.Constants.encounterUrl,{params:{patient:patientUuid,encounterType:encounterTypeUuid,v:"custom:(uuid,provider,visit:(uuid,startDatetime,stopDatetime),obs:(uuid,concept:(uuid,name),groupMembers:(id,uuid,obsDatetime,value,comment)))"},withCredentials:!0})},this.getDigitized=function(patientUuid){var patientDocumentEncounterTypeUuid=configurations.encounterConfig().getPatientDocumentEncounterTypeUuid();return $http.get(Bahmni.Common.Constants.encounterUrl,{params:{patient:patientUuid,encounterType:patientDocumentEncounterTypeUuid,v:"custom:(uuid,obs:(uuid))"},withCredentials:!0})},this.discharge=function(encounterData){var encounter=this.buildEncounter(encounterData);return $http.post(Bahmni.Common.Constants.dischargeUrl,encounter,{withCredentials:!0})}}]),angular.module("bahmni.common.domain").service("observationsService",["$http",function($http){this.fetch=function(patientUuid,conceptNames,scope,numberOfVisits,visitUuid,obsIgnoreList,filterObsWithOrders,patientProgramUuid){var params={concept:conceptNames};return obsIgnoreList&&(params.obsIgnoreList=obsIgnoreList),null!=filterObsWithOrders&&(params.filterObsWithOrders=filterObsWithOrders),visitUuid?(params.visitUuid=visitUuid,params.scope=scope):(params.patientUuid=patientUuid,params.numberOfVisits=numberOfVisits,params.scope=scope,params.patientProgramUuid=patientProgramUuid),$http.get(Bahmni.Common.Constants.observationsUrl,{params:params,withCredentials:!0})},this.getByUuid=function(observationUuid){return $http.get(Bahmni.Common.Constants.observationsUrl,{params:{observationUuid:observationUuid},withCredentials:!0})},this.getRevisedObsByUuid=function(observationUuid){return $http.get(Bahmni.Common.Constants.observationsUrl,{params:{observationUuid:observationUuid,revision:"latest"},withCredentials:!0})},this.fetchForEncounter=function(encounterUuid,conceptNames){return $http.get(Bahmni.Common.Constants.observationsUrl,{params:{encounterUuid:encounterUuid,concept:conceptNames},withCredentials:!0})},this.fetchForPatientProgram=function(patientProgramUuid,conceptNames,scope,obsIgnoreList){return $http.get(Bahmni.Common.Constants.observationsUrl,{params:{patientProgramUuid:patientProgramUuid,concept:conceptNames,scope:scope,obsIgnoreList:obsIgnoreList},withCredentials:!0})},this.getObsRelationship=function(targetObsUuid){return $http.get(Bahmni.Common.Constants.obsRelationshipUrl,{params:{targetObsUuid:targetObsUuid},withCredentials:!0})},this.getObsInFlowSheet=function(patientUuid,conceptSet,groupByConcept,orderByConcept,conceptNames,numberOfVisits,initialCount,latestCount,groovyExtension,startDate,endDate,patientProgramUuid){var params={patientUuid:patientUuid,conceptSet:conceptSet,groupByConcept:groupByConcept,orderByConcept:orderByConcept,conceptNames:conceptNames,numberOfVisits:numberOfVisits,initialCount:initialCount,latestCount:latestCount,name:groovyExtension,startDate:Bahmni.Common.Util.DateUtil.parseLongDateToServerFormat(startDate),endDate:Bahmni.Common.Util.DateUtil.parseLongDateToServerFormat(endDate),enrollment:patientProgramUuid};return $http.get(Bahmni.Common.Constants.observationsUrl+"/flowSheet",{params:params,withCredentials:!0})}}]),angular.module("bahmni.common.domain").factory("locationService",["$http","$bahmniCookieStore",function($http,$bahmniCookieStore){var getAllByTag=function(tags,operator){return $http.get(Bahmni.Common.Constants.locationUrl,{params:{s:"byTags",tags:tags||"",v:"default",operator:operator||"ALL"},cache:!0})},getByUuid=function(locationUuid){return $http.get(Bahmni.Common.Constants.locationUrl+"/"+locationUuid,{cache:!0}).then(function(response){return response.data})},getLoggedInLocation=function(){var cookie=$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName);return getByUuid(cookie.uuid)},getVisitLocation=function(locationUuid){return $http.get(Bahmni.Common.Constants.bahmniVisitLocationUrl+"/"+locationUuid,{headers:{Accept:"application/json"}})};return{getAllByTag:getAllByTag,getLoggedInLocation:getLoggedInLocation,getByUuid:getByUuid,getVisitLocation:getVisitLocation}}]),angular.module("bahmni.common.domain").factory("programService",["$http","programHelper","appService",function($http,programHelper,appService){var PatientProgramMapper=new Bahmni.Common.Domain.PatientProgramMapper,getAllPrograms=function(){return $http.get(Bahmni.Common.Constants.programUrl,{params:{v:"default"}}).then(function(response){var allPrograms=programHelper.filterRetiredPrograms(response.data.results);return _.forEach(allPrograms,function(program){program.allWorkflows=programHelper.filterRetiredWorkflowsAndStates(program.allWorkflows),program.outcomesConcept&&(program.outcomesConcept.setMembers=programHelper.filterRetiredOutcomes(program.outcomesConcept.setMembers))}),allPrograms})},enrollPatientToAProgram=function(patientUuid,programUuid,dateEnrolled,stateUuid,patientProgramAttributes,programAttributeTypes){var attributeFormatter=new Bahmni.Common.Domain.AttributeFormatter,req={url:Bahmni.Common.Constants.programEnrollPatientUrl,content:{patient:patientUuid,program:programUuid,dateEnrolled:moment(dateEnrolled).format(Bahmni.Common.Constants.ServerDateTimeFormat),attributes:attributeFormatter.removeUnfilledAttributes(attributeFormatter.getMrsAttributes(patientProgramAttributes,programAttributeTypes||[]))},headers:{"Content-Type":"application/json"}};return _.isEmpty(stateUuid)||(req.content.states=[{state:stateUuid,startDate:moment(dateEnrolled).format(Bahmni.Common.Constants.ServerDateTimeFormat)}]),$http.post(req.url,req.content,req.headers)},getPatientPrograms=function(patientUuid,filterAttributesForProgramDisplayControl,patientProgramUuid){var params={v:"full",patientProgramUuid:patientProgramUuid,patient:patientUuid};return $http.get(Bahmni.Common.Constants.programEnrollPatientUrl,{params:params}).then(function(response){var patientPrograms=response.data.results;return getProgramAttributeTypes().then(function(programAttributeTypes){return filterAttributesForProgramDisplayControl&&(patientPrograms=programHelper.filterProgramAttributes(response.data.results,programAttributeTypes)),programHelper.groupPrograms(patientPrograms)})})},savePatientProgram=function(patientProgramUuid,content){var req={url:Bahmni.Common.Constants.programEnrollPatientUrl+"/"+patientProgramUuid,content:content,headers:{"Content-Type":"application/json"}};return $http.post(req.url,req.content,req.headers)},deletePatientState=function(patientProgramUuid,patientStateUuid){var req={url:Bahmni.Common.Constants.programStateDeletionUrl+"/"+patientProgramUuid+"/state/"+patientStateUuid,content:{"!purge":"",reason:"User deleted the state."},headers:{"Content-Type":"application/json"}};return $http["delete"](req.url,req.content,req.headers)},getProgramAttributeTypes=function(){return $http.get(Bahmni.Common.Constants.programAttributeTypes,{params:{v:"custom:(uuid,name,description,datatypeClassname,datatypeConfig,concept)"}}).then(function(response){var programAttributesConfig=appService.getAppDescriptor().getConfigValue("program"),mandatoryProgramAttributes=[];for(var attributeName in programAttributesConfig)programAttributesConfig[attributeName].required&&mandatoryProgramAttributes.push(attributeName);return(new Bahmni.Common.Domain.AttributeTypeMapper).mapFromOpenmrsAttributeTypes(response.data.results,mandatoryProgramAttributes,programAttributesConfig).attributeTypes})},updatePatientProgram=function(patientProgram,programAttributeTypes,dateCompleted){return savePatientProgram(patientProgram.uuid,PatientProgramMapper.map(patientProgram,programAttributeTypes,dateCompleted))},getProgramStateConfig=function(){var config=appService.getAppDescriptor().getConfigValue("programDisplayControl");return!!config&&config.showProgramStateInTimeline},getEnrollmentInfoFor=function(patientUuid,representation){var params={patient:patientUuid,v:representation};return $http.get(Bahmni.Common.Constants.programEnrollPatientUrl,{params:params}).then(function(response){return response.data.results})};return{getAllPrograms:getAllPrograms,enrollPatientToAProgram:enrollPatientToAProgram,getPatientPrograms:getPatientPrograms,savePatientProgram:savePatientProgram,updatePatientProgram:updatePatientProgram,deletePatientState:deletePatientState,getProgramAttributeTypes:getProgramAttributeTypes,getProgramStateConfig:getProgramStateConfig,getEnrollmentInfoFor:getEnrollmentInfoFor}}]);var EncounterConfig=function(){function EncounterConfig(encounterTypes){this.encounterTypes=encounterTypes}return EncounterConfig.prototype={getConsultationEncounterTypeUuid:function(){return this.getEncounterTypeUuid("Consultation")},getAdmissionEncounterTypeUuid:function(){return this.getEncounterTypeUuid("ADMISSION")},getDischargeEncounterTypeUuid:function(){return this.getEncounterTypeUuid("DISCHARGE")},getTransferEncounterTypeUuid:function(){return this.getEncounterTypeUuid("TRANSFER")},getRadiologyEncounterTypeUuid:function(){return this.getEncounterTypeUuid("RADIOLOGY")},getPatientDocumentEncounterTypeUuid:function(){return this.getEncounterTypeUuid("Patient Document")},getValidationEncounterTypeUuid:function(){return this.getEncounterTypeUuid(Bahmni.Common.Constants.validationNotesEncounterType)},getEncounterTypeUuid:function(encounterTypeName){return this.encounterTypes[encounterTypeName]},getVisitTypes:function(){var visitTypesArray=[];for(var name in this.visitTypes)visitTypesArray.push({name:name,uuid:this.visitTypes[name]});return visitTypesArray},getEncounterTypes:function(){var encounterTypesArray=[];for(var name in this.encounterTypes)encounterTypesArray.push({name:name,uuid:this.encounterTypes[name]});return encounterTypesArray},getVisitTypeByUuid:function(uuid){var visitTypes=this.getVisitTypes();return visitTypes.filter(function(visitType){return visitType.uuid===uuid})[0]},getEncounterTypeByUuid:function(uuid){var encounterType=this.getEncounterTypes();return encounterType.filter(function(encounterType){return encounterType.uuid===uuid})[0]}},EncounterConfig}();Bahmni.Common.Domain.Helper.getHintForNumericConcept=function(concept){if(concept)return null!=concept.hiNormal&&null!=concept.lowNormal?"("+concept.lowNormal+" - "+concept.hiNormal+")":null!=concept.hiNormal&&null==concept.lowNormal?"(< "+concept.hiNormal+")":null==concept.hiNormal&&null!=concept.lowNormal?"(> "+concept.lowNormal+")":""},Bahmni.Common.Domain.ConceptMapper=function(){this.map=function(openMrsConcept){if(!openMrsConcept)return null;if(alreadyMappedConcept(openMrsConcept))return openMrsConcept;var openMrsDescription=openMrsConcept.descriptions?openMrsConcept.descriptions[0]:null,shortConceptName=_.find(openMrsConcept.names,{conceptNameType:"SHORT"});return{uuid:openMrsConcept.uuid,name:openMrsConcept.name.name,shortName:shortConceptName?shortConceptName.name:null,description:openMrsDescription?openMrsDescription.description:null,set:openMrsConcept.set,dataType:openMrsConcept.datatype?openMrsConcept.datatype.name:null,hiAbsolute:openMrsConcept.hiAbsolute,lowAbsolute:openMrsConcept.lowAbsolute,hiNormal:openMrsConcept.hiNormal,handler:openMrsConcept.handler,allowDecimal:openMrsConcept.allowDecimal,lowNormal:openMrsConcept.lowNormal,conceptClass:openMrsConcept.conceptClass?openMrsConcept.conceptClass.name:null,answers:openMrsConcept.answers,units:openMrsConcept.units,displayString:shortConceptName?shortConceptName.name:openMrsConcept.name.name,names:openMrsConcept.names}};var alreadyMappedConcept=function(concept){return!concept.name.name}},function(){var nameFor={Date:function(obs){return moment(obs.value).format("D-MMM-YYYY")},Datetime:function(obs){var date=Bahmni.Common.Util.DateUtil.parseDatetime(obs.value);return null!=date?Bahmni.Common.Util.DateUtil.formatDateWithTime(date):""},Boolean:function(obs){return obs.value===!0?"Yes":obs.value===!1?"No":obs.value},Coded:function(obs){return obs.value.shortName||obs.value.name||obs.value},Object:function(obs){return nameFor.Coded(obs)},MultiSelect:function(obs){return obs.getValues().join(", ")},Default:function(obs){return obs.value}};Bahmni.Common.Domain.ObservationValueMapper={getNameFor:nameFor,map:function(obs){var type=obs.concept&&obs.concept.dataType||obs.type;return type in nameFor||(type="object"==typeof obs.value&&"Object"||obs.isMultiSelect&&"MultiSelect"||"Default"),nameFor[type](obs)}}}(),Bahmni.DiagnosisMapper=function(diagnosisStatus){var self=this,mapDiagnosis=function(diagnosis){diagnosis.codedAnswer||(diagnosis.codedAnswer={name:void 0,uuid:void 0});var mappedDiagnosis=angular.extend(new Bahmni.Common.Domain.Diagnosis,diagnosis);return mappedDiagnosis.firstDiagnosis&&(mappedDiagnosis.firstDiagnosis=mapDiagnosis(mappedDiagnosis.firstDiagnosis)),mappedDiagnosis.latestDiagnosis&&(mappedDiagnosis.latestDiagnosis=mapDiagnosis(mappedDiagnosis.latestDiagnosis)),diagnosis.diagnosisStatusConcept&&Bahmni.Common.Constants.ruledOutdiagnosisStatus===diagnosis.diagnosisStatusConcept.name&&(mappedDiagnosis.diagnosisStatus=diagnosisStatus),mappedDiagnosis};self.mapDiagnosis=mapDiagnosis,self.mapDiagnoses=function(diagnoses){var mappedDiagnoses=[];return _.each(diagnoses,function(diagnosis){mappedDiagnoses.push(mapDiagnosis(diagnosis))}),mappedDiagnoses},self.mapPastDiagnosis=function(diagnoses,currentEncounterUuid){var pastDiagnosesResponse=[];return diagnoses.forEach(function(diagnosis){diagnosis.encounterUuid!==currentEncounterUuid&&(diagnosis.previousObs=diagnosis.existingObs,diagnosis.existingObs=null,diagnosis.inCurrentEncounter=void 0,pastDiagnosesResponse.push(diagnosis))}),pastDiagnosesResponse},self.mapSavedDiagnosesFromCurrentEncounter=function(diagnoses,currentEncounterUuid){var savedDiagnosesFromCurrentEncounter=[];return diagnoses.forEach(function(diagnosis){diagnosis.encounterUuid===currentEncounterUuid&&(diagnosis.inCurrentEncounter=!0,savedDiagnosesFromCurrentEncounter.push(diagnosis))}),savedDiagnosesFromCurrentEncounter}};var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.UIControls=Bahmni.Common.UIControls||{},Bahmni.Common.UIControls.ProgramManagement=Bahmni.Common.UIControls.ProgramManagement||{},angular.module("bahmni.common.uicontrols.programmanagment",[]),angular.module("bahmni.common.uicontrols.programmanagment").service("programHelper",["appService",function(appService){function shouldDisplayAllAttributes(programDisplayControlConfig){return programDisplayControlConfig&&void 0==programDisplayControlConfig.programAttributes||void 0==programDisplayControlConfig}var self=this,programConfiguration=appService.getAppDescriptor().getConfig("program")&&appService.getAppDescriptor().getConfig("program").value,isAttributeRequired=function(attribute){var attributeName=attribute.attributeType.display;return programConfiguration&&programConfiguration[attributeName]&&programConfiguration[attributeName].required};this.filterRetiredPrograms=function(programs){return _.filter(programs,function(program){return!program.retired})},this.filterRetiredWorkflowsAndStates=function(workflows){var allWorkflows=_.filter(workflows,function(workflow){return!workflow.retired});return _.forEach(allWorkflows,function(workflow){workflow.states=_.filter(workflow.states,function(state){return!state.retired})}),allWorkflows},this.filterRetiredOutcomes=function(outcomes){return _.filter(outcomes,function(outcome){return!outcome.retired})};var mapAttributes=function(attribute){attribute.name=attribute.attributeType.description?attribute.attributeType.description:attribute.name,attribute.value=attribute.value,attribute.required=isAttributeRequired(attribute)},mapPrograms=function(program){program.dateEnrolled=Bahmni.Common.Util.DateUtil.parseServerDateToDate(program.dateEnrolled),program.dateCompleted=Bahmni.Common.Util.DateUtil.parseServerDateToDate(program.dateCompleted),program.program.allWorkflows=self.filterRetiredWorkflowsAndStates(program.program.allWorkflows),_.forEach(program.attributes,function(attribute){mapAttributes(attribute)})};this.filterProgramAttributes=function(patientPrograms,programAttributeTypes){var programDisplayControlConfig=appService.getAppDescriptor().getConfigValue("programDisplayControl"),config=programDisplayControlConfig?programDisplayControlConfig.programAttributes:[],configAttrList=[];return configAttrList=shouldDisplayAllAttributes(programDisplayControlConfig)?programAttributeTypes:programAttributeTypes.filter(function(each){return config&&config.indexOf(each.name)!==-1}),_.isEmpty(configAttrList)?patientPrograms.map(function(patientProgram){return patientProgram.attributes=[],patientProgram}):(patientPrograms.forEach(function(program){var attrsToBeDisplayed=[];configAttrList.forEach(function(configAttr){var attr=_.find(program.attributes,function(progAttr){return progAttr.attributeType.display===configAttr.name});attr=attr?attr:{value:""},attr.attributeType=configAttr,attr.attributeType.display=configAttr.name,attrsToBeDisplayed.push(attr)}),program.attributes=attrsToBeDisplayed}),patientPrograms)},this.groupPrograms=function(patientPrograms){var activePrograms=[],endedPrograms=[],groupedPrograms={};if(patientPrograms){var filteredPrograms=this.filterRetiredPrograms(patientPrograms);_.forEach(filteredPrograms,function(program){mapPrograms(program),program.dateCompleted?endedPrograms.push(program):activePrograms.push(program)}),groupedPrograms.activePrograms=_.sortBy(activePrograms,function(program){return moment(program.dateEnrolled).toDate()}).reverse(),groupedPrograms.endedPrograms=_.sortBy(endedPrograms,function(program){return moment(program.dateCompleted).toDate()}).reverse()}return groupedPrograms}}]),Bahmni.Common.Domain.PatientProgramMapper=function(){this.map=function(patientProgram,programAttributeTypes,dateCompleted){var attributeFormatter=new Bahmni.Common.Domain.AttributeFormatter;return{dateEnrolled:moment(Bahmni.Common.Util.DateUtil.getDateWithoutTime(patientProgram.dateEnrolled)).format(Bahmni.Common.Constants.ServerDateTimeFormat),states:patientProgram.states,uuid:patientProgram.uuid,dateCompleted:dateCompleted?moment(dateCompleted).format(Bahmni.Common.Constants.ServerDateTimeFormat):null,outcome:patientProgram.outcomeData?patientProgram.outcomeData.uuid:null,attributes:attributeFormatter.getMrsAttributesForUpdate(patientProgram.patientProgramAttributes,programAttributeTypes,patientProgram.attributes),voided:!!patientProgram.voided,voidReason:patientProgram.voidReason}}};var Bahmni=Bahmni||{};Bahmni.ConceptSet=Bahmni.ConceptSet||{},Bahmni.ConceptSet.FormConditions=Bahmni.ConceptSet.FormConditions||{},angular.module("bahmni.common.conceptSet",["bahmni.common.uiHelper","ui.select2","pasvaz.bindonce","ngSanitize","ngTagsInput"]),
angular.module("bahmni.common.conceptSet").directive("buttonSelect",function(){return{restrict:"E",scope:{observation:"=",abnormalObs:"=?"},link:function(scope,element,attrs){attrs.dirtyCheckFlag&&(scope.hasDirtyFlag=!0)},controller:function($scope){$scope.isSet=function(answer){return $scope.observation.hasValueOf(answer)},$scope.select=function(answer){$scope.observation.toggleSelection(answer),$scope.$parent.observation&&"function"==typeof $scope.$parent.observation.onValueChanged&&$scope.$parent.observation.onValueChanged(),$scope.$parent.handleUpdate()},$scope.getAnswerDisplayName=function(answer){var shortName=answer.names?_.first(answer.names.filter(function(name){return"SHORT"===name.conceptNameType})):null;return shortName?shortName.name:answer.displayString}},templateUrl:"../common/concept-set/views/buttonSelect.html"}}),angular.module("bahmni.common.conceptSet").directive("stepper",function(){return{restrict:"E",require:"ngModel",replace:!0,scope:{ngModel:"=",obs:"=",ngClass:"=",focusMe:"="},template:'<div class="stepper clearfix"><button ng-click="decrement()" class="stepper__btn stepper__minus" ng-disabled="obs.disabled">-</button><input id="{{::obs.uniqueId}}" obs-constraints ng-model="ngModel" obs="::obs" ng-class="ngClass" focus-me="focusMe" type="text" class="stepper__field" ng-disabled="obs.disabled" /><button ng-click="increment()" class="stepper__btn stepper__plus"  ng-disabled="obs.disabled">+</button></div> ',link:function(scope,element,attrs,ngModelController){function updateModel(offset){var currValue=0;isNaN(ngModelController.$viewValue)?null!=scope.obs.concept.lowNormal&&(currValue=scope.obs.concept.lowNormal-offset):currValue=parseInt(ngModelController.$viewValue),ngModelController.$setViewValue(currValue+offset)}ngModelController.$render=function(){},ngModelController.$formatters.push(function(value){return parseInt(value,10)}),ngModelController.$parsers.push(function(value){return parseInt(value,10)}),scope.increment=function(){if(null!=scope.obs.concept.hiNormal){var currValue=isNaN(ngModelController.$viewValue)?0:ngModelController.$viewValue;currValue<scope.obs.concept.hiNormal&&updateModel(1)}else updateModel(1)},scope.decrement=function(){if(null!=scope.obs.concept.lowNormal){var currValue=isNaN(ngModelController.$viewValue)?0:ngModelController.$viewValue;currValue>scope.obs.concept.lowNormal&&updateModel(-1)}else updateModel(-1)}}}}),angular.module("bahmni.common.conceptSet").directive("conceptSet",["contextChangeHandler","appService","observationsService","messagingService","conceptSetService","conceptSetUiConfigService","spinner",function(contextChangeHandler,appService,observationsService,messagingService,conceptSetService,conceptSetUiConfigService,spinner){var controller=function($scope){var conceptSetName=$scope.conceptSetName,ObservationUtil=Bahmni.Common.Obs.ObservationUtil,conceptSetUIConfig=conceptSetUiConfigService.getConfig(),observationMapper=new Bahmni.ConceptSet.ObservationMapper,validationHandler=$scope.validationHandler()||contextChangeHandler,id="#"+$scope.sectionId;$scope.atLeastOneValueIsSet=$scope.atLeastOneValueIsSet||!1,$scope.conceptSetRequired=!1,$scope.showTitleValue=$scope.showTitle(),$scope.numberOfVisits=conceptSetUIConfig[conceptSetName]&&conceptSetUIConfig[conceptSetName].numberOfVisits?conceptSetUIConfig[conceptSetName].numberOfVisits:null,$scope.hideAbnormalButton=conceptSetUIConfig[conceptSetName]&&conceptSetUIConfig[conceptSetName].hideAbnormalButton;var focusFirstObs=function(){if($scope.conceptSetFocused&&$scope.rootObservation.groupMembers&&$scope.rootObservation.groupMembers.length>0){var firstObs=_.find($scope.rootObservation.groupMembers,function(obs){return obs.isFormElement&&obs.isFormElement()});firstObs&&(firstObs.isFocused=!0)}},updateObservationsOnRootScope=function(){if($scope.rootObservation){for(var i=0;i<$scope.observations.length;i++)if($scope.observations[i].concept.uuid===$scope.rootObservation.concept.uuid)return void($scope.observations[i]=$scope.rootObservation);$scope.observations.push($scope.rootObservation)}},getObservationsOfCurrentTemplate=function(){return _.filter($scope.observations,function(observation){return _.toLower(observation.conceptSetName)===_.toLower($scope.rootObservation.concept.name)})},getDefaults=function(){var conceptSetUI=appService.getAppDescriptor().getConfigValue("conceptSetUI");if(conceptSetUI&&conceptSetUI.defaults)return conceptSetUI.defaults||{}},getCodedAnswerWithDefaultAnswerString=function(defaults,groupMember){var defaultCodedAnswer,possibleAnswers=groupMember.possibleAnswers,defaultAnswer=defaults[groupMember.concept.name];return defaultAnswer instanceof Array?(defaultCodedAnswer=[],_.each(defaultAnswer,function(answer){defaultCodedAnswer.push(_.find(possibleAnswers,{displayString:answer}))})):defaultCodedAnswer=_.find(possibleAnswers,{displayString:defaultAnswer}),defaultCodedAnswer},setDefaultsForGroupMembers=function(groupMembers,defaults){defaults&&_.each(groupMembers,function(groupMember){var conceptFullName=groupMember.concept.name,present=_.includes(_.keys(defaults),conceptFullName);present&&void 0==groupMember.value&&("Coded"==groupMember.concept.dataType?setDefaultsForCodedObservations(groupMember,defaults):groupMember.value=defaults[conceptFullName]),groupMember.groupMembers&&groupMember.groupMembers.length>0&&(setDefaultsForGroupMembers(groupMember.groupMembers,defaults),groupMember instanceof Bahmni.ConceptSet.ObservationNode&&defaults[groupMember.label]&&groupMember.abnormalObs&&void 0==groupMember.abnormalObs.value&&groupMember.onValueChanged(groupMember.value))})},setDefaultsForCodedObservations=function(observation,defaults){var defaultCodedAnswer=getCodedAnswerWithDefaultAnswerString(defaults,observation);observation.isMultiSelect?observation.hasValue()||_.each(defaultCodedAnswer,function(answer){observation.selectAnswer(answer)}):defaultCodedAnswer instanceof Array||(observation.value=defaultCodedAnswer)},getFlattenedObsValues=function(flattenedObs){return _.reduce(flattenedObs,function(flattenedObsValues,obs){if(void 0==flattenedObsValues[obs.concept.name+"|"+obs.uniqueId])if(obs.isMultiSelect){var selectedObsConceptNames=[];_.each(obs.selectedObs,function(observation){observation.voided||selectedObsConceptNames.push(observation.value.name),observation.voided||selectedObsConceptNames.push(observation.value.name)}),flattenedObsValues[obs.concept.name+"|"+obs.uniqueId]=selectedObsConceptNames}else if(obs.conceptUIConfig.multiSelect){var alreadyProcessedMultiSelect=[];_.each(_.keys(flattenedObsValues),function(eachObsKey){eachObsKey.split("|")[0]==obs.concept.name&&alreadyProcessedMultiSelect.push(eachObsKey)}),alreadyProcessedMultiSelect.length<2&&(flattenedObsValues[obs.concept.name+"|"+obs.uniqueId]=flattenedObsValues[obs.concept.name+"|undefined"])}else obs.value instanceof Object?flattenedObsValues[obs.concept.name+"|"+obs.uniqueId]=obs.value.name instanceof Object?obs.value.name.name:obs.value.name:flattenedObsValues[obs.concept.name+"|"+obs.uniqueId]=obs.value;return flattenedObsValues},{})},clearFieldValuesOnDisabling=function(obs){if(obs.comment=void 0,obs.value||obs.isBoolean)obs.value=void 0;else if(obs.isMultiSelect)for(var key in obs.selectedObs)obs.selectedObs[key].voided||obs.toggleSelection(obs.selectedObs[key].value)},setObservationState=function(obsArray,disable,error,hide){_.isEmpty(obsArray)||_.each(obsArray,function(obs){obs.disabled=disable||hide,obs.error=error,obs.hide=hide,(hide||obs.disabled)&&clearFieldValuesOnDisabling(obs),obs.groupMembers&&_.each(obs.groupMembers,function(groupMember){groupMember&&setObservationState([groupMember],disable,error,hide)})})},processConditions=function(flattenedObs,fields,disable,error,hide){_.each(fields,function(field){var clonedObsInSameGroup,matchingObsArray=[];flattenedObs.forEach(function(obs){0!=clonedObsInSameGroup&&obs.concept.name==field?(matchingObsArray.push(obs),clonedObsInSameGroup=!0):clonedObsInSameGroup&&obs.concept.name!=field&&(clonedObsInSameGroup=!1)}),_.isEmpty(matchingObsArray)?messagingService.showMessage("error","No element found with name : "+field):setObservationState(matchingObsArray,disable,error,hide)})},runFormConditionForObs=function(enableCase,formName,formCondition,conceptName,flattenedObs){var conceptSetObsValues=getFlattenedObsValues(flattenedObs);_.each(_.keys(conceptSetObsValues),function(eachObsKey){if(eachObsKey.split("|")[0]==conceptName&&"undefined"!=eachObsKey.split("|")[1]){var valueMap=_.reduce(conceptSetObsValues,function(conceptSetValueMap,obsValue,conceptName){return conceptSetValueMap[conceptName.split("|")[0]]=obsValue,conceptSetValueMap},{}),conditions=formCondition(formName,valueMap,$scope.patient);_.isUndefined(conditions)||(conditions.error&&!_.isEmpty(conditions.error)?(messagingService.showMessage("error",conditions.error),processConditions(flattenedObs,[conceptName],!1,!0,!1)):enableCase&&processConditions(flattenedObs,[conceptName],!1,!1,!1),processConditions(flattenedObs,conditions.disable,!0),processConditions(flattenedObs,conditions.enable,!1),processConditions(flattenedObs,conditions.show,!1,void 0,!1),processConditions(flattenedObs,conditions.hide,!1,void 0,!0),_.each(conditions.enable,function(subConditionConceptName){var conditionFn=Bahmni.ConceptSet.FormConditions.rules&&Bahmni.ConceptSet.FormConditions.rules[subConditionConceptName];null!=conditionFn&&runFormConditionForObs(!0,formName,conditionFn,subConditionConceptName,flattenedObs)}),_.each(conditions.disable,function(subConditionConceptName){var conditionFn=Bahmni.ConceptSet.FormConditions.rules&&Bahmni.ConceptSet.FormConditions.rules[subConditionConceptName];null!=conditionFn&&_.each(flattenedObs,function(obs){obs.concept.name==subConditionConceptName&&runFormConditionForObs(!1,formName,conditionFn,subConditionConceptName,flattenedObs)})}),_.each(conditions.show,function(subConditionConceptName){var conditionFn=Bahmni.ConceptSet.FormConditions.rules&&Bahmni.ConceptSet.FormConditions.rules[subConditionConceptName];conditionFn&&runFormConditionForObs(!0,formName,conditionFn,subConditionConceptName,flattenedObs)}),_.each(conditions.hide,function(subConditionConceptName){var conditionFn=Bahmni.ConceptSet.FormConditions.rules&&Bahmni.ConceptSet.FormConditions.rules[subConditionConceptName];conditionFn&&_.each(flattenedObs,function(obs){obs.concept.name==subConditionConceptName&&runFormConditionForObs(!1,formName,conditionFn,subConditionConceptName,flattenedObs)})}))}})},updateFormConditions=function(observationsOfCurrentTemplate,rootObservation){Bahmni.ConceptSet.FormConditions.rules&&runFormConditionForAllObsRecursively(rootObservation.concept.name,rootObservation)},runFormConditionForAllObsRecursively=function(formName,rootObservation){_.each(rootObservation.groupMembers,function(observation){var conditionFn=Bahmni.ConceptSet.FormConditions.rules&&Bahmni.ConceptSet.FormConditions.rules[observation.concept.name];if(null!=conditionFn){var flattenedObs=ObservationUtil.flattenObsToArray([rootObservation]);runFormConditionForObs(!1,formName,conditionFn,observation.concept.name,flattenedObs)}observation.groupMembers&&observation.groupMembers.length>0&&runFormConditionForAllObsRecursively(formName,observation)})},addDummyImage=function(){_.each($scope.rootObservation.groupMembers,function(observation){addDummyImageObservationForSavedObs(observation,$scope.rootObservation)})},addDummyImageObservationForSavedObs=function(observation,rootObservation){if(_.each(observation.groupMembers,function(childObservation){addDummyImageObservationForSavedObs(childObservation,observation)}),"image"===observation.getControlType()&&observation.value&&rootObservation.groupMembers.indexOf(observation)===rootObservation.groupMembers.length-1)return void rootObservation.groupMembers.push(observation.cloneNew())},init=function(){return conceptSetService.getConcept({name:conceptSetName,v:"bahmni"}).then(function(response){if($scope.conceptSet=response.data.results[0],$scope.rootObservation=$scope.conceptSet?observationMapper.map($scope.observations,$scope.conceptSet,conceptSetUIConfig):null,$scope.rootObservation){$scope.rootObservation.conceptSetName=$scope.conceptSetName,focusFirstObs(),updateObservationsOnRootScope();var groupMembers=getObservationsOfCurrentTemplate()[0].groupMembers,defaults=getDefaults();addDummyImage(),setDefaultsForGroupMembers(groupMembers,defaults);var observationsOfCurrentTemplate=getObservationsOfCurrentTemplate();updateFormConditions(observationsOfCurrentTemplate,$scope.rootObservation)}else $scope.showEmptyConceptSetMessage=!0})["catch"](function(error){messagingService.showMessage("error",error.message)})};spinner.forPromise(init(),id);var validateObservationTree=function(){if("undefined"==typeof $scope.rootObservation||null===$scope.rootObservation)return{allow:!0,errorMessage:null};$scope.atLeastOneValueIsSet=$scope.rootObservation&&$scope.rootObservation.atLeastOneValueSet(),$scope.conceptSetRequired=!$scope.required||$scope.required;var nodes=$scope.rootObservation&&findInvalidNodes($scope.rootObservation.groupMembers,$scope.rootObservation);return{allow:!nodes.status,errorMessage:nodes.message}},findInvalidNodes=function(members,parentNode){var errorMessage=null,status=members.some(function(childNode){if(childNode.voided)return!1;var groupMembers=childNode.groupMembers||[];for(var index in groupMembers){var information=groupMembers[index].groupMembers&&groupMembers[index].groupMembers.length?findInvalidNodes(groupMembers[index].groupMembers,groupMembers[index]):validateChildNode(groupMembers[index],childNode);if(information.status)return errorMessage=information.message,!0}return information=validateChildNode(childNode,parentNode),information.status?(errorMessage=information.message,!0):!childNode.isValid($scope.atLeastOneValueIsSet,$scope.conceptSetRequired)});return{message:errorMessage,status:status}},validateChildNode=function(childNode,parentNode){var errorMessage;if(childNode.possibleAnswers&&!childNode.possibleAnswers.length){if("function"==typeof childNode.isValueInAbsoluteRange&&!childNode.isValueInAbsoluteRange())return errorMessage="The value you entered (red field) is outside the range of allowable values for that record. Please check the value.",{message:errorMessage,status:!0};if(childNode.isNumeric()){if(!childNode.isValidNumeric())return errorMessage="Please enter Integer value, decimal value is not allowed",{message:errorMessage,status:!0};if(parentNode){if(!childNode.isValidNumericValue()||!parentNode.isValidNumericValue())return errorMessage="Please enter Numeric values",{message:errorMessage,status:!0}}else if(!childNode.isValidNumericValue())return errorMessage="Please enter Numeric values",{message:errorMessage,status:!0}}}return{status:!1}};validationHandler.add(validateObservationTree);var cleanUpListenerShowPrevious=$scope.$on("event:showPrevious"+conceptSetName,function(){return spinner.forPromise(observationsService.fetch($scope.patient.uuid,$scope.conceptSetName,null,$scope.numberOfVisits,null,!0),id).then(function(response){var recentObservations=ObservationUtil.flattenObsToArray(response.data),conceptSetObservation=$scope.observations.filter(function(observation){return observation.conceptSetName===$scope.conceptSetName});ObservationUtil.flattenObsToArray(conceptSetObservation).forEach(function(obs){var correspondingRecentObs=_.filter(recentObservations,function(recentObs){return obs.concept.uuid===recentObs.concept.uuid});null!=correspondingRecentObs&&correspondingRecentObs.length>0&&(correspondingRecentObs.sort(function(obs1,obs2){return new Date(obs2.encounterDateTime)-new Date(obs1.encounterDateTime)}),obs.previous=correspondingRecentObs.map(function(previousObs){return{value:Bahmni.Common.Domain.ObservationValueMapper.map(previousObs),date:previousObs.observationDateTime}}))})})}),deregisterAddMore=$scope.$root.$on("event:addMore",function(event,observation){updateFormConditions([observation],observation)}),deregisterObservationUpdated=$scope.$root.$on("event:observationUpdated-"+conceptSetName,function(event,conceptName,rootObservation){var formName=rootObservation.concept.name,formCondition=Bahmni.ConceptSet.FormConditions.rules&&Bahmni.ConceptSet.FormConditions.rules[conceptName];if(formCondition){var flattenedObs=ObservationUtil.flattenObsToArray([rootObservation]);runFormConditionForObs(!0,formName,formCondition,conceptName,flattenedObs)}});$scope.$on("$destroy",function(){deregisterObservationUpdated(),deregisterAddMore(),cleanUpListenerShowPrevious()})};return{restrict:"E",scope:{conceptSetName:"=",observations:"=?",required:"=?",showTitle:"&",validationHandler:"&",patient:"=",conceptSetFocused:"=?",collapseInnerSections:"=?",atLeastOneValueIsSet:"=?",sectionId:"="},templateUrl:"../common/concept-set/views/conceptSet.html",controller:controller}}]),angular.module("bahmni.common.conceptSet").directive("concept",["RecursionHelper","spinner","$filter","messagingService","appService",function(RecursionHelper,spinner,$filter,messagingService,appService){var link=function(scope){scope.displayNepaliDates=appService.getAppDescriptor().getConfigValue("displayNepaliDates"),scope.enableNepaliCalendar=appService.getAppDescriptor().getConfigValue("enableNepaliCalendar");var hideAbnormalbuttonConfig=scope.observation&&scope.observation.conceptUIConfig&&scope.observation.conceptUIConfig.hideAbnormalButton;scope.now=moment().format("YYYY-MM-DD hh:mm:ss"),scope.showTitle=void 0===scope.showTitle||scope.showTitle,scope.hideAbnormalButton=void 0==hideAbnormalbuttonConfig?scope.hideAbnormalButton:hideAbnormalbuttonConfig,scope.cloneNew=function(observation,parentObservation){observation.showAddMoreButton=function(){return!1};var newObs=observation.cloneNew();newObs.scrollToElement=!0;var index=parentObservation.groupMembers.indexOf(observation);parentObservation.groupMembers.splice(index+1,0,newObs),messagingService.showMessage("info","A new "+observation.label+" section has been added"),scope.$root.$broadcast("event:addMore",newObs)},scope.removeClonedObs=function(observation,parentObservation){observation.voided=!0;var lastObservationByLabel=_.findLast(parentObservation.groupMembers,function(groupMember){return groupMember.label===observation.label&&!groupMember.voided});lastObservationByLabel.showAddMoreButton=function(){return!0},observation.hidden=!0},scope.isClone=function(observation,parentObservation){if(parentObservation&&parentObservation.groupMembers){var index=parentObservation.groupMembers.indexOf(observation);return index>0&&parentObservation.groupMembers[index].label==parentObservation.groupMembers[index-1].label}return!1},scope.isRemoveValid=function(observation){return"image"!=observation.getControlType()||!observation.value},scope.getStringValue=function(observations){return observations.map(function(observation){return observation.value+" ("+$filter("bahmniDate")(observation.date)+")"}).join(", ")},scope.toggleSection=function(){scope.collapse=!scope.collapse},scope.isCollapsibleSet=function(){return 1==scope.showTitle},scope.hasPDFAsValue=function(){return scope.observation.value&&scope.observation.value.indexOf(".pdf")>0},scope.$watch("collapseInnerSections",function(){scope.collapse=scope.collapseInnerSections&&scope.collapseInnerSections.value}),scope.handleUpdate=function(){scope.$root.$broadcast("event:observationUpdated-"+scope.conceptSetName,scope.observation.concept.name,scope.rootObservation)},scope.update=function(value){scope.getBooleanResult(scope.observation.isObservationNode)?scope.observation.primaryObs.value=value:scope.getBooleanResult(scope.observation.isFormElement())&&(scope.observation.value=value),scope.handleUpdate()},scope.getBooleanResult=function(value){return!!value}},compile=function(element){return RecursionHelper.compile(element,link)};return{restrict:"E",compile:compile,scope:{conceptSetName:"=",observation:"=",atLeastOneValueIsSet:"=",showTitle:"=",conceptSetRequired:"=",rootObservation:"=",patient:"=",collapseInnerSections:"=",rootConcept:"&",hideAbnormalButton:"="},templateUrl:"../common/concept-set/views/observation.html"}}]),angular.module("bahmni.common.conceptSet").directive("obsConstraints",function(){var attributesMap={Numeric:"number",Date:"date",Datetime:"datetime"},link=function($scope,element){var attributes={},obsConcept=$scope.obs.concept;obsConcept.conceptClass==Bahmni.Common.Constants.conceptDetailsClassName&&(obsConcept=$scope.obs.primaryObs.concept),attributes.type=attributesMap[obsConcept.dataType]||"text","number"===attributes.type&&(attributes.step="any"),obsConcept.hiNormal&&(attributes.max=obsConcept.hiNormal),obsConcept.lowNormal&&(attributes.min=obsConcept.lowNormal),"date"==attributes.type&&(null!=$scope.obs.conceptUIConfig&&$scope.obs.conceptUIConfig.allowFutureDates||(attributes.max=Bahmni.Common.Util.DateTimeFormatter.getDateWithoutTime())),element.attr(attributes)};return{link:link,scope:{obs:"="},require:"ngModel"}}),angular.module("bahmni.common.conceptSet").factory("conceptSetService",["$http","$q","$bahmniTranslate",function($http,$q,$bahmniTranslate){var getConcept=function(params,cache){return params.locale=params.locale||$bahmniTranslate.use(),$http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{params:params,cache:cache})},getComputedValue=function(encounterData){var url=Bahmni.Common.Constants.encounterModifierUrl;return $http.post(url,encounterData,{withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}})},getObsTemplatesForProgram=function(programUuid){var url=Bahmni.Common.Constants.entityMappingUrl;return $http.get(url,{params:{entityUuid:programUuid,mappingType:"program_obstemplate",s:"byEntityAndMappingType"}})};return{getConcept:getConcept,getComputedValue:getComputedValue,getObsTemplatesForProgram:getObsTemplatesForProgram}}]),angular.module("bahmni.common.conceptSet").factory("conceptSetUiConfigService",["$http","$q","appService",function($http,$q,appService){var setConceptUuidInsteadOfName=function(config,conceptNameField,uuidField){var conceptName=config[conceptNameField];if(null!=conceptName)return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{params:{name:conceptName,v:"custom:(uuid,name)"}}).then(function(response){var concept=response.data.results.filter(function(c){return c.name.name===conceptName});concept.length>0&&(config[uuidField]=concept[0].uuid)})},setExtraData=function(config){Object.getOwnPropertyNames(config).forEach(function(conceptConfigKey){var conceptConfig=config[conceptConfigKey];conceptConfig.freeTextAutocomplete instanceof Object&&(setConceptUuidInsteadOfName(conceptConfig.freeTextAutocomplete,"codedConceptName","codedConceptUuid"),setConceptUuidInsteadOfName(conceptConfig.freeTextAutocomplete,"conceptSetName","conceptSetUuid"))})},getConfig=function(){var config=appService.getAppDescriptor().getConfigValue("conceptSetUI")||{};return setExtraData(config),config};return{getConfig:getConfig}}]),Bahmni.ConceptSet.ObservationMapper=function(){function mapTabularObs(mappedGroupMembers,concept,obs,conceptSetConfig){var tabularObsGroups=_.filter(mappedGroupMembers,function(member){return conceptSetConfig[member.concept.name]&&conceptSetConfig[member.concept.name].isTabular});if(tabularObsGroups.length>0){var array=_.map(concept.setMembers,function(member){return member.name.name});tabularObsGroups.forEach(function(group){group.hidden=!0});var groupedObsGroups=_.groupBy(tabularObsGroups,function(group){return group.concept.name});_.values(groupedObsGroups).forEach(function(groups){var tabularObservations=new Bahmni.ConceptSet.TabularObservations(groups,obs,conceptSetConfig);obs.groupMembers.push(tabularObservations)});var sortedGroupMembers=_.sortBy(obs.groupMembers,function(observation){return array.indexOf(observation.concept.name)});obs.groupMembers.length=0,obs.groupMembers.push.apply(obs.groupMembers,sortedGroupMembers)}}function buildObservation(concept,savedObs,mappedGroupMembers){var comment=savedObs?savedObs.comment:null;return{concept:conceptMapper.map(concept),units:concept.units,label:getLabel(concept),possibleAnswers:concept.answers,groupMembers:mappedGroupMembers,comment:comment,showAddMoreButton:showAddMoreButton}}var conceptMapper=new Bahmni.Common.Domain.ConceptMapper,self=this;this.getObservationsForView=function(observations,conceptSetConfig){return internalMapForDisplay(observations,conceptSetConfig)};var internalMapForDisplay=function(observations,conceptSetConfig){var observationsForDisplay=[];return _.forEach(observations,function(savedObs){if(!savedObs.concept.conceptClass||savedObs.concept.conceptClass!==Bahmni.Common.Constants.conceptDetailsClassName&&savedObs.concept.conceptClass.name!==Bahmni.Common.Constants.conceptDetailsClassName)if(savedObs.concept.set)if(conceptSetConfig[savedObs.concept.name]&&conceptSetConfig[savedObs.concept.name].grid)savedObs.value=self.getGridObservationDisplayValue(savedObs),observationsForDisplay=observationsForDisplay.concat(createObservationForDisplay(savedObs,savedObs.concept));else{var groupMemberObservationsForDisplay=internalMapForDisplay(savedObs.groupMembers,conceptSetConfig);observationsForDisplay=observationsForDisplay.concat(groupMemberObservationsForDisplay)}else{var obsToDisplay=null;if(savedObs.isMultiSelect)obsToDisplay=savedObs;else if(!savedObs.hidden){var observation=newObservation(savedObs.concept,savedObs,[]);obsToDisplay=createObservationForDisplay(observation,observation.concept)}obsToDisplay&&observationsForDisplay.push(obsToDisplay)}else{var observationNode=new Bahmni.ConceptSet.ObservationNode(savedObs,savedObs,[],savedObs.concept),obsToDisplay=createObservationForDisplay(observationNode,observationNode.primaryObs.concept);obsToDisplay&&observationsForDisplay.push(obsToDisplay)}}),observationsForDisplay};this.map=function(observations,rootConcept,conceptSetConfig){var savedObs=findInSavedObservation(rootConcept,observations)[0];return mapObservation(rootConcept,savedObs,conceptSetConfig||{})};var findInSavedObservation=function(concept,observations){return _.filter(observations,function(obs){return obs&&obs.concept&&concept.uuid===obs.concept.uuid})},mapObservation=function(concept,savedObs,conceptSetConfig){var obs=null;if(savedObs&&(savedObs.isObservation||savedObs.isObservationNode))return savedObs;var mappedGroupMembers=concept&&concept.set?mapObservationGroupMembers(savedObs?savedObs.groupMembers:[],concept,conceptSetConfig):[];return concept.conceptClass.name===Bahmni.Common.Constants.conceptDetailsClassName?obs=newObservationNode(concept,savedObs,conceptSetConfig,mappedGroupMembers):(obs=newObservation(concept,savedObs,conceptSetConfig,mappedGroupMembers),new Bahmni.ConceptSet.MultiSelectObservations(conceptSetConfig).map(mappedGroupMembers)),mapTabularObs(mappedGroupMembers,concept,obs,conceptSetConfig),obs},mapObservationGroupMembers=function(observations,parentConcept,conceptSetConfig){var observationGroupMembers=[],conceptSetMembers=parentConcept.setMembers;return conceptSetMembers.forEach(function(memberConcept){for(var savedObservations=findInSavedObservation(memberConcept,observations),configForConcept=conceptSetConfig[memberConcept.name.name]||{},numberOfNodes=configForConcept.multiple||1,i=savedObservations.length-1;i>=0;i--)observationGroupMembers.push(mapObservation(memberConcept,savedObservations[i],conceptSetConfig));for(var i=0;i<numberOfNodes-savedObservations.length;i++)observationGroupMembers.push(mapObservation(memberConcept,null,conceptSetConfig))}),observationGroupMembers},getDatatype=function(concept){return concept.dataType?concept.dataType:concept.datatype&&concept.datatype.name},newObservation=function(concept,savedObs,conceptSetConfig,mappedGroupMembers){var observation=buildObservation(concept,savedObs,mappedGroupMembers),obs=new Bahmni.ConceptSet.Observation(observation,savedObs,conceptSetConfig,mappedGroupMembers);return"Boolean"==getDatatype(concept)&&(obs=new Bahmni.ConceptSet.BooleanObservation(obs,conceptSetConfig)),obs},newObservationNode=function(concept,savedObsNode,conceptSetConfig,mappedGroupMembers){var observation=buildObservation(concept,savedObsNode,mappedGroupMembers);return new Bahmni.ConceptSet.ObservationNode(observation,savedObsNode,conceptSetConfig,concept)},showAddMoreButton=function(rootObservation){var observation=this,lastObservationByLabel=_.findLast(rootObservation.groupMembers,{label:observation.label});return lastObservationByLabel.uuid===observation.uuid},createObservationForDisplay=function(observation,concept){if(null!=observation.value){var observationValue=getObservationDisplayValue(observation);return observationValue=observation.durationObs?observationValue+" "+getDurationDisplayValue(observation.durationObs):observationValue,{value:observationValue,abnormalObs:observation.abnormalObs,duration:observation.durationObs,provider:observation.provider,label:getLabel(observation.concept),observationDateTime:observation.observationDateTime,concept:concept,comment:observation.comment,uuid:observation.uuid}}},getObservationDisplayValue=function(observation){if(observation.isBoolean||"Boolean"===observation.type)return observation.value===!0?"Yes":"No";if(!observation.value)return"";if("object"==typeof observation.value.name){var valueConcept=conceptMapper.map(observation.value);return valueConcept.shortName||valueConcept.name}return observation.value.shortName||observation.value.name||observation.value},getDurationDisplayValue=function(duration){var durationForDisplay=Bahmni.Common.Util.DateUtil.convertToUnits(duration.value);return durationForDisplay.value&&durationForDisplay.unitName?"since "+durationForDisplay.value+" "+durationForDisplay.unitName:""};this.getGridObservationDisplayValue=function(observation){var memberValues=_.compact(_.map(observation.groupMembers,function(member){return getObservationDisplayValue(member)}));return memberValues.join(", ")};var getLabel=function(concept){var mappedConcept=conceptMapper.map(concept);return mappedConcept.shortName||mappedConcept.name}},Bahmni.ConceptSet.Observation=function(observation,savedObs,conceptUIConfig){var self=this;angular.extend(this,observation),this.isObservation=!0,this.conceptUIConfig=conceptUIConfig[this.concept.name]||[],this.uniqueId=_.uniqueId("observation_"),this.erroneousValue=null,savedObs?(this.uuid=savedObs.uuid,this.value=savedObs.value,this.observationDateTime=savedObs.observationDateTime,this.provider=savedObs.provider):this.value=this.conceptUIConfig.defaultValue,Object.defineProperty(this,"autocompleteValue",{enumerable:!0,get:function(){return null!=this.value&&"object"==typeof this.value?this.value.name:this.value},set:function(newValue){this.__prevValue=this.value,this.value=newValue}}),Object.defineProperty(this,"value",{enumerable:!0,get:function(){return null!=self._value?self._value:(savedObs&&"object"==typeof savedObs.value&&savedObs.value&&(savedObs.value.displayString=savedObs.value.shortName?savedObs.value.shortName:savedObs.value.name),savedObs?savedObs.value:void 0)},set:function(newValue){self.__prevValue=this.value,self._value=newValue,newValue||(savedObs=null),self.onValueChanged()}});var cloneNonTabularObs=function(oldObs){var newGroupMembers=[];return oldObs.groupMembers.forEach(function(member){if(void 0===member.isTabularObs){var clone=member.cloneNew();clone.hidden=member.hidden,newGroupMembers.push(clone)}}),newGroupMembers},getTabularObs=function(oldObs){var tabularObsList=[];return oldObs.groupMembers.forEach(function(member){void 0!==member.isTabularObs&&tabularObsList.push(member)}),tabularObsList},cloneTabularObs=function(oldObs,tabularObsList){return tabularObsList=_.map(tabularObsList,function(tabularObs){var matchingObsList=_.filter(oldObs.groupMembers,function(member){return member.concept.name==tabularObs.concept.name});return new Bahmni.ConceptSet.TabularObservations(matchingObsList,oldObs,conceptUIConfig)}),tabularObsList.forEach(function(tabularObs){oldObs.groupMembers.push(tabularObs)}),oldObs};this.cloneNew=function(){
var oldObs=angular.copy(observation);if(oldObs.groupMembers&&oldObs.groupMembers.length>0){oldObs.groupMembers=_.filter(oldObs.groupMembers,function(member){return!member.isMultiSelect});var newGroupMembers=cloneNonTabularObs(oldObs),tabularObsList=getTabularObs(oldObs);oldObs.groupMembers=newGroupMembers,_.isEmpty(tabularObsList)||(oldObs=cloneTabularObs(oldObs,tabularObsList))}new Bahmni.ConceptSet.MultiSelectObservations(conceptUIConfig).map(oldObs.groupMembers);var clone=new Bahmni.ConceptSet.Observation(oldObs,null,conceptUIConfig);return clone.comment=void 0,clone.disabled=this.disabled,clone}},Bahmni.ConceptSet.Observation.prototype={displayValue:function(){if(!(this.possibleAnswers.length>0))return this.value;for(var i=0;i<this.possibleAnswers.length;i++)if(this.possibleAnswers[i].uuid===this.value)return this.possibleAnswers[i].display},isGroup:function(){return!!this.groupMembers&&this.groupMembers.length>0},isComputed:function(){return"Computed"===this.concept.conceptClass},isComputedAndEditable:function(){return"Computed/Editable"===this.concept.conceptClass},isNumeric:function(){return"Numeric"===this.getDataTypeName()},isValidNumeric:function(){return!(!this.isDecimalAllowed()&&this.value&&this.value.toString().indexOf(".")>=0)},isValidNumericValue:function(){var element=document.getElementById(this.uniqueId);return""!==this.value||!element||element.checkValidity()},isText:function(){return"Text"===this.getDataTypeName()},isCoded:function(){return"Coded"===this.getDataTypeName()},isDatetime:function(){return"Datetime"===this.getDataTypeName()},isImage:function(){return this.concept.conceptClass==Bahmni.Common.Constants.imageClassName},isVideo:function(){return this.concept.conceptClass==Bahmni.Common.Constants.videoClassName},getDataTypeName:function(){return this.concept.dataType},isDecimalAllowed:function(){return this.concept.allowDecimal},isDateDataType:function(){return"Date".indexOf(this.getDataTypeName())!=-1},isVoided:function(){return void 0!==this.voided&&this.voided},getPossibleAnswers:function(){return this.possibleAnswers},getHighAbsolute:function(){return this.concept.hiAbsolute},getLowAbsolute:function(){return this.concept.lowAbsolute},isHtml5InputDataType:function(){return["Date","Numeric"].indexOf(this.getDataTypeName())!==-1},isGrid:function(){return this.conceptUIConfig.grid},isButtonRadio:function(){return this.conceptUIConfig.buttonRadio},isComplex:function(){return"Complex"===this.concept.dataType},isLocationRef:function(){return this.isComplex()&&"LocationObsHandler"===this.concept.handler},isProviderRef:function(){return this.isComplex()&&"ProviderObsHandler"===this.concept.handler},getControlType:function(){return this.hidden?"hidden":this.conceptUIConfig.freeTextAutocomplete?"freeTextAutocomplete":this.isHtml5InputDataType()?"html5InputDataType":this.isImage()?"image":this.isVideo()?"video":this.isText()?"text":this.isCoded()?this._getCodedControlType():this.isGrid()?"grid":this.isDatetime()?"datetime":this.isLocationRef()?"text":this.isProviderRef()?"text":"unknown"},canHaveComment:function(){return this.conceptUIConfig.disableAddNotes?!this.conceptUIConfig.disableAddNotes:!this.isText()&&!this.isImage()&&!this.isVideo()},canAddMore:function(){return 1==this.conceptUIConfig.allowAddMore},isStepperControl:function(){if(this.isNumeric())return 1==this.conceptUIConfig.stepper},isConciseText:function(){return 1==this.conceptUIConfig.conciseText},_getCodedControlType:function(){var conceptUIConfig=this.conceptUIConfig;return conceptUIConfig.autocomplete?"autocomplete":conceptUIConfig.dropdown?"dropdown":"buttonselect"},onValueChanged:function(){this.isNumeric()&&this.setErroneousValue()},setErroneousValue:function(){if(this.hasValue()){var erroneousValue=this.value>(this.concept.hiAbsolute||1/0)||this.value<(this.concept.lowAbsolute||0);this.erroneousValue=erroneousValue}else this.erroneousValue=void 0},getInputType:function(){return this.getDataTypeName()},atLeastOneValueSet:function(){return this.isGroup()?this.groupMembers.some(function(childNode){return childNode.atLeastOneValueSet()}):this.hasValue()&&!this.isVoided()},hasValue:function(){var value=this.value;return value===!1||(0===value||!(""===value||!value)&&(!(value instanceof Array)||value.length>0))},hasValueOf:function(value){return!(!this.value||!value)&&(this.value==value||this.value.uuid==value.uuid)},toggleSelection:function(answer){this.value&&this.value.uuid===answer.uuid?this.value=null:this.value=answer},isValidDate:function(){if(this.isComputed())return!0;if(!this.hasValue())return!0;var date=Bahmni.Common.Util.DateUtil.parse(this.value);if(!this.conceptUIConfig.allowFutureDates){var today=Bahmni.Common.Util.DateUtil.parse(moment().format("YYYY-MM-DD"));if(today<date)return!1}return date.getUTCFullYear()&&date.getUTCFullYear().toString().length<=4},hasInvalidDateTime:function(){if(this.isComputed())return!1;var date=Bahmni.Common.Util.DateUtil.parse(this.value);return!this.conceptUIConfig.allowFutureDates&&moment()<date||"Invalid Datetime"===this.value},isValid:function(checkRequiredFields,conceptSetRequired){if(this.isNumeric()&&!this.isValidNumeric())return!1;if(this.error)return!1;if(this.hidden)return!0;if(checkRequiredFields){if(this.isGroup())return this._hasValidChildren(checkRequiredFields,conceptSetRequired);if(conceptSetRequired&&this.isRequired()&&!this.hasValue())return!1;if(this.isRequired()&&!this.hasValue())return!1}return this._isDateDataType()?this.isValidDate():this._isDateTimeDataType()?!this.hasInvalidDateTime():!this.erroneousValue&&("autocomplete"!==this.getControlType()||(_.isEmpty(this.value)||_.isObject(this.value)))},isValueInAbsoluteRange:function(){return!this.erroneousValue&&(!this.isGroup()||this._areChildNodesInAbsoluteRange())},_isDateDataType:function(){return"Date"===this.getDataTypeName()},_isDateTimeDataType:function(){return"Datetime"===this.getDataTypeName()},isRequired:function(){return this.disabled=!!this.disabled&&this.disabled,this.conceptUIConfig.required===!0&&this.disabled===!1},isFormElement:function(){return(!this.concept.set||this.isGrid())&&!this.isComputed()},_hasValidChildren:function(checkRequiredFields,conceptSetRequired){return this.groupMembers.every(function(member){return member.isValid(checkRequiredFields,conceptSetRequired)})},_areChildNodesInAbsoluteRange:function(){return this.groupMembers.every(function(member){return"function"!=typeof member.isValueInAbsoluteRange||member.isValueInAbsoluteRange()})},markAsNonCoded:function(){this.markedAsNonCoded=!this.markedAsNonCoded},toggleVoidingOfImage:function(){this.voided=!this.voided},assignAddMoreButtonID:function(){return this.concept.name.split(" ").join("_").toLowerCase()+"_addmore_"+this.uniqueId}},Bahmni.ConceptSet.BooleanObservation=function(observation,conceptUIConfig){angular.extend(this,observation),this.isBoolean=!0,this.conceptUIConfig=conceptUIConfig[this.concept.name]||{},this.cloneNew=function(){var clone=new Bahmni.ConceptSet.BooleanObservation(angular.copy(observation),conceptUIConfig);return clone.value=void 0,clone.comment=void 0,clone.uuid=null,clone.disabled=this.disabled,clone};var possibleAnswers=[{displayString:"OBS_BOOLEAN_YES_KEY",value:!0},{displayString:"OBS_BOOLEAN_NO_KEY",value:!1}];this.getPossibleAnswers=function(){return possibleAnswers},this.hasValueOf=function(answer){return this.value===answer.value},this.toggleSelection=function(answer){this.value===answer.value?this.value=null:this.value=answer.value},this.isFormElement=function(){return!0},this.getControlType=function(){return"buttonselect"},this.isRequired=function(){return this.disabled=!!this.disabled&&this.disabled,this.getConceptUIConfig().required===!0&&this.disabled===!1},this.isComputedAndEditable=function(){return"Computed/Editable"===this.concept.conceptClass},this.atLeastOneValueSet=function(){return void 0!=this.value},this.isValid=function(checkRequiredFields,conceptSetRequired){if(this.error)return!1;var notYetSet=function(value){return"undefined"==typeof value||null==value};if(checkRequiredFields){if(conceptSetRequired&&this.isRequired()&&notYetSet(this.value))return!1;if(this.isRequired()&&notYetSet(this.value))return!1}return!0},this.canHaveComment=function(){return!this.getConceptUIConfig().disableAddNotes||!this.getConceptUIConfig().disableAddNotes},this.getConceptUIConfig=function(){return this.conceptUIConfig},this.canAddMore=function(){return 1==this.getConceptUIConfig().allowAddMore},this.isComputed=function(){return"Computed"===this.concept.conceptClass},this.getDataTypeName=function(){return this.concept.dataType},this.hasValue=function(){var value=this.value;return value===!1||(0===value||!(""===value||!value)&&(!(value instanceof Array)||value.length>0))},this.isNumeric=function(){return"Numeric"===this.getDataTypeName()},this.isText=function(){return"Text"===this.getDataTypeName()},this.isCoded=function(){return"Coded"===this.getDataTypeName()},this._isDateTimeDataType=function(){return"Datetime"===this.getDataTypeName()}},function(){var findObservationByClassName=function(groupMembers,conceptClassName){return _.find(groupMembers,function(member){return member.concept.conceptClass.name===conceptClassName||member.concept.conceptClass===conceptClassName})},findObservationByConceptName=function(groupMembers,conceptName){return _.find(groupMembers,{concept:{name:conceptName}})},setNewObservation=function(observation,newValue){observation&&(observation.__prevValue=observation.value,observation.value=newValue,observation.voided=!1)},voidObservation=function(observation){observation&&(observation.uuid?observation.voided=!0:observation.value=void 0)},isFreeTextAutocompleteType=function(conceptUIConfig){return conceptUIConfig.autocomplete&&conceptUIConfig.nonCodedConceptName&&conceptUIConfig.codedConceptName};Bahmni.ConceptSet.ObservationNode=function(observation,savedObs,conceptUIConfig,concept){angular.extend(this,observation),this.conceptUIConfig=conceptUIConfig[concept.name.name]||!_.isEmpty(concept.setMembers)&&conceptUIConfig[concept.setMembers[0].name.name]||{},this.cloneNew=function(){var oldObs=angular.copy(observation);oldObs.groupMembers=_.map(oldObs.groupMembers,function(member){return member.cloneNew()});var clone=new Bahmni.ConceptSet.ObservationNode(oldObs,null,conceptUIConfig,concept);return clone.comment=void 0,clone};var getPrimaryObservationValue=function(){return this.primaryObs&&_.get(this,"primaryObs.value.name")||_.get(this,"primaryObs.value")},setFreeTextPrimaryObservationValue=function(newValue){var codedObservation=findObservationByConceptName(this.groupMembers,this.conceptUIConfig.codedConceptName),nonCodedObservation=findObservationByConceptName(this.groupMembers,this.conceptUIConfig.nonCodedConceptName);"object"==typeof newValue?(setNewObservation(codedObservation,newValue),voidObservation(nonCodedObservation),this.markedAsNonCoded=!1):(setNewObservation(nonCodedObservation,newValue),voidObservation(codedObservation)),this.onValueChanged(newValue)},setFirstObservationValue=function(newValue){setNewObservation(this.primaryObs,newValue),this.onValueChanged(newValue)};Object.defineProperty(this,"value",{enumerable:!0,get:getPrimaryObservationValue,set:isFreeTextAutocompleteType(this.conceptUIConfig)?setFreeTextPrimaryObservationValue:setFirstObservationValue});var getFreeTextPrimaryObservation=function(){var isAlreadySavedObservation=function(observation){return _.isString(_.get(observation,"value"))&&!_.get(observation,"voided")},codedConceptObservation=findObservationByConceptName(this.groupMembers,this.conceptUIConfig.codedConceptName),nonCodedConceptObservation=findObservationByConceptName(this.groupMembers,this.conceptUIConfig.nonCodedConceptName);if(isAlreadySavedObservation(nonCodedConceptObservation))return nonCodedConceptObservation;if(!codedConceptObservation)throw new Error("Configuration Error: Concept '"+this.conceptUIConfig.codedConceptName+"' is not a set member of '"+concept.name.name+"'.");return codedConceptObservation},getGroupMembersWithoutClass=function(groupMembers,classNames){return _.filter(groupMembers,function(member){return!(_.includes(classNames,member.concept.conceptClass.name)||_.includes(classNames,member.concept.conceptClass))})},getFirstObservation=function(){var observations=getGroupMembersWithoutClass(this.groupMembers,[Bahmni.Common.Constants.abnormalConceptClassName,Bahmni.Common.Constants.unknownConceptClassName,Bahmni.Common.Constants.durationConceptClassName]);if(_.isEmpty(observations))return this.groupMembers[0];var primaryObs=observations[1]&&observations[1].uuid&&!observations[1].voided?observations[1]:observations[0];return observations[0].isMultiSelect?observations[0]:primaryObs.uuid&&!primaryObs.voided?primaryObs:!observations[1]||!observations[1].value&&""!==observations[1].value||observations[1].voided?observations[0]:observations[1]};Object.defineProperty(this,"primaryObs",{enumerable:!0,get:isFreeTextAutocompleteType(this.conceptUIConfig)?getFreeTextPrimaryObservation:getFirstObservation}),this.isObservationNode=!0,this.uniqueId=_.uniqueId("observation_"),this.durationObs=findObservationByClassName(this.groupMembers,Bahmni.Common.Constants.durationConceptClassName),this.abnormalObs=findObservationByClassName(this.groupMembers,Bahmni.Common.Constants.abnormalConceptClassName),this.unknownObs=findObservationByClassName(this.groupMembers,Bahmni.Common.Constants.unknownConceptClassName),this.markedAsNonCoded="Coded"!==this.primaryObs.concept.dataType&&this.primaryObs.uuid,savedObs?(this.uuid=savedObs.uuid,this.observationDateTime=savedObs.observationDateTime):this.value=this.conceptUIConfig.defaultValue},Bahmni.ConceptSet.ObservationNode.prototype={canAddMore:function(){return 1==this.conceptUIConfig.allowAddMore},isStepperControl:function(){return!!this.isNumeric()&&1==this.conceptUIConfig.stepper},getPossibleAnswers:function(){return this.primaryObs.concept.answers},getCodedConcept:function(){return findObservationByConceptName(this.groupMembers,this.conceptUIConfig.codedConceptName).concept},onValueChanged:function(){!this.primaryObs.hasValue()&&this.abnormalObs&&(this.abnormalObs.value=void 0,this.abnormalObs.erroneousValue=void 0),this.primaryObs.isNumeric()&&this.primaryObs.hasValue()&&this.abnormalObs&&this.setAbnormal(),this.primaryObs.observationDateTime=null,this.unknownObs&&this.setUnknown()},setAbnormal:function(){if(this.primaryObs.hasValue()){var erroneousValue=this.value>(this.primaryObs.concept.hiAbsolute||1/0)||this.value<(this.primaryObs.concept.lowAbsolute||0),valueInRange=this.value<=(this.primaryObs.concept.hiNormal||1/0)&&this.value>=(this.primaryObs.concept.lowNormal||0);this.abnormalObs.value=!valueInRange,this.abnormalObs.erroneousValue=erroneousValue}else this.abnormalObs.value=void 0,this.abnormalObs.erroneousValue=void 0},setUnknown:function(){this.primaryObs.atLeastOneValueSet()&&this.primaryObs.hasValue()?this.unknownObs.value=!1:0==this.unknownObs.value&&(this.unknownObs.value=void 0)},displayValue:function(){if(!(this.possibleAnswers.length>0))return this.value;for(var i=0;i<this.possibleAnswers.length;i++)if(this.possibleAnswers[i].uuid===this.value)return this.possibleAnswers[i].display},isGroup:function(){return!1},getControlType:function(){return isFreeTextAutocompleteType(this.conceptUIConfig)?"freeTextAutocomplete":this.conceptUIConfig.autocomplete?"autocomplete":this.isHtml5InputDataType()?"html5InputDataType":this.primaryObs.isText()?"text":this.conceptUIConfig.dropdown?"dropdown":"buttonselect"},isHtml5InputDataType:function(){return["Date","Numeric","Datetime"].indexOf(this.primaryObs.getDataTypeName())!=-1},_isDateTimeDataType:function(){return"Datetime"===this.primaryObs.getDataTypeName()},isComputed:function(){return this.primaryObs.isComputed()},isConciseText:function(){return this.conceptUIConfig.conciseText===!0},isComputedAndEditable:function(){return"Computed/Editable"===this.concept.conceptClass},atLeastOneValueSet:function(){return this.primaryObs.hasValue()},doesNotHaveDuration:function(){return!(!this.durationObs||!this.conceptUIConfig.durationRequired)&&(!this.durationObs.value||this.durationObs.value<0)},isValid:function(checkRequiredFields,conceptSetRequired){if(this.isNumeric()&&(!this.isValidNumeric()||!this.isValidNumericValue()))return!1;if(this.isGroup())return this._hasValidChildren(checkRequiredFields,conceptSetRequired);if(checkRequiredFields){if(conceptSetRequired&&this.isRequired()&&!this.primaryObs.hasValue())return!1;if(this.isRequired()&&!this.primaryObs.hasValue())return!1;if("freeTextAutocomplete"===this.getControlType())return this.isValidFreeTextAutocomplete()}return"Date"===this.primaryObs.getDataTypeName()?this.primaryObs.isValidDate():(!this.primaryObs.hasValue()||!this.doesNotHaveDuration())&&((!this.abnormalObs||!this.abnormalObs.erroneousValue)&&(this.primaryObs.hasValue()&&this.primaryObs._isDateTimeDataType()?!this.hasInvalidDateTime():"autocomplete"===this.getControlType()?_.isEmpty(this.primaryObs.value)||_.isObject(this.primaryObs.value):!this.primaryObs.hasValue()||!this.primaryObs.erroneousValue))},isValueInAbsoluteRange:function(){return!(this.abnormalObs&&this.abnormalObs.erroneousValue)},isValidFreeTextAutocomplete:function(){return!("Coded"!==this.primaryObs.concept.dataType&&!this.markedAsNonCoded&&this.primaryObs.value)},isRequired:function(){return this.disabled=!!this.disabled&&this.disabled,this.conceptUIConfig.required===!0&&this.disabled===!1},isDurationRequired:function(){return!!this.conceptUIConfig.durationRequired&&!!this.primaryObs.value},isNumeric:function(){return"Numeric"===this.primaryObs.getDataTypeName()},isDecimalAllowed:function(){return this.primaryObs.concept.allowDecimal},isValidNumeric:function(){return!(!this.isDecimalAllowed()&&this.value&&this.value.toString().indexOf(".")>=0)},isValidNumericValue:function(){var element=document.getElementById(this.uniqueId);return""!==this.value||!element||element.checkValidity()},_hasValidChildren:function(checkRequiredFields,conceptSetRequired){return this.groupMembers.every(function(member){return member.isValid(checkRequiredFields,conceptSetRequired)})},markAsNonCoded:function(){this.markedAsNonCoded=!this.markedAsNonCoded},toggleAbnormal:function(){this.abnormalObs.value=!this.abnormalObs.value},toggleUnknown:function(){this.unknownObs.value?this.unknownObs.value=void 0:this.unknownObs.value=!0},assignAddMoreButtonID:function(){return this.concept.name.split(" ").join("_").toLowerCase()+"_addmore_"+this.uniqueId},canHaveComment:function(){return!this.conceptUIConfig.disableAddNotes||!this.conceptUIConfig.disableAddNotes},hasInvalidDateTime:function(){if(this.isComputed())return!1;var date=Bahmni.Common.Util.DateUtil.parse(this.value);return!this.conceptUIConfig.allowFutureDates&&moment()<date||"Invalid Datetime"===this.value}}}(),Bahmni.ConceptSet.TabularObservations=function(obsGroups,parentObs,conceptUIConfig){this.parentObs=parentObs,this.concept=obsGroups[0]&&obsGroups[0].concept,this.label=obsGroups[0]&&obsGroups[0].label,this.conceptUIConfig=conceptUIConfig[this.concept.name]||{},this.isTabularObs=!0,this.rows=_.map(obsGroups,function(group){return new Bahmni.ConceptSet.ObservationRow(group,conceptUIConfig)}),this.columns=_.map(obsGroups[0].groupMembers,function(group){return group.concept}),this.cloneNew=function(){var old=this,clone=new Bahmni.ConceptSet.TabularObservations(angular.copy(obsGroups),parentObs,conceptUIConfig);return clone.rows=_.map(old.rows,function(row){return row.cloneNew()}),clone.disabled=this.disabled,clone},this.addNew=function(row){var newRow=row.cloneNew();this.rows.push(newRow),this.parentObs.groupMembers.push(newRow.obsGroup)},this.remove=function(row){row["void"](),this.rows.splice(this.rows.indexOf(row),1),0==this.rows.length&&this.addNew(row)},this.isFormElement=function(){return!1},this.getControlType=function(){return"tabular"},this.isValid=function(checkRequiredFields,conceptSetRequired){return _.every(this.rows,function(observationRow){return _.every(observationRow.cells,function(conceptSetObservation){return conceptSetObservation.isValid(checkRequiredFields,conceptSetRequired)})})},this.getConceptUIConfig=function(){return this.conceptUIConfig||{}},this.canAddMore=function(){return 1==this.getConceptUIConfig().allowAddMore},this.atLeastOneValueSet=function(){return this.rows.some(function(childNode){return childNode.obsGroup.atLeastOneValueSet()})},this.isNumeric=function(){return"Numeric"===this.concept.dataType},this.isValidNumericValue=function(){var element=document.getElementById(this.uniqueId);return""!==this.value||!element||element.checkValidity()}},Bahmni.ConceptSet.ObservationRow=function(obsGroup,conceptUIConfig){this.obsGroup=obsGroup,this.concept=obsGroup.concept,this.cells=obsGroup.groupMembers,this["void"]=function(){this.obsGroup.voided=!0},this.cloneNew=function(){var newObsGroup=this.obsGroup.cloneNew();newObsGroup.hidden=!0;var clone=new Bahmni.ConceptSet.ObservationRow(newObsGroup,conceptUIConfig);return clone.disabled=this.disabled,clone}},Bahmni.ConceptSet.MultiSelectObservations=function(conceptSetConfig){var self=this;this.multiSelectObservationsMap={},this.map=function(memberOfCollection){memberOfCollection.forEach(function(member){isMultiSelectable(member.concept,conceptSetConfig)&&add(member.concept,member,memberOfCollection)}),insertMultiSelectObsInExistingOrder(memberOfCollection)};var isMultiSelectable=function(concept,conceptSetConfig){return conceptSetConfig[concept.name]&&conceptSetConfig[concept.name].multiSelect},insertMultiSelectObsInExistingOrder=function(memberOfCollection){getAll().forEach(function(multiObs){var index=_.findIndex(memberOfCollection,function(member){return member.concept.name===multiObs.concept.name});memberOfCollection.splice(index,0,multiObs)})},add=function(concept,obs,memberOfCollection){var conceptName=concept.name.name||concept.name;self.multiSelectObservationsMap[conceptName]=self.multiSelectObservationsMap[conceptName]||new Bahmni.ConceptSet.MultiSelectObservation(concept,memberOfCollection,conceptSetConfig),self.multiSelectObservationsMap[conceptName].add(obs)},getAll=function(){return _.values(self.multiSelectObservationsMap)}},Bahmni.ConceptSet.MultiSelectObservation=function(concept,memberOfCollection,conceptSetConfig){var self=this;this.label=concept.shortName||concept.name,this.isMultiSelect=!0,this.selectedObs={},this.concept=concept,this.concept.answers=this.concept.answers||[],this.groupMembers=[],this.provider=null,this.observationDateTime="",this.conceptUIConfig=conceptSetConfig[this.concept.name]||{},this.possibleAnswers=self.concept.answers.map(function(answer){var cloned=_.cloneDeep(answer);return answer.name.name&&(cloned.name=answer.name.name),cloned}),this.getPossibleAnswers=function(){return this.possibleAnswers},this.cloneNew=function(){var clone=new Bahmni.ConceptSet.MultiSelectObservation(concept,memberOfCollection,conceptSetConfig);return clone.disabled=this.disabled,clone},this.add=function(obs){if(obs.value){self.selectedObs[obs.value.name]=obs,self.provider||(self.provider=self.selectedObs[obs.value.name].provider);var currentObservationDateTime=self.selectedObs[obs.value.name].observationDateTime;self.observationDateTime<currentObservationDateTime&&(self.observationDateTime=currentObservationDateTime)}obs.hidden=!0},this.isComputedAndEditable=function(){return"Computed/Editable"===this.concept.conceptClass},this.hasValueOf=function(answer){return self.selectedObs[answer.name]&&!self.selectedObs[answer.name].voided},this.toggleSelection=function(answer){self.hasValueOf(answer)?unselectAnswer(answer):self.selectAnswer(answer)},this.isFormElement=function(){return!0},this.getControlType=function(){var conceptConfig=this.getConceptUIConfig();return this.isCoded()&&1==conceptConfig.autocomplete&&1==conceptConfig.multiSelect?"autocompleteMultiSelect":1==conceptConfig.autocomplete?"autocomplete":"buttonselect"},this.atLeastOneValueSet=function(){var obsValue=_.filter(this.selectedObs,function(obs){return obs.value});return!_.isEmpty(obsValue)},this.hasValue=function(){return!_.isEmpty(this.selectedObs)},this.hasNonVoidedValue=function(){var hasNonVoidedValue=!1;return this.hasValue()&&angular.forEach(this.selectedObs,function(obs){obs.voided||(hasNonVoidedValue=!0)}),hasNonVoidedValue},this.isValid=function(checkRequiredFields,conceptSetRequired){if(this.error)return!1;if(checkRequiredFields){if(conceptSetRequired&&this.isRequired()&&!this.hasNonVoidedValue())return!1;if(this.isRequired()&&!this.hasNonVoidedValue())return!1}return!0},this.canHaveComment=function(){return!1},this.getConceptUIConfig=function(){return this.conceptUIConfig||{}},this.canAddMore=function(){return 1==this.getConceptUIConfig().allowAddMore},this.isRequired=function(){return this.disabled=!!this.disabled&&this.disabled,this.getConceptUIConfig().required===!0&&this.disabled===!1};var createObsFrom=function(answer){var obs=newObservation(concept,answer,conceptSetConfig);return memberOfCollection.push(obs),obs},removeObsFrom=function(answer){var obs=newObservation(concept,answer,conceptSetConfig);_.remove(memberOfCollection,function(member){return!!member.value&&obs.value.displayString==member.value.displayString})};this.selectAnswer=function(answer){var obs=self.selectedObs[answer.name];obs?(obs.value=answer,obs.voided=!1):(obs=createObsFrom(answer),self.add(obs))};var unselectAnswer=function(answer){var obs=self.selectedObs[answer.name];obs&&obs.uuid?(obs.value=null,obs.voided=!0):(removeObsFrom(answer),delete self.selectedObs[answer.name])},newObservation=function(concept,value,conceptSetConfig){var observation=buildObservation(concept);return new Bahmni.ConceptSet.Observation(observation,{value:value},conceptSetConfig,[])},buildObservation=function(concept){return{concept:concept,units:concept.units,label:concept.shortName||concept.name,possibleAnswers:self.concept.answers,groupMembers:[],comment:null}};this.getValues=function(){var values=[];return _.values(self.selectedObs).forEach(function(obs){obs.value&&values.push(obs.value.shortName||obs.value.name)}),values},this.isComputed=function(){return"Computed"===this.concept.conceptClass},this.getDataTypeName=function(){return this.concept.dataType},this._isDateTimeDataType=function(){return"Datetime"===this.getDataTypeName()},this.isNumeric=function(){return"Numeric"===this.getDataTypeName()},this.isText=function(){return"Text"===this.getDataTypeName()},this.isCoded=function(){return"Coded"===this.getDataTypeName()}},Bahmni.ConceptSet.CustomRepresentationBuilder={build:function(fields,childPropertyName,numberOfLevels){for(var childPropertyRep=childPropertyName+":{{entity_fileds}}",singleEntityString="("+fields.concat(childPropertyRep).join(",")+")",customRepresentation=singleEntityString,i=0;i<numberOfLevels;i++)customRepresentation=customRepresentation.replace("{{entity_fileds}}",singleEntityString);return customRepresentation=customRepresentation.replace(","+childPropertyRep,"")}},angular.module("bahmni.common.patientSearch",["bahmni.common.patient","infinite-scroll"]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.PatientSearch=Bahmni.Common.PatientSearch||{},Bahmni.Common.PatientSearch.Constants={searchExtensionTileViewType:"tile",searchExtensionTabularViewType:"tabular",tabularViewIgnoreHeadingsList:["display","uuid","image","$$hashKey","activeVisitUuid","hasBeenAdmitted","forwardUrl","programUuid","enrollment"],identifierHeading:["ID","Id","id","identifier","DQ_COLUMN_TITLE_ACTION"],nameHeading:["NAME","Name","name"],orderPlacedOnHeading:"Order Placed on",patientTileHeight:100,patientTileWidth:100,printIgnoreHeadingsList:["DQ_COLUMN_TITLE_ACTION"],tileLoadRatio:.5},Bahmni.Common.PatientSearch.Search=function(searchTypes){function mapPatient(patient){return(patient.name||patient.givenName||patient.familyName)&&(patient.name=patient.name||patient.givenName+(patient.familyName?" "+patient.familyName:"")),patient.display=_.map(self.searchColumns,function(column){return patient[column]}).join(" - "),patient.image=Bahmni.Common.Constants.patientImageUrlByPatientUuid+patient.uuid,patient}var self=this;self.searchTypes=searchTypes||[],self.searchType=this.searchTypes[0],self.searchParameter="",self.noResultsMessage=null,self.searchResults=[],self.activePatients=[],self.navigated=!1,self.links=self.searchType&&self.searchType.links?self.searchType.links:[],self.searchColumns=self.searchType&&self.searchType.searchColumns?self.searchType.searchColumns:["identifier","name"],angular.forEach(searchTypes,function(searchType){searchType.patientCount="..."}),self.switchSearchType=function(searchType){self.noResultsMessage=null,self.isSelectedSearch(searchType)||(self.searchParameter="",self.navigated=!0,self.searchType=searchType,self.activePatients=[],self.searchResults=[],self.links=self.searchType&&self.searchType.links?self.searchType.links:[],self.searchColumns=self.searchType&&self.searchType.searchColumns?self.searchType.searchColumns:["identifier","name"]),self.markPatientEntry()},self.markPatientEntry=function(){self.startPatientSearch=!0,window.setTimeout(function(){self.startPatientSearch=!1})},self.patientsCount=function(){return self.activePatients.length},self.updatePatientList=function(patientList){self.activePatients=patientList.map(mapPatient),self.searchResults=self.activePatients},self.updateSearchResults=function(patientList){self.updatePatientList(patientList),0===self.activePatients.length&&""!=self.searchParameter?self.noResultsMessage="NO_RESULTS_FOUND":self.noResultsMessage=null},self.hasSingleActivePatient=function(){return 1===self.activePatients.length},self.filterPatients=function(matchingCriteria){matchingCriteria=matchingCriteria?matchingCriteria:matchesNameOrId,self.searchResults=self.searchParameter?self.activePatients.filter(matchingCriteria):self.activePatients},self.filterPatientsByIdentifier=function(){self.filterPatients(matchesId)},self.isSelectedSearch=function(searchType){return self.searchType&&self.searchType.id==searchType.id},self.isCurrentSearchLookUp=function(){return self.searchType&&self.searchType.handler},self.isTileView=function(){return self.searchType&&self.searchType.view===Bahmni.Common.PatientSearch.Constants.searchExtensionTileViewType},self.isTabularView=function(){return self.searchType&&self.searchType.view===Bahmni.Common.PatientSearch.Constants.searchExtensionTabularViewType},self.showPatientCountOnSearchParameter=function(searchType){return showPatientCount(searchType)&&self.searchParameter};var matchesNameOrId=function(patient){return patient.display.toLowerCase().indexOf(self.searchParameter.toLowerCase())!==-1},matchesId=function(patient){return patient.identifier.toLowerCase().indexOf(self.searchParameter.toLowerCase())!==-1},showPatientCount=function(searchType){return self.isSelectedSearch(searchType)&&self.isCurrentSearchLookUp()}},angular.module("bahmni.common.patientSearch").directive("resize",["$window",function($window){var controller=function($scope){$scope.storeWindowDimensions=function(){var windowWidth=window.innerWidth,windowHeight=window.innerHeight,tileWidth=Bahmni.Common.PatientSearch.Constants.patientTileWidth,tileHeight=Bahmni.Common.PatientSearch.Constants.patientTileHeight;$scope.tilesToFit=Math.ceil(windowWidth*windowHeight/(tileWidth*tileHeight)),$scope.tilesToLoad=Math.ceil($scope.tilesToFit*Bahmni.Common.PatientSearch.Constants.tileLoadRatio)};var updateVisibleResults=function(){$scope.visibleResults=$scope.searchResults.slice(0,$scope.tilesToLoad)};$scope.loadMore=function(){var last=$scope.visibleResults.length,more=$scope.searchResults.length-last,toShow=more>$scope.tilesToLoad?$scope.tilesToLoad:more;if(toShow>0)for(var i=1;i<=toShow;i++)$scope.visibleResults.push($scope.searchResults[last+i-1])},$scope.$watch("searchResults",updateVisibleResults),$scope.$watch("tilesToFit",updateVisibleResults)},link=function($scope){$scope.storeWindowDimensions(),angular.element($window).bind("resize",function(){
$scope.$apply(function(){$scope.storeWindowDimensions()})})};return{restrict:"E",link:link,controller:controller,transclude:!0,scope:{searchResults:"=",visibleResults:"="},template:'<div ng-transclude infinite-scroll="loadMore()"></div>'}}]),angular.module("bahmni.common.patientSearch").directive("scheduler",["$interval",function($interval){var link=function($scope){var promise,cancelSchedule=function(){promise&&($interval.cancel(promise),promise=null)},startSchedule=function(){promise||(promise=$interval($scope.triggerFunction,1e3*$scope.refreshTime))};$scope.$watch(function(){return $scope.watchOn},function(value){$scope.refreshTime>0&&(value?cancelSchedule():startSchedule())}),$scope.triggerFunction(),$scope.$on("$destroy",function(){cancelSchedule()})};return{restrict:"A",link:link,scope:{refreshTime:"=",watchOn:"=",triggerFunction:"&"}}}]),angular.module("bahmni.common.patientSearch").controller("PatientsListController",["$scope","$window","patientService","$rootScope","appService","spinner","$stateParams","$bahmniCookieStore","printer","configurationService",function($scope,$window,patientService,$rootScope,appService,spinner,$stateParams,$bahmniCookieStore,printer,configurationService){const DEFAULT_FETCH_DELAY=2e3;var patientListSpinner,patientSearchConfig=appService.getAppDescriptor().getConfigValue("patientSearch"),initialize=function(){var searchTypes=appService.getAppDescriptor().getExtensions("org.bahmni.patient.search","config").map(mapExtensionToSearchType);$scope.search=new Bahmni.Common.PatientSearch.Search(_.without(searchTypes,void 0)),$scope.displayNepaliDates=appService.getAppDescriptor().getConfigValue("displayNepaliDates"),$scope.search.markPatientEntry(),$scope.$watch("search.searchType",function(currentSearchType){_.isEmpty(currentSearchType)||fetchPatients(currentSearchType)}),$scope.$watch("search.activePatients",function(activePatientsList){activePatientsList.length>0&&patientListSpinner&&hideSpinner(spinner,patientListSpinner,$(".tab-content"))}),patientSearchConfig&&patientSearchConfig.serializeSearch?getPatientCountSeriallyBySearchIndex(0):_.each($scope.search.searchTypes,function(searchType){_.isEmpty(searchType)||$scope.search.searchType!=searchType&&getPatientCount(searchType,null)}),null!=$rootScope.currentSearchType&&$scope.search.switchSearchType($rootScope.currentSearchType),configurationService.getConfigurations(["identifierTypesConfig"]).then(function(response){$scope.primaryIdentifier=_.find(response.identifierTypesConfig,{primary:!0}).name})};$scope.searchPatients=function(){return spinner.forPromise(patientService.search($scope.search.searchParameter)).then(function(response){$scope.search.updateSearchResults(response.data.pageOfResults),$scope.search.hasSingleActivePatient()&&$scope.forwardPatient($scope.search.activePatients[0])})},$scope.filterPatientsAndSubmit=function(){1==$scope.search.searchResults.length&&$scope.forwardPatient($scope.search.searchResults[0])};var getPatientCount=function(searchType,patientListSpinner){if(searchType.handler){var params={q:searchType.handler,v:"full",location_uuid:$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName).uuid,provider_uuid:$rootScope.currentProvider.uuid};searchType.additionalParams&&(params.additionalParams=searchType.additionalParams),patientService.findPatients(params).then(function(response){searchType.patientCount=response.data.length,$scope.search.isSelectedSearch(searchType)&&$scope.search.updatePatientList(response.data),patientListSpinner&&hideSpinner(spinner,patientListSpinner,$(".tab-content"))})}},hideSpinner=function(spinnerObj,data,container){spinnerObj.hide(data,container),$(container).children("patient-list-spinner").hide()};$scope.getHeadings=function(patients){if(patients&&patients.length>0){var headings=_.chain(patients[0]).keys().filter(function(heading){return _.indexOf(Bahmni.Common.PatientSearch.Constants.tabularViewIgnoreHeadingsList,heading)===-1}).value();return headings}return[]},$scope.isHeadingOfLinkColumn=function(heading){var identifierHeading=_.includes(Bahmni.Common.PatientSearch.Constants.identifierHeading,heading);return identifierHeading?identifierHeading:$scope.search.searchType&&$scope.search.searchType.links?_.find($scope.search.searchType.links,{linkColumn:heading}):$scope.search.searchType&&$scope.search.searchType.linkColumn?_.includes([$scope.search.searchType.linkColumn],heading):void 0},$scope.isHeadingOfName=function(heading){return _.includes(Bahmni.Common.PatientSearch.Constants.nameHeading,heading)},$scope.getPrintableHeadings=function(patients){var headings=$scope.getHeadings(patients),printableHeadings=headings.filter(function(heading){return _.indexOf(Bahmni.Common.PatientSearch.Constants.printIgnoreHeadingsList,heading)===-1});return printableHeadings},$scope.printPage=function(){null!=$scope.search.searchType.printHtmlLocation&&printer.printFromScope($scope.search.searchType.printHtmlLocation,$scope)};var mapExtensionToSearchType=function(appExtn){return{name:appExtn.label,display:appExtn.extensionParams.display,handler:appExtn.extensionParams.searchHandler,forwardUrl:appExtn.extensionParams.forwardUrl,id:appExtn.id,params:appExtn.extensionParams.searchParams,refreshTime:appExtn.extensionParams.refreshTime||0,view:appExtn.extensionParams.view||Bahmni.Common.PatientSearch.Constants.searchExtensionTileViewType,showPrint:appExtn.extensionParams.showPrint||!1,printHtmlLocation:appExtn.extensionParams.printHtmlLocation||null,additionalParams:appExtn.extensionParams.additionalParams,searchColumns:appExtn.extensionParams.searchColumns,translationKey:appExtn.extensionParams.translationKey,linkColumn:appExtn.extensionParams.linkColumn,links:appExtn.extensionParams.links}},debounceGetPatientCount=_.debounce(function(currentSearchType,patientListSpinner){getPatientCount(currentSearchType,patientListSpinner)},patientSearchConfig&&patientSearchConfig.fetchDelay||DEFAULT_FETCH_DELAY,{}),showSpinner=function(spinnerObj,container){return $(container).children("patient-list-spinner").show(),spinnerObj.show(container)},fetchPatients=function(currentSearchType){void 0!==patientListSpinner&&hideSpinner(spinner,patientListSpinner,$(".tab-content")),$rootScope.currentSearchType=currentSearchType,$scope.search.isCurrentSearchLookUp()&&(patientListSpinner=showSpinner(spinner,$(".tab-content")),patientSearchConfig&&patientSearchConfig.debounceSearch?debounceGetPatientCount(currentSearchType,patientListSpinner):getPatientCount(currentSearchType,patientListSpinner))};$scope.forwardPatient=function(patient,heading){var options=$.extend({},$stateParams);$rootScope.patientAdmitLocationStatus=patient.Status,$.extend(options,{patientUuid:patient.uuid,visitUuid:patient.activeVisitUuid||null,encounterUuid:$stateParams.encounterUuid||"active",programUuid:patient.programUuid||null,enrollment:patient.enrollment||null,forwardUrl:patient.forwardUrl||null,dateEnrolled:patient.dateEnrolled||null});var link=options.forwardUrl?{url:options.forwardUrl,newTab:!0}:{url:$scope.search.searchType.forwardUrl,newTab:!1};$scope.search.searchType.links&&(link=_.find($scope.search.searchType.links,{linkColumn:heading})||link),link.url&&null!==link.url&&$window.open(appService.getAppDescriptor().formatUrl(link.url,options,!0),link.newTab?"_blank":"_self")};var getPatientCountSeriallyBySearchIndex=function(index){if(index!==$scope.search.searchTypes.length){var searchType=$scope.search.searchTypes[index];if(searchType.handler){var params={q:searchType.handler,v:"full",location_uuid:$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName).uuid,provider_uuid:$rootScope.currentProvider.uuid};searchType.additionalParams&&(params.additionalParams=searchType.additionalParams),patientService.findPatients(params).then(function(response){return searchType.patientCount=response.data.length,$scope.search.isSelectedSearch(searchType)&&$scope.search.updatePatientList(response.data),getPatientCountSeriallyBySearchIndex(index+1)})}}};initialize()}]),angular.module("bahmni.common.uiHelper",["ngClipboard"]),angular.module("bahmni.common.uiHelper").service("backlinkService",["$window",function($window){var self=this,urls=[];self.reset=function(){urls=[]},self.setUrls=function(backLinks){self.reset(),angular.forEach(backLinks,function(backLink){self.addUrl(backLink)})},self.addUrl=function(backLink){urls.push(backLink)},self.addBackUrl=function(label){var backLabel=label||"Back";urls.push({label:backLabel,action:$window.history.back})},self.getUrlByLabel=function(label){return urls.filter(function(url){return url.label===label})},self.getAllUrls=function(){return urls}}]),angular.module("bahmni.common.uiHelper").service("contextChangeHandler",["$rootScope",function($rootScope){var callbacks=[],self=this;$rootScope.$on("$stateChangeSuccess",function(){self.reset()}),this.reset=function(){callbacks=[]},this.add=function(callback){callbacks.push(callback)},this.execute=function(){var allow=!0,callBackReturn=null,errorMessage=null;return callbacks.forEach(function(callback){callBackReturn=callback(),allow=allow&&callBackReturn.allow,_.isEmpty(errorMessage)&&(errorMessage=callBackReturn.errorMessage)}),callBackReturn&&errorMessage?{allow:allow,errorMessage:errorMessage}:{allow:allow}}}]),angular.module("bahmni.common.uiHelper").directive("bmPopOver",function(){var controller=function($scope){$scope.targetElements=[];var hideTargetElements=function(){$scope.targetElements.forEach(function(el){el.hide()})},showTargetElements=function(){$scope.targetElements.forEach(function(el){el.show()})};this.registerTriggerElement=function(triggerElement){$scope.triggerElement=triggerElement;var docClickHandler=function(){$scope.autoclose&&(hideTargetElements(),$scope.isTargetOpen=!1,$(document).off("click",docClickHandler))};$scope.triggerElement.on("click",function(event){$scope.isTargetOpen?($scope.isTargetOpen=!1,hideTargetElements(0),$(document).off("click",docClickHandler)):($scope.isTargetOpen=!0,showTargetElements(),$(document).on("click",docClickHandler),event.stopImmediatePropagation())}),$scope.$on("$destroy",function(){$(document).off("click",docClickHandler)})},this.registerTargetElement=function(targetElement){targetElement.hide(),$scope.targetElements.push(targetElement)};var hideOrShowTargetElements=function(){$scope.isTargetOpen&&($scope.isTargetOpen=!1,hideTargetElements(0))};$(document).on("click",".reg-wrapper",hideOrShowTargetElements),$scope.$on("$destroy",function(){$(document).off("click",".reg-wrapper",hideOrShowTargetElements)})};return{restrict:"A",controller:controller,scope:{autoclose:"="}}}).directive("bmPopOverTarget",function(){var link=function($scope,element,attrs,popOverController){popOverController.registerTargetElement(element)};return{restrict:"A",require:"^bmPopOver",link:link}}).directive("bmPopOverTrigger",function(){var link=function($scope,element,attrs,popOverController){popOverController.registerTriggerElement(element)};return{restrict:"A",require:"^bmPopOver",link:link}}),angular.module("bahmni.common.uiHelper").directive("splitButton",["$timeout",function($timeout){var controller=function($scope){$scope.primaryOption=$scope.primaryOption||$scope.options[0],$scope.secondaryOptions=_.without($scope.options,$scope.primaryOption),$scope.hasMultipleOptions=function(){return $scope.secondaryOptions.length>0}},link=function(scope,element){var shouldScroll=function(elementPosition,elementHeight){var windowHeight=window.innerHeight+$(window).scrollTop();return windowHeight<elementHeight+elementPosition};scope.scrollToBottom=function(){var timeout=$timeout(function(){var scrollHeight=$(element)[0].scrollHeight;shouldScroll(element.position().top,scrollHeight)&&(window.scrollBy(0,scrollHeight),$timeout.cancel(timeout))})}};return{restrict:"A",template:'<div class="split-button" bm-pop-over><button bm-pop-over-trigger class="toggle-button fa fa-caret-down" ng-show="::hasMultipleOptions()" ng-click="scrollToBottom()" ng-disabled="optionDisabled" type="button"></button><ul class="options"><li class="primaryOption"><button class="buttonClass" ng-click="optionClick()(primaryOption)" accesskey="{{::primaryOption.shortcutKey}}" ng-disabled="optionDisabled" ng-bind-html="::optionText()(primaryOption,\'primary\') | translate "></button></li><ul class="hidden-options"><li bm-pop-over-target ng-repeat="option in ::secondaryOptions" class="secondaryOption"><button class="buttonClass" ng-click="optionClick()(option)" accesskey="{{::option.shortcutKey}}" ng-disabled="optionDisabled" ng-bind-html="::optionText()(option) | translate"></button></li></ul></ul></div>',controller:controller,link:link,scope:{options:"=",primaryOption:"=",optionText:"&",optionClick:"&",optionDisabled:"="}}}]),angular.module("bahmni.common.uiHelper").directive("bmBackLinks",function(){return{template:'<ul><li ng-repeat="backLink in backLinks"><a class="back-btn" ng-if="backLink.action" accesskey="{{backLink.accessKey}}" ng-click="closeAllDialogs();backLink.action()" id="{{backLink.id}}"> <span ng-bind-html="backLink.label"></span> </a><a class="back-btn" ng-class="{\'dashboard-link\':backLink.image}" ng-if="backLink.url" accesskey="{{backLink.accessKey}}" ng-href="{{backLink.url}}" ng-click="closeAllDialogs()" id="{{backLink.id}}"  title="{{backLink.title}}"> <img ng-if="backLink.image" ng-src="{{backLink.image}}" onerror="this.onerror=null; this.src=\'../images/blank-user.gif\'"/><i ng-if="backLink.icon && !backLink.image" class="fa {{backLink.icon}}"></i></a><a class="back-btn" ng-if="backLink.state && !backLink.text" accesskey="{{backLink.accessKey}}" ui-sref="{{backLink.state}}" ng-click="closeAllDialogs()" id="{{backLink.id}}"><i ng-if="backLink.icon" class="fa {{backLink.icon}}"></i></a><a ng-if="backLink.text && backLink.requiredPrivilege" show-if-privilege="{{backLink.requiredPrivilege}}" accesskey="{{backLink.accessKey}}" ui-sref="{{backLink.state}}" id="{{backLink.id}}" class="back-btn-noIcon" ui-sref-active="active"><span>{{backLink.text | translate}}</span>        </a><a ng-if="backLink.text && !backLink.requiredPrivilege" accesskey="{{backLink.accessKey}}" ui-sref="{{backLink.state}}" id="{{backLink.id}}" class="back-btn-noIcon" ui-sref-active="active"><span>{{backLink.text | translate}}</span>        </a></li></ul>',controller:function($scope,backlinkService){$scope.backLinks=backlinkService.getAllUrls(),$scope.$on("$stateChangeSuccess",function(event,state){state.data&&state.data.backLinks&&(backlinkService.setUrls(state.data.backLinks),$scope.backLinks=backlinkService.getAllUrls())}),$scope.$on("$destroy",function(){window.onbeforeunload=void 0})},restrict:"E"}}),angular.module("bahmni.common.uiHelper").directive("focusOn",["$timeout",function($timeout){return function(scope,elem,attrs){Modernizr.ios||scope.$watch(attrs.focusOn,function(value){value&&$timeout(function(){$(elem).focus()})})}}]),angular.module("bahmni.common.uiHelper").directive("bmShow",["$rootScope",function($rootScope){var link=function($scope,element){$scope.$watch("bmShow",function(){$rootScope.isBeingPrinted||$scope.bmShow?element.removeClass("ng-hide"):element.addClass("ng-hide")})};return{scope:{bmShow:"="},link:link}}]),angular.module("bahmni.common.uiHelper").factory("spinner",["messagingService","$timeout",function(messagingService,$timeout){var tokens=[],topLevelDiv=function(element){return $(element).find("div").eq(0)},showSpinnerForElement=function(element){return 0===$(element).find(".dashboard-section-loader").length&&topLevelDiv(element).addClass("spinnable").append('<div class="dashboard-section-loader"></div>'),{element:$(element).find(".dashboard-section-loader")}},showSpinnerForOverlay=function(){var token=Math.random();tokens.push(token),0===$("#overlay").length&&$("body").prepend('<div id="overlay"><div></div></div>');var spinnerElement=$("#overlay");return spinnerElement.stop().show(),{element:spinnerElement,token:token}},show=function(element){return void 0!==element?showSpinnerForElement(element):showSpinnerForOverlay()},hide=function(spinner,parentElement){var spinnerElement=spinner.element;spinner.token?(_.pull(tokens,spinner.token),0===tokens.length&&spinnerElement.fadeOut(300)):(topLevelDiv(parentElement).removeClass("spinnable"),spinnerElement&&spinnerElement.remove())},forPromise=function(promise,element){return $timeout(function(){var spinner=show(element);return promise["finally"](function(){hide(spinner,element)}),promise})},forAjaxPromise=function(promise,element){var spinner=show(element);return promise.always(function(){hide(spinner,element)}),promise};return{forPromise:forPromise,forAjaxPromise:forAjaxPromise,show:show,hide:hide}}]),angular.module("bahmni.common.uiHelper").factory("printer",["$rootScope","$compile","$http","$timeout","$q","spinner",function($rootScope,$compile,$http,$timeout,$q,spinner){var printHtml=function(html){var deferred=$q.defer(),hiddenFrame=$('<iframe style="visibility: hidden"></iframe>').appendTo("body")[0];hiddenFrame.contentWindow.printAndRemove=function(){hiddenFrame.contentWindow.print(),$(hiddenFrame).remove(),deferred.resolve()};var htmlContent='<!doctype html><html><body onload="printAndRemove();">'+html+"</body></html>",doc=hiddenFrame.contentWindow.document.open("text/html","replace");return doc.write(htmlContent),doc.close(),deferred.promise},print=function(templateUrl,data){$rootScope.isBeingPrinted=!0,$http.get(templateUrl).then(function(templateData){var template=templateData.data,printScope=$rootScope.$new();angular.extend(printScope,data);var element=$compile($("<div>"+template+"</div>"))(printScope),renderAndPrintPromise=$q.defer(),waitForRenderAndPrint=function(){return printScope.$$phase||$http.pendingRequests.length?$timeout(waitForRenderAndPrint,1e3):(printHtml(element.html()).then(function(){$rootScope.isBeingPrinted=!1,renderAndPrintPromise.resolve()}),printScope.$destroy()),renderAndPrintPromise.promise};spinner.forPromise(waitForRenderAndPrint())})},printFromScope=function(templateUrl,scope,afterPrint){$rootScope.isBeingPrinted=!0,$http.get(templateUrl).then(function(response){var template=response.data,printScope=scope,element=$compile($("<div>"+template+"</div>"))(printScope),renderAndPrintPromise=$q.defer(),waitForRenderAndPrint=function(){return printScope.$$phase||$http.pendingRequests.length?$timeout(waitForRenderAndPrint):printHtml(element.html()).then(function(){$rootScope.isBeingPrinted=!1,afterPrint&&afterPrint(),renderAndPrintPromise.resolve()}),renderAndPrintPromise.promise};spinner.forPromise(waitForRenderAndPrint())})};return{print:print,printFromScope:printFromScope}}]),angular.module("bahmni.common.uiHelper").directive("toggle",function(){var link=function($scope,element){$scope.toggle=void 0!==$scope.toggle&&$scope.toggle,$(element).click(function(){$scope.$apply(function(){$scope.toggle=!$scope.toggle})}),$scope.$watch("toggle",function(){$(element).toggleClass("active",$scope.toggle)}),$scope.$on("$destroy",function(){element.off("click")})};return{scope:{toggle:"="},link:link}}),angular.module("bahmni.common.uiHelper").filter("thumbnail",function(){return function(url,extension){if(url)return extension?Bahmni.Common.Constants.documentsPath+"/"+url.replace(/(.*)\.(.*)$/,"$1_thumbnail."+extension)||null:Bahmni.Common.Constants.documentsPath+"/"+url.replace(/(.*)\.(.*)$/,"$1_thumbnail.$2")||null}}),angular.module("bahmni.common.uiHelper").filter("days",function(){return function(startDate,endDate){return Bahmni.Common.Util.DateUtil.diffInDays(startDate,endDate)}}).filter("bahmniDateTime",function(){return function(date){return Bahmni.Common.Util.DateUtil.formatDateWithTime(date)}}).filter("bahmniDate",function(){return function(date){return Bahmni.Common.Util.DateUtil.formatDateWithoutTime(date)}}).filter("bahmniTime",function(){return function(date){return Bahmni.Common.Util.DateUtil.formatTime(date)}}).filter("bahmniDateInStrictMode",function(){return function(date){return Bahmni.Common.Util.DateUtil.formatDateInStrictMode(date)}}).filter("npDate",function(){return function(date){if(null!==date&&void 0!==date&&""!==date&&Bahmni.Common.Util.DateUtil.isValid(date)){date=isNaN(Number(date))?date:Number(date);var adDate=Bahmni.Common.Util.DateUtil.getDateWithoutTime(date).split("-"),bsDate=calendarFunctions.getBsDateByAdDate(parseInt(adDate[0]),parseInt(adDate[1]),parseInt(adDate[2]));return calendarFunctions.bsDateFormat("%y %M, %d",bsDate.bsYear,bsDate.bsMonth,bsDate.bsDate)}return date}}).filter("npDateTime",function(){return function(date){if(null!==date&&void 0!==date&&""!==date&&Bahmni.Common.Util.DateUtil.isValid(date)){date=isNaN(Number(date))?date:Number(date);var adDate=Bahmni.Common.Util.DateUtil.getDateWithoutTime(date).split("-"),bsDate=calendarFunctions.getBsDateByAdDate(parseInt(adDate[0]),parseInt(adDate[1]),parseInt(adDate[2]));return calendarFunctions.bsDateFormat("%y %M, %d",bsDate.bsYear,bsDate.bsMonth,bsDate.bsDate)+" "+Bahmni.Common.Util.DateUtil.formatTime(date)}return date}}),angular.module("bahmni.common.uiHelper").controller("MessageController",["$scope","messagingService",function($scope,messagingService){$scope.messages=messagingService.messages,$scope.getMessageText=function(level){var string="";return $scope.messages[level].forEach(function(message){string=string.concat(message.value)}),string},$scope.hideMessage=function(level){messagingService.hideMessages(level)},$scope.isErrorMessagePresent=function(){return $scope.messages.error.length>0},$scope.isInfoMessagePresent=function(){return $scope.messages.info.length>0}}]),angular.module("bahmni.common.uiHelper").service("messagingService",["$rootScope","$timeout",function($rootScope,$timeout){this.messages={error:[],info:[]};var self=this;$rootScope.$on("event:serverError",function(event,errorMessage){self.showMessage("error",errorMessage,"serverError")}),this.showMessage=function(level,message,errorEvent){var messageObject={value:"",isServerError:!1};messageObject.value=message,errorEvent?messageObject.isServerError=!0:"info"==level&&this.createTimeout("info",4e3);var index=_.findIndex(this.messages[level],function(msg){return msg.value==messageObject.value});index>=0&&this.messages[level].splice(index,1),this.messages[level].push(messageObject)},this.createTimeout=function(level,time){$timeout(function(){self.messages[level]=[]},time,!0)},this.hideMessages=function(level){self.messages[level].length=0},this.clearAll=function(){self.messages.error=[],self.messages.info=[]}}]),angular.module("bahmni.common.uiHelper").directive("ngConfirmClick",function(){var link=function(scope,element,attr){var msg=attr.confirmMessage||"Are you sure?",clickAction=attr.ngConfirmClick;element.bind("click",function(){window.confirm(msg)&&scope.$apply(clickAction)})};return{restrict:"A",link:link}}),angular.module("bahmni.common.uiHelper").directive("monthyearpicker",["$translate",function($translate){var link=function($scope){var monthNames=$translate.instant("MONTHS");$scope.monthNames=monthNames.split(",");var getYearList=function(){for(var minYear=$scope.minYear?$scope.minYear:moment().toDate().getFullYear()-15,maxYear=$scope.maxYear?$scope.maxYear:moment().toDate().getFullYear()+5,yearList=[],i=maxYear;i>=minYear;i--)yearList.push(i);return yearList};$scope.years=getYearList();var valueCompletelyFilled=function(){return null!=$scope.selectedMonth&&null!=$scope.selectedYear},valueNotFilled=function(){return null==$scope.selectedMonth&&null==$scope.selectedYear},getCompleteDate=function(){var month=$scope.selectedMonth+1;return $scope.selectedYear+"-"+month+"-01"};if($scope.updateModel=function(){valueCompletelyFilled()?$scope.model=getCompleteDate():$scope.isValid()?$scope.model="":$scope.model="Invalid Date"},$scope.isValid=function(){return valueNotFilled()||valueCompletelyFilled()},$scope.illegalMonth=function(){return(void 0===$scope.selectedMonth||null===$scope.selectedMonth)&&null!==$scope.selectedYear&&void 0!==$scope.selectedYear},$scope.illegalYear=function(){return null!==$scope.selectedMonth&&void 0!==$scope.selectedMonth&&(void 0===$scope.selectedYear||null===$scope.selectedYear)},$scope.model){var date=moment($scope.model).toDate();$scope.selectedMonth=date.getMonth(),$scope.selectedYear=date.getFullYear()}};return{restrict:"E",link:link,scope:{observation:"=",minYear:"=",maxYear:"=",illegalValue:"=",model:"="},template:'<span><select ng-model=\'selectedMonth\'  ng-class="{\'illegalValue\': illegalMonth() || illegalValue}" ng-change="updateModel()" ng-options="monthNames.indexOf(month) as month for month in monthNames" ><option value="">{{\'CHOOSE_MONTH_KEY\' | translate}}</option>></select></span><span><select ng-model=\'selectedYear\'   ng-class="{\'illegalValue\': illegalYear() || illegalValue}" ng-change="updateModel()" ng-options="year as year for year in years"><option value="">{{\'CHOOSE_YEAR_KEY\' | translate}}</option>></select></span>'}}]),angular.module("bahmni.common.uiHelper").directive("providerDirective",function(){var template='<span><span ng-if=":: creatorName && providerName && (creatorName != providerName)">{{::creatorName}} {{"ON_BEHALF_OF_TRANSLATION_KEY"|translate}} </span>{{::providerName}} <span ng-if=":: providerDate"> {{::providerDate | bahmniTime}} </span></span>';return{restrict:"EA",replace:!0,scope:{creatorName:"@",providerName:"@",providerDate:"=?"},template:template}}),angular.module("bahmni.common.uiHelper").directive("singleClick",function(){var ignoreClick=!1,link=function(scope,element){var clickHandler=function(){ignoreClick||(ignoreClick=!0,scope.singleClick()["finally"](function(){ignoreClick=!1}))};element.on("click",clickHandler),scope.$on("$destroy",function(){element.off("click",clickHandler)})};return{scope:{singleClick:"&"},restrict:"A",link:link}}),angular.module("bahmni.common.uiHelper").directive("bahmniAutocomplete",["$translate",function($translate){var link=function(scope,element,attrs,ngModelCtrl){var source=scope.source(),responseMap=scope.responseMap&&scope.responseMap(),onSelect=scope.onSelect(),onEdit=scope.onEdit&&scope.onEdit(),minLength=scope.minLength||2,formElement=element[0],validationMessage=scope.validationMessage||$translate.instant("SELECT_VALUE_FROM_AUTOCOMPLETE_DEFAULT_MESSAGE"),validateIfNeeded=function(value){scope.strictSelect&&(scope.isInvalid=value!==scope.selectedValue,_.isEmpty(value)&&(scope.isInvalid=!1))};scope.$watch("initialValue",function(){scope.initialValue&&(scope.selectedValue=scope.initialValue,scope.isInvalid=!1)}),element.autocomplete({autofocus:!0,minLength:minLength,source:function(request,response){source({elementId:attrs.id,term:request.term,elementType:attrs.type}).then(function(data){var results=responseMap?responseMap(data):data;response(results)})},select:function(event,ui){return scope.selectedValue=ui.item.value,ngModelCtrl.$setViewValue(ui.item.value),null!=onSelect&&onSelect(ui.item),validateIfNeeded(ui.item.value),scope.blurOnSelect&&element.blur(),scope.$apply(),scope.$eval(attrs.ngDisabled),scope.$apply(),!0},search:function(event,ui){null!=onEdit&&onEdit(ui.item);var searchTerm=$.trim(element.val());validateIfNeeded(searchTerm),searchTerm.length<minLength&&event.preventDefault()}});var changeHanlder=function(e){validateIfNeeded(element.val())},keyUpHandler=function(e){validateIfNeeded(element.val()),scope.$apply()};element.on("change",changeHanlder),element.on("keyup",keyUpHandler),scope.$watch("isInvalid",function(){ngModelCtrl.$setValidity("selection",!scope.isInvalid),formElement.setCustomValidity(scope.isInvalid?validationMessage:"")}),scope.$on("$destroy",function(){element.off("change",changeHanlder),element.off("keyup",keyUpHandler)})};return{link:link,require:"ngModel",scope:{source:"&",responseMap:"&?",onSelect:"&",onEdit:"&?",minLength:"=?",blurOnSelect:"=?",strictSelect:"=?",validationMessage:"@",isInvalid:"=?",initialValue:"=?"}}}]),angular.module("bahmni.common.uiHelper").directive("nonBlank",function(){return function($scope,element,attrs){var addNonBlankAttrs=function(){element.attr({required:"required"})},removeNonBlankAttrs=function(){element.removeAttr("required")};return attrs.nonBlank?void $scope.$watch(attrs.nonBlank,function(value){return value?addNonBlankAttrs():removeNonBlankAttrs()}):addNonBlankAttrs(element)}}).directive("datepicker",function(){var link=function($scope,element,attrs,ngModel){var maxDate=attrs.maxDate,minDate=attrs.minDate||"-120y",format=attrs.dateFormat||"dd-mm-yy";element.datepicker({changeYear:!0,changeMonth:!0,maxDate:maxDate,minDate:minDate,yearRange:"c-120:c+120",dateFormat:format,onSelect:function(dateText){$scope.$apply(function(){ngModel.$setViewValue(dateText)})}})};return{require:"ngModel",link:link}}).directive("myAutocomplete",["$parse",function($parse){var link=function(scope,element,attrs,ngModelCtrl){var source=($parse(attrs.ngModel),scope.source()),responseMap=scope.responseMap(),onSelect=scope.onSelect();element.autocomplete({autofocus:!0,minLength:2,source:function(request,response){source(attrs.id,request.term,attrs.itemType).then(function(data){var results=responseMap?responseMap(data.data):data.data;response(results)})},select:function(event,ui){return scope.$apply(function(scope){ngModelCtrl.$setViewValue(ui.item.value),scope.$eval(attrs.ngChange),null!=onSelect&&onSelect(ui.item)}),!0},search:function(event){var searchTerm=$.trim(element.val());searchTerm.length<2&&event.preventDefault()}})};return{link:link,require:"ngModel",scope:{source:"&",responseMap:"&",onSelect:"&"}}}]).directive("bmForm",["$timeout",function($timeout){var link=function(scope,elem,attrs){$timeout(function(){$(elem).unbind("submit").submit(function(e){var formScope=scope.$parent,formName=attrs.name;e.preventDefault(),scope.autofillable&&$(elem).find("input").trigger("change"),formScope[formName].$valid?(formScope.$apply(attrs.ngSubmit),$(elem).removeClass("submitted-with-error")):$(elem).addClass("submitted-with-error")})},0)};return{link:link,require:"form",scope:{autofillable:"="}}}]).directive("patternValidate",["$timeout",function($timeout){return function($scope,element,attrs){var addPatternToElement=function(){$scope.fieldValidation&&$scope.fieldValidation[attrs.id]&&element.attr({pattern:$scope.fieldValidation[attrs.id].pattern,title:$scope.fieldValidation[attrs.id].errorMessage,type:"text"})};$timeout(addPatternToElement)}}]).directive("validateOn",function(){var link=function(scope,element,attrs,ngModelCtrl){var validationMessage=attrs.validationMessage||"Please enter a valid detail",setValidity=function(value){var valid=!!value;ngModelCtrl.$setValidity("blank",valid),element[0].setCustomValidity(valid?"":validationMessage)};scope.$watch(attrs.validateOn,setValidity,!0)};return{link:link,require:"ngModel"}}),angular.module("bahmni.common.uiHelper").directive("singleSubmit",function(){var ignoreSubmit=!1,link=function(scope,element){var submitHandler=function(){ignoreSubmit||(ignoreSubmit=!0,scope.singleSubmit()["finally"](function(){ignoreSubmit=!1}))};element.on("submit",submitHandler),scope.$on("$destroy",function(){element.off("submit",submitHandler)})};return{scope:{singleSubmit:"&"},restrict:"A",link:link}});var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.Logging=Bahmni.Common.Logging||{},angular.module("bahmni.common.logging",[]),angular.module("bahmni.common.logging").config(["$provide",function($provide){$provide.decorator("$exceptionHandler",function($delegate,$injector,$window,$log){var logError=function(exception,cause){try{var messagingService=$injector.get("messagingService"),loggingService=$injector.get("loggingService"),errorMessage=exception.toString(),stackTrace=printStackTrace({e:exception}),errorDetails={timestamp:new Date,browser:$window.navigator.userAgent,errorUrl:$window.location.href,errorMessage:errorMessage,stackTrace:stackTrace,cause:cause||""};loggingService.log(errorDetails),messagingService.showMessage("error",errorMessage),exposeException(errorDetails)}catch(loggingError){$log.warn("Error logging failed"),$log.log(loggingError)}},exposeException=function(exceptionDetails){
window.angular_exception=window.angular_exception||[],window.angular_exception.push(exceptionDetails)};return function(exception,cause){$delegate(exception,cause),logError(exception,cause)}})}]),angular.module("bahmni.common.logging").service("loggingService",function(){var log=function(errorDetails){$.ajax({type:"POST",url:"/log",contentType:"application/json",data:angular.toJson(errorDetails)})};return{log:log}});var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.Obs=Bahmni.Common.Obs||{},angular.module("bahmni.common.obs",[]),Bahmni.Common.Obs.Observation=function(){var Observation=function(obs,conceptConfig){angular.extend(this,obs),this.concept=obs.concept,this.conceptConfig=conceptConfig};return Observation.prototype={isFormElement:function(){return this.groupMembers&&this.groupMembers.length<=0},isImageConcept:function(){return"Image"===this.concept.conceptClass},isVideoConcept:function(){return"Video"===this.concept.conceptClass},hasPDFAsValue:function(){return this.value.indexOf(".pdf")>0},isComplexConcept:function(){return"Complex"===this.concept.dataType},getComplexDataType:function(){return this.complexData?this.complexData.dataType:null},isLocationRef:function(){return this.isComplexConcept()&&"Location"===this.getComplexDataType()},isProviderRef:function(){return this.isComplexConcept()&&"Provider"===this.getComplexDataType()},getDisplayValue:function(){var value;if("Boolean"===this.type||this.concept&&"Boolean"===this.concept.dataType)return this.value===!0?"OBS_BOOLEAN_YES_KEY":"OBS_BOOLEAN_NO_KEY";if("Datetime"===this.type||this.concept&&"Datetime"===this.concept.dataType){var date=Bahmni.Common.Util.DateUtil.parseDatetime(this.value);return null!=date?Bahmni.Common.Util.DateUtil.formatDateWithTime(date):""}if(this.conceptConfig&&this.conceptConfig.displayMonthAndYear&&(value=Bahmni.Common.Util.DateUtil.getDateInMonthsAndYears(this.value),null!=value))return value;if("Date"===this.type||this.concept&&"Date"===this.concept.dataType)return this.value?Bahmni.Common.Util.DateUtil.formatDateWithoutTime(this.value):"";if(this.isLocationRef())return this.complexData.display;if(this.isProviderRef())return this.complexData.display;value=this.value;var displayValue=value&&(value.shortName||value.name&&(value.name.name||value.name)||value);return this.duration&&(displayValue=displayValue+" "+this.getDurationDisplayValue()),displayValue},getDurationDisplayValue:function(){var durationForDisplay=Bahmni.Common.Util.DateUtil.convertToUnits(this.duration);return"since "+durationForDisplay.value+" "+durationForDisplay.unitName}},Observation}(),Bahmni.Common.Obs.MultiSelectObservation=function(){var MultiSelectObservation=function(groupMembers,conceptConfig){this.type="multiSelect",this.concept=groupMembers[0].concept,this.encounterDateTime=groupMembers[0].encounterDateTime,this.groupMembers=groupMembers,this.conceptConfig=conceptConfig,this.observationDateTime=getLatestObservationDateTime(this.groupMembers),this.providers=groupMembers[0].providers,this.creatorName=groupMembers[0].creatorName},getLatestObservationDateTime=function(groupMembers){var latestObservationDateTime=groupMembers[0].observationDateTime;return groupMembers.forEach(function(member){latestObservationDateTime=latestObservationDateTime<member.observationDateTime?member.observationDateTime:latestObservationDateTime}),latestObservationDateTime};return MultiSelectObservation.prototype={isFormElement:function(){return!0},getDisplayValue:function(){var getName=Bahmni.Common.Domain.ObservationValueMapper.getNameFor.Object;return _.map(this.groupMembers,getName).join(", ")}},MultiSelectObservation}(),Bahmni.Common.Obs.GridObservation=function(){var conceptMapper=new Bahmni.Common.Domain.ConceptMapper,GridObservation=function(obs,conceptConfig){angular.extend(this,obs),this.type="grid",this.conceptConfig=conceptConfig},getObservationDisplayValue=function(observation){if(observation.isBoolean||"Boolean"===observation.type)return observation.value===!0?"OBS_BOOLEAN_YES_KEY":"OBS_BOOLEAN_NO_KEY";if(!observation.value)return"";if("object"==typeof observation.value.name){var valueConcept=conceptMapper.map(observation.value);return valueConcept.shortName||valueConcept.name}return observation.value.shortName||observation.value.name||observation.value};return GridObservation.prototype={isFormElement:function(){return!0},getDisplayValue:function(){var gridObservationDisplayValue=_.compact(_.map(this.groupMembers,function(member){return getObservationDisplayValue(member)})).join(", ");return gridObservationDisplayValue||this.value}},GridObservation}(),Bahmni.Common.Obs.ObservationMapper=function(){var conceptMapper=new Bahmni.Common.Domain.ConceptMapper;this.map=function(bahmniObservations,allConceptsConfig,dontSortByObsDateTime){var mappedObservations=mapObservations(bahmniObservations,allConceptsConfig,dontSortByObsDateTime);return mapUIObservations(mappedObservations,allConceptsConfig)};var mapObservations=function(bahmniObservations,allConceptsConfig,dontSortByObsDateTime){var mappedObservations=[];return bahmniObservations=dontSortByObsDateTime?_.flatten(bahmniObservations):Bahmni.Common.Obs.ObservationUtil.sortSameConceptsWithObsDateTime(bahmniObservations),$.each(bahmniObservations,function(i,bahmniObservation){var conceptConfig=allConceptsConfig[bahmniObservation.concept.name]||[],observation=new Bahmni.Common.Obs.Observation(bahmniObservation,conceptConfig);observation.groupMembers&&observation.groupMembers.length>=0&&(observation.groupMembers=mapObservations(observation.groupMembers,allConceptsConfig,dontSortByObsDateTime)),mappedObservations.push(observation)}),mappedObservations},mapUIObservations=function(observations,allConceptsConfig){var groupedObservations=_.groupBy(observations,function(observation){return observation.concept.name}),mappedObservations=[];return $.each(groupedObservations,function(i,obsGroup){var conceptConfig=allConceptsConfig[obsGroup[0].concept.name]||[];if(conceptConfig.multiSelect){var multiSelectObservations={};$.each(obsGroup,function(i,observation){if(multiSelectObservations[observation.encounterDateTime])multiSelectObservations[observation.encounterDateTime].push(observation);else{var observations=[];observations.push(observation),multiSelectObservations[observation.encounterDateTime]=observations}}),$.each(multiSelectObservations,function(i,observations){mappedObservations.push(new Bahmni.Common.Obs.MultiSelectObservation(observations,conceptConfig))})}else conceptConfig.grid?mappedObservations.push(new Bahmni.Common.Obs.GridObservation(obsGroup[0],conceptConfig)):$.each(obsGroup,function(i,obs){obs.groupMembers=mapUIObservations(obs.groupMembers,allConceptsConfig),mappedObservations.push(obs)})}),mappedObservations};this.getGridObservationDisplayValue=function(observationTemplate){var memberValues=_.compact(_.map(observationTemplate.bahmniObservations,function(observation){return getObservationDisplayValue(observation)}));return memberValues.join(", ")};var getObservationDisplayValue=function(observation){if(observation.isBoolean||"Boolean"===observation.type)return observation.value===!0?"Yes":"No";if(!observation.value)return"";if("object"==typeof observation.value.name){var valueConcept=conceptMapper.map(observation.value);return valueConcept.shortName||valueConcept.name}return observation.value.shortName||observation.value.name||observation.value}},angular.module("bahmni.common.obs").directive("showObservation",["appService","ngDialog",function(appService,ngDialog){var controller=function($scope,$rootScope,$filter){$scope.displayNepaliDates=appService.getAppDescriptor().getConfigValue("displayNepaliDates"),$scope.toggle=function(observation){observation.showDetails=!observation.showDetails},$scope.print=$rootScope.isBeingPrinted||!1,$scope.dateString=function(observation){var filterName;if($scope.showDate&&$scope.showTime&&!$scope.displayNepaliDates)filterName="bahmniDateTime";else if($scope.showDate&&$scope.showTime&&$scope.displayNepaliDates)filterName="npDateTime";else{if($scope.showDate||!$scope.showTime&&void 0!==$scope.showTime)return null;filterName="bahmniTime"}return $filter(filterName)(observation.observationDateTime)},$scope.openVideoInPopup=function(observation){ngDialog.open({template:"../common/obs/views/showVideo.html",closeByDocument:!1,className:"ngdialog-theme-default",showClose:!0,data:{observation:observation}})}};return{restrict:"E",scope:{observation:"=?",patient:"=",showDate:"=?",showTime:"=?",showDetailsButton:"=?"},controller:controller,template:"<ng-include src=\"'../common/obs/views/showObservation.html'\" />"}}]),Bahmni.Common.Obs.ObservationUtil=function(){var sortSameConceptsWithObsDateTime=function(observation){for(var sortedObservations=[],i=0;i<observation.length;i++)if(i!==observation.length-1)if(observation[i].conceptUuid!==observation[i+1].conceptUuid)sortedObservations.push(observation[i]);else{var sameConceptsSubArray=[],j=i+1;for(sameConceptsSubArray.push(observation[i]);j<observation.length&&observation[i].conceptUuid===observation[j].conceptUuid;)sameConceptsSubArray.push(observation[j++]);sameConceptsSubArray=_.sortBy(sameConceptsSubArray,"observationDateTime"),sortedObservations.push(sameConceptsSubArray),i=j-1}else sortedObservations.push(observation[i]);return _.flatten(sortedObservations)},getValue=function(observation){if(observation.selectedObs)return observation.getValues();var obsValue;return obsValue=observation.value&&observation.value.name&&observation.value.name.name?observation.value.name.name:observation.value&&observation.value.name&&!observation.value.name.name?observation.value.name:observation.value,void 0===obsValue||null===obsValue?obsValue:obsValue.displayString||obsValue},collect=function(flattenedObservations,key,value){void 0!=value&&(flattenedObservations[key]=flattenedObservations[key]?_.uniq(_.flatten(_.union([flattenedObservations[key]],[value]))):value)},findLeafObservations=function(flattenedObservations,observation){_.isEmpty(observation.groupMembers)?collect(flattenedObservations,observation.concept.name,getValue(observation)):_.each(observation.groupMembers,function(member){findLeafObservations(flattenedObservations,member)})},flatten=function(observation){var flattenedObservation={};return _.isEmpty(observation)||findLeafObservations(flattenedObservation,observation),flattenedObservation},flattenObsToArray=function(observations){var flattened=[];return flattened.push.apply(flattened,observations),observations.forEach(function(obs){obs.groupMembers&&obs.groupMembers.length>0&&flattened.push.apply(flattened,flattenObsToArray(obs.groupMembers))}),flattened};return{sortSameConceptsWithObsDateTime:sortSameConceptsWithObsDateTime,flatten:flatten,flattenObsToArray:flattenObsToArray}}();var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.DisplayControl=Bahmni.Common.DisplayControl||{},Bahmni.Common.DisplayControl.Dashboard=Bahmni.Common.DisplayControl.Dashboard||{},angular.module("bahmni.common.displaycontrol.dashboard",[]),angular.module("bahmni.common.displaycontrol.dashboard").directive("dashboard",[function(){var controller=function($scope,$filter){var init=function(){$scope.dashboard=Bahmni.Common.DisplayControl.Dashboard.create($scope.config||{},$filter)},checkDisplayType=function(sections,typeToCheck,index){return sections[index]&&sections[index].displayType&&sections[index].displayType===typeToCheck},isDisplayTypeWrong=function(sections){var allDisplayTypes=["Full-Page","LAYOUT_75_25","LAYOUT_25_75","Half-Page"];return allDisplayTypes.indexOf(sections[0].displayType)<=-1};$scope.isFullPageSection=function(sections){return checkDisplayType(sections,"Full-Page",0)},$scope.hasThreeFourthPageSection=function(sections,index){return checkDisplayType(sections,"LAYOUT_75_25",index)},$scope.isOneFourthPageSection=function(sections){return checkDisplayType(sections,"LAYOUT_25_75",0)},$scope.isHalfPageSection=function(sections){return sections[0]&&(checkDisplayType(sections,"Half-Page",0)||isDisplayTypeWrong(sections)||!sections[0].displayType)},$scope.containsThreeFourthPageSection=function(sections){var hasThreeFourthSection=this.hasThreeFourthPageSection(sections,0)||this.hasThreeFourthPageSection(sections,1);return 1==sections.length?this.hasThreeFourthPageSection(sections,0):hasThreeFourthSection},$scope.filterOdd=function(index){return function(){return index++%2===0}},$scope.filterEven=function(index){return function(){return index++%2===1}};var unbindWatch=$scope.$watch("config",init);$scope.$on("$stateChangeStart",unbindWatch)};return{restrict:"E",controller:controller,templateUrl:"../common/displaycontrols/dashboard/views/dashboard.html",scope:{config:"=",patient:"=",diseaseTemplates:"=",sectionGroups:"=",visitHistory:"=",activeVisitUuid:"=",visitSummary:"=",enrollment:"="}}}]),angular.module("bahmni.common.displaycontrol.dashboard").directive("dashboardSection",function(){var controller=function($scope){$scope.$on("no-data-present-event",function(){$scope.section.isDataAvailable=!$scope.section.hideEmptyDisplayControl})};return{restrict:"E",controller:controller,templateUrl:"../common/displaycontrols/dashboard/views/dashboardSection.html"}}),Bahmni.Common.DisplayControl.Dashboard=function(config,$filter){(config.startDate||config.endDate)&&_.each(config.sections,function(section){section.startDate=config.startDate,section.endDate=config.endDate});var _sections=_.sortBy(_.map(config.sections,function(section){return Bahmni.Common.DisplayControl.Dashboard.Section.create(section,$filter)}),function(section){return section.displayOrder});this.getSectionByType=function(name){return _.find(_sections,function(section){return section.type===name})||{}},this.getSections=function(diseaseTemplates){var sections=_.filter(_sections,function(section){return"diseaseTemplate"!==section.type||_.find(diseaseTemplates,function(diseaseTemplate){return diseaseTemplate.name===section.templateName&&diseaseTemplate.obsTemplates.length>0})});return this.groupSectionsByType(sections)},this.groupSectionsByType=function(sections){var sectionGroups=[[]];for(var sectionId in sections){var section=sections[sectionId],nextSection=sectionId<sections.length?sections[++sectionId]:null,lastElement=sectionGroups.length-1;this.isFullPageSection(section)?(_.isEmpty(sectionGroups[lastElement])&&sectionGroups.pop(),sectionGroups.push([section]),sectionGroups.push([])):sectionGroups=this.groupSectionsIfNotFullPage(section,sectionGroups,lastElement,nextSection)}return sectionGroups},this.isFullPageSection=function(section){return this.checkDisplayType(section,"Full-Page")},this.isThreeFourthPageSection=function(section){return this.checkDisplayType(section,"LAYOUT_75_25")},this.isOneFourthPageSection=function(section){return this.checkDisplayType(section,"LAYOUT_25_75")},this.isHalfPageSection=function(section){return this.checkDisplayType(section,"Half-Page")||this.isDisplayTypeWrong(section)||!section.displayType},this.isDisplayTypeWrong=function(section){var allDisplayTypes=["Full-Page","LAYOUT_75_25","LAYOUT_25_75","Half-Page"];return allDisplayTypes.indexOf(section.displayType)<=-1},this.checkDisplayType=function(section,typeToCheck){return section&&section.displayType&&section.displayType===typeToCheck},this.groupSectionsIfNotFullPage=function(section,sectionGroups,lastElement,nextSection){var lastSection=sectionGroups[lastElement],lastSectionIndex=_.isEmpty(lastSection)?0:lastSection.length-1;return sectionGroups=this.isThreeFourthPageSection(section)?this.groupThreeFourthPageSection(lastSection,lastElement,lastSectionIndex,section,sectionGroups):this.isOneFourthPageSection(section)?this.groupOneFourthPageSection(lastSection,lastElement,lastSectionIndex,section,sectionGroups,nextSection):this.groupHalfPageSection(lastSection,lastElement,lastSectionIndex,section,sectionGroups)},this.groupThreeFourthPageSection=function(lastSection,lastElement,lastSectionIndex,section,sectionGroups){var lastSectionLength=lastSection.length,isLastSectionOneFourth=1==lastSectionLength&&this.isOneFourthPageSection(lastSection[lastSectionIndex]);return _.isEmpty(lastSection)||isLastSectionOneFourth?sectionGroups[lastElement].push(section):sectionGroups.push([section]),sectionGroups},this.groupOneFourthPageSection=function(lastSection,lastElement,lastSectionIndex,section,sectionGroups,nextSection){return this.addOneFourthElementToLastSection(lastSection,lastElement,lastSectionIndex,nextSection)?sectionGroups[lastElement].push(section):sectionGroups.push([section]),sectionGroups},this.addOneFourthElementToLastSection=function(lastSection,lastElement,lastSectionIndex,nextSection){var lastSectionLength=lastSection.length,isNextSectionThreeFourth=!!nextSection&&this.isThreeFourthPageSection(nextSection),isLastSectionNotThreeFourth=!this.isThreeFourthPageSection(lastSection[lastSectionIndex])&&!this.isThreeFourthPageSection(lastSection[0]);return lastSection.length<=1&&(this.isThreeFourthPageSection(lastSection[0])||!isNextSectionThreeFourth)||lastSectionLength>=2&&isLastSectionNotThreeFourth&&!isNextSectionThreeFourth},this.groupHalfPageSection=function(lastSection,lastElement,lastSectionIndex,section,sectionGroups){var lastSectionLength=lastSection.length,isLastSectionNotThreeFourth=!this.isThreeFourthPageSection(lastSection[lastSectionIndex])&&!this.isThreeFourthPageSection(lastSection[0]);return _.isEmpty(lastSection)||lastSectionLength>2||isLastSectionNotThreeFourth?sectionGroups[lastElement].push(section):sectionGroups.push([section]),sectionGroups}},Bahmni.Common.DisplayControl.Dashboard.create=function(config,$filter){return new Bahmni.Common.DisplayControl.Dashboard(config,$filter)},function(){var OBSERVATION_SECTION_URL="../common/displaycontrols/dashboard/views/sections/observationSection.html",COMMON_DISPLAY_CONTROL_URL="../common/displaycontrols/dashboard/views/sections/SECTION_NAME.html",CLINICAL_DISPLAY_CONTROL_URL="../clinical/dashboard/views/dashboardSections/SECTION_NAME.html",commonDisplayControlNames=["admissionDetails","bacteriologyResultsControl","chronicTreatmentChart","custom","diagnosis","disposition","drugOrderDetails","forms","observationGraph","obsToObsFlowSheet","pacsOrders","patientInformation","conditionsList"],getViewUrl=function(section){if(section.isObservation)return OBSERVATION_SECTION_URL;var isCommonDisplayControl=_.includes(commonDisplayControlNames,section.type);return isCommonDisplayControl?COMMON_DISPLAY_CONTROL_URL.replace("SECTION_NAME",section.type):CLINICAL_DISPLAY_CONTROL_URL.replace("SECTION_NAME",section.type)},getId=function(section,$filter){if("custom"!==section.type){var key=section.translationKey||section.title;return!_.isUndefined($filter)&&key?$filter("titleTranslate")(key).toValidId():key}};Bahmni.Common.DisplayControl.Dashboard.Section=function(section,$filter){angular.extend(this,section),this.displayOrder=section.displayOrder,this.data=section.data||{},this.isObservation=!!section.isObservation,this.patientAttributes=section.patientAttributes||[],this.viewName=getViewUrl(this),this.hideEmptyDisplayControl=void 0!=section.hideEmptyDisplayControl&&section.hideEmptyDisplayControl,this.isDataAvailable=!0,this.id=getId(this,$filter)},Bahmni.Common.DisplayControl.Dashboard.Section.create=function(section,$filter){return new Bahmni.Common.DisplayControl.Dashboard.Section(section,$filter)}}(),angular.module("bahmni.common.displaycontrol.dashboard").controller("PatientDashboardDiagnosisController",["$scope","ngDialog",function($scope,ngDialog){$scope.section=$scope.dashboard.getSectionByType("diagnosis")||{},$scope.openSummaryDialog=function(){ngDialog.open({template:"../common/displaycontrols/dashboard/views/sections/diagnosisSummary.html",className:"ngdialog-theme-default ng-dialog-all-details-page",scope:$scope})};var cleanUpListener=$scope.$on("ngDialog.closing",function(){$("body").removeClass("ngdialog-open")});$scope.$on("$destroy",cleanUpListener)}]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.DisplayControl=Bahmni.Common.DisplayControl||{},Bahmni.Common.DisplayControl.Observation=Bahmni.Common.DisplayControl.Observation||{},angular.module("bahmni.common.displaycontrol.observation",["bahmni.common.conceptSet","pascalprecht.translate"]),angular.module("bahmni.common.displaycontrol.observation").service("formHierarchyService",["formService",function(formService){var self=this;self.build=function(observations){var obs=self.preProcessMultipleSelectObsToObs(observations);obs=self.createDummyObsGroupForObservationsForForm(obs),self.createDummyObsGroupForSectionsForForm(obs)},self.preProcessMultipleSelectObsToObs=function(observations){return _.forEach(observations,function(obs){_.forEach(obs.value,function(value,index){"multiSelect"==value.type&&(obs.value.push(value.groupMembers[0]),obs.value.splice(index,1))})}),observations},self.createDummyObsGroupForObservationsForForm=function(observations){return _.forEach(observations,function(obs){var newValues=[];_.forEach(obs.value,function(value){if(!value.formFieldPath)return void newValues.push(value);var dummyObsGroup={groupMembers:[],concept:{shortName:"",conceptClass:null},encounterUuid:""};dummyObsGroup.concept.shortName=value.formFieldPath.split(".")[0],dummyObsGroup.encounterUuid=value.encounterUuid;var previousDummyObsGroupFound;_.forEach(newValues,function(newValue){dummyObsGroup.concept.shortName==newValue.concept.shortName&&(newValue.groupMembers.push(value),previousDummyObsGroupFound=!0)}),previousDummyObsGroupFound||(dummyObsGroup.groupMembers.push(value),newValues.push(dummyObsGroup))}),obs.value=newValues}),observations},self.getFormVersion=function(members){var formVersion;return _.forEach(members,function(member){if(member.formFieldPath)return formVersion=member.formFieldPath.split(".")[1].split("/")[0],!1}),formVersion},self.getMemberFromFormByFormFieldPath=function(members,id){return _.filter(members,function(member){return member.formFieldPath.split(".")[1].split("/")[1].split("-")[0]==id})},self.getFormByFormName=function(formList,formName,formVersion){return _.find(formList,function(form){return form.name==formName&&form.version==formVersion})},self.parseSection=function(members,controls,value){var sectionIsEmpty=!0;return _.forEach(controls,function(control){var dummyObsGroup={groupMembers:[],concept:{shortName:"",conceptClass:null}};if("section"==control.type)dummyObsGroup.concept.shortName=control.label.value,value.groupMembers.push(dummyObsGroup),self.parseSection(members,control.controls,dummyObsGroup)?sectionIsEmpty=!1:value.groupMembers.pop();else{var member=self.getMemberFromFormByFormFieldPath(members,control.id);0!=member.length&&(0!=member[0].formFieldPath.split("-")[1]&&_.reverse(member),_.map(member,function(m){value.groupMembers.push(m)}),sectionIsEmpty=!1)}}),sectionIsEmpty?null:value},self.createSectionForSingleForm=function(obsFromSameForm,formDetails){var members=obsFromSameForm.groupMembers.slice();return obsFromSameForm.groupMembers.splice(0,obsFromSameForm.groupMembers.length),self.parseSection(members,formDetails.controls,obsFromSameForm)},self.createDummyObsGroupForSectionsForForm=function(bahmniObservations){_.isEmpty(bahmniObservations)||formService.getAllForms().then(function(response){var allForms=response.data;_.forEach(bahmniObservations,function(observation){var forms=[];_.forEach(observation.value,function(form){if(form.concept.conceptClass)return void forms.push(form);var observationForm=self.getFormByFormName(allForms,form.concept.shortName,self.getFormVersion(form.groupMembers));observationForm&&formService.getFormDetail(observationForm.uuid,{v:"custom:(resources:(value))"}).then(function(response){var formDetailsAsString=_.get(response,"data.resources[0].value");if(formDetailsAsString){var formDetails=JSON.parse(formDetailsAsString);forms.push(self.createSectionForSingleForm(form,formDetails))}observation.value=forms})})})})}}]),angular.module("bahmni.common.displaycontrol.observation").directive("bahmniObservation",["observationsService","appService","$q","spinner","$rootScope","formHierarchyService","$translate",function(observationsService,appService,$q,spinner,$rootScope,formHierarchyService,$translate){var controller=function($scope){$scope.displayNepaliDates=appService.getAppDescriptor().getConfigValue("displayNepaliDates"),$scope.print=$rootScope.isBeingPrinted||!1,$scope.showGroupDateTime=$scope.config.showGroupDateTime!==!1;var mapObservation=function(observations){var conceptsConfig=appService.getAppDescriptor().getConfigValue("conceptSetUI")||{};observations=(new Bahmni.Common.Obs.ObservationMapper).map(observations,conceptsConfig),$scope.config.conceptNames&&(observations=_.filter(observations,function(observation){return _.some($scope.config.conceptNames,function(conceptName){return _.toLower(conceptName)===_.toLower(_.get(observation,"concept.name"))})})),$scope.config.persistOrderOfConcepts?$scope.bahmniObservations=(new Bahmni.Common.DisplayControl.Observation.GroupingFunctions).persistOrderOfConceptNames(observations):$scope.bahmniObservations=(new Bahmni.Common.DisplayControl.Observation.GroupingFunctions).groupByEncounterDate(observations),_.isEmpty($scope.bahmniObservations)?($scope.noObsMessage=$translate.instant(Bahmni.Common.Constants.messageForNoObservation),$scope.$emit("no-data-present-event")):$scope.showGroupDateTime?$scope.bahmniObservations[0].isOpen=!0:_.forEach($scope.bahmniObservations,function(bahmniObs){bahmniObs.isOpen=!0});var formObservations=_.filter(observations,function(obs){return obs.formFieldPath});formObservations.length>0&&formHierarchyService.build($scope.bahmniObservations)},fetchObservations=function(){if($scope.observations)mapObservation($scope.observations,$scope.config),$scope.isFulfilmentDisplayControl=!0;else if($scope.config.observationUuid)$scope.initialization=observationsService.getByUuid($scope.config.observationUuid).then(function(response){mapObservation([response.data],$scope.config)});else if($scope.config.encounterUuid){var fetchForEncounter=observationsService.fetchForEncounter($scope.config.encounterUuid,$scope.config.conceptNames);$scope.initialization=fetchForEncounter.then(function(response){mapObservation(response.data,$scope.config)})}else $scope.enrollment?$scope.initialization=observationsService.fetchForPatientProgram($scope.enrollment,$scope.config.conceptNames,$scope.config.scope,$scope.config.obsIgnoreList).then(function(response){mapObservation(response.data,$scope.config)}):$scope.initialization=observationsService.fetch($scope.patient.uuid,$scope.config.conceptNames,$scope.config.scope,$scope.config.numberOfVisits,$scope.visitUuid,$scope.config.obsIgnoreList,null).then(function(response){mapObservation(response.data,$scope.config)})};$scope.toggle=function(element){element.isOpen=!element.isOpen},$scope.isClickable=function(){return $scope.isOnDashboard&&$scope.section.expandedViewConfig&&($scope.section.expandedViewConfig.pivotTable||$scope.section.expandedViewConfig.observationGraph)},fetchObservations(),$scope.dialogData={patient:$scope.patient,section:$scope.section}},link=function($scope,element){$scope.initialization&&spinner.forPromise($scope.initialization,element)};return{restrict:"E",controller:controller,link:link,templateUrl:"../common/displaycontrols/observation/views/observationDisplayControl.html",scope:{patient:"=",visitUuid:"@",section:"=?",config:"=",title:"=sectionTitle",isOnDashboard:"=?",observations:"=?",message:"=?",enrollment:"=?"}}}]),angular.module("bahmni.common.displaycontrol.observation").controller("AllObservationDetailsController",["$scope",function($scope){$scope.patient=$scope.ngDialogData.patient,$scope.section=$scope.ngDialogData.section,$scope.config=$scope.ngDialogData.section?$scope.ngDialogData.section.expandedViewConfig:{}}]),Bahmni.Common.DisplayControl.Observation.GroupingFunctions=function(){var self=this,observationGroupingFunction=function(obs){return Bahmni.Common.Util.DateUtil.getDateTimeWithoutSeconds(obs.encounterDateTime)};return self.groupByEncounterDate=function(bahmniObservations){var obsArray=[];bahmniObservations=_.groupBy(bahmniObservations,observationGroupingFunction);var sortWithInAConceptDateCombination=function(anObs,challengerObs){return anObs.encounterDateTime<challengerObs.encounterDateTime?1:anObs.encounterDateTime>challengerObs.encounterDateTime?-1:anObs.conceptSortWeight<challengerObs.conceptSortWeight?-1:anObs.conceptSortWeight>challengerObs.conceptSortWeight?1:0};for(var obsKey in bahmniObservations){var dateTime=obsKey,anObs={key:dateTime,value:bahmniObservations[dateTime].sort(sortWithInAConceptDateCombination),date:dateTime};obsArray.push(anObs)}return _.sortBy(obsArray,"date").reverse()},self.persistOrderOfConceptNames=function(bahmniObservations){var obsArray=[];for(var obsKey in bahmniObservations){var anObs={key:obsKey,value:[bahmniObservations[obsKey]],date:bahmniObservations[obsKey].encounterDateTime};obsArray.push(anObs)}return obsArray},self};var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.DisplayControl=Bahmni.Common.DisplayControl||{},Bahmni.Common.DisplayControl.Disposition=Bahmni.Common.DisplayControl.Disposition||{},angular.module("bahmni.common.displaycontrol.disposition",[]),angular.module("bahmni.common.displaycontrol.disposition").directive("disposition",["dispositionService","spinner","appService",function(dispositionService,spinner,appService){var controller=function($scope){$scope.displayNepaliDates=appService.getAppDescriptor().getConfigValue("displayNepaliDates");var fetchDispositionByPatient=function(patientUuid,numOfVisits){return dispositionService.getDispositionByPatient(patientUuid,numOfVisits).then(handleDispositionResponse)},handleDispositionResponse=function(response){$scope.dispositions=response.data,_.isEmpty($scope.dispositions)&&($scope.noDispositionsMessage=Bahmni.Common.Constants.messageForNoDisposition,$scope.$emit("no-data-present-event"))},fetchDispositionsByVisit=function(visitUuid){return dispositionService.getDispositionByVisit(visitUuid).then(handleDispositionResponse)};$scope.getNotes=function(disposition){return disposition.additionalObs[0]&&disposition.additionalObs[0].value?disposition.additionalObs[0].value:""},$scope.showDetailsButton=function(disposition){return!$scope.getNotes(disposition)&&$scope.params.showDetailsButton},$scope.toggle=function(element){return $scope.showDetailsButton(element)?element.show=!element.show:element.show=!0,!1},$scope.visitUuid?$scope.fetchDispositionPromise=fetchDispositionsByVisit($scope.visitUuid):$scope.params.numberOfVisits&&$scope.patientUuid&&($scope.fetchDispositionPromise=fetchDispositionByPatient($scope.patientUuid,$scope.params.numberOfVisits))},link=function(scope,element){spinner.forPromise(scope.fetchDispositionPromise,element)};return{restrict:"E",controller:controller,link:link,templateUrl:"../common/displaycontrols/disposition/views/disposition.html",scope:{params:"=",patientUuid:"=?",visitUuid:"=?"}}}]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.DisplayControl=Bahmni.Common.DisplayControl||{},Bahmni.Common.DisplayControl.AdmissionDetails=Bahmni.Common.DisplayControl.AdmissionDetails||{},angular.module("bahmni.common.displaycontrol.admissiondetails",[]),angular.module("bahmni.common.displaycontrol.admissiondetails").directive("admissionDetails",["bedService","appService",function(bedService,appService){var controller=function($scope){$scope.displayNepaliDates=appService.getAppDescriptor().getConfigValue("displayNepaliDates"),$scope.showDetailsButton=function(encounter){return $scope.params&&$scope.params.showDetailsButton&&!encounter.notes},$scope.toggle=function(element){element.show=!element.show},init($scope)},isReady=function($scope){return!_.isUndefined($scope.patientUuid)&&!_.isUndefined($scope.visitSummary)},onReady=function($scope){var visitUuid=_.get($scope.visitSummary,"uuid");bedService.getAssignedBedForPatient($scope.patientUuid,visitUuid).then(function(bedDetails){
$scope.bedDetails=bedDetails})},init=function($scope){var stopWatching=$scope.$watchGroup(["patientUuid","visitSummary"],function(){isReady($scope)&&(stopWatching(),onReady($scope))});$scope.isDataPresent=function(){return!(!$scope.visitSummary||!$scope.visitSummary.admissionDetails&&!$scope.visitSummary.dischargeDetails)||$scope.$emit("no-data-present-event")&&!1}};return{restrict:"E",controller:controller,templateUrl:"../common/displaycontrols/admissiondetails/views/admissionDetails.html",scope:{params:"=",patientUuid:"=",visitSummary:"="}}}]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.DisplayControl=Bahmni.Common.DisplayControl||{},Bahmni.Common.DisplayControl.PatientProfile=Bahmni.Common.DisplayControl.PatientProfile||{},angular.module("bahmni.common.displaycontrol.patientprofile",[]),angular.module("bahmni.common.displaycontrol.patientprofile").filter("titleCase",function(){return function(input){return input=input||"",input.replace(/\w\S*/g,function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase()})}}),angular.module("bahmni.common.displaycontrol.patientprofile").filter("booleanFilter",function(){return function(value){return value===!0?"Yes":value===!1?"No":value}}),function(){var getAddress=function($scope){var patient=$scope.patient,address=[];return void 0!=$scope.config.addressFields&&0!=$scope.config.addressFields.length?$scope.config.addressFields.forEach(function(addressField){patient.address[addressField]&&address.push(patient.address[addressField])}):_.includes($scope.config,"cityVillage")||address.push(patient.address.cityVillage),address.join(", ")},getPatientAttributeTypes=function($scope){var patient=$scope.patient;$scope.config.hasOwnProperty("ageLimit")&&patient.age>=$scope.config.ageLimit&&(patient.ageText=patient.age.toString()+" <span> years </span>");var patientAttributeTypes=[patient.genderText,patient.ageText];return patient.bloodGroupText&&patientAttributeTypes.push(patient.bloodGroupText),patientAttributeTypes.join(", ")},isAdmitted=function(admissionStatus){return"Admitted"===_.get(admissionStatus,"value")};angular.module("bahmni.common.displaycontrol.patientprofile").directive("patientProfile",["patientService","spinner","$sce","$rootScope","$stateParams","$window","$translate","configurations","$q","visitService","sessionService","bedService",function(patientService,spinner,$sce,$rootScope,$stateParams,$window,$translate,configurations,$q,visitService,sessionService,bedService){var controller=function($scope,sessionService){$scope.isProviderRelationship=function(relationship){return _.includes($rootScope.relationshipTypeMap.provider,relationship.relationshipType.aIsToB)},$scope.openPatientDashboard=function(patientUuid){var configName=$stateParams.configName||Bahmni.Common.Constants.defaultExtensionName;$window.open("../clinical/#/"+configName+"/patient/"+patientUuid+"/dashboard")};var assignPatientDetails=function(){var patientMapper=new Bahmni.PatientMapper(configurations.patientConfig(),$rootScope,$translate);return patientService.getPatient($scope.patientUuid).then(function(response){var openMrsPatient=response.data;$scope.patient=patientMapper.map(openMrsPatient)})},assignRelationshipDetails=function(){return patientService.getRelationships($scope.patientUuid).then(function(response){$scope.relationships=response.data.results})},assignAdmissionDetails=function(){var REP="custom:(attributes:(value,attributeType:(display,name)))",ADMISSION_STATUS_ATTRIBUTE="Admission Status";return visitService.getVisit($scope.visitUuid,REP).then(function(response){var attributes=response.data.attributes,admissionStatus=_.find(attributes,{attributeType:{name:ADMISSION_STATUS_ATTRIBUTE}});$scope.hasBeenAdmitted=isAdmitted(admissionStatus)})},setHasBeenAdmittedOnVisitUuidChange=function(){$scope.$watch("visitUuid",function(visitUuid){_.isEmpty(visitUuid)||(assignAdmissionDetails(),getBedNumber($scope.patientUuid,visitUuid))})},getBedNumber=function(patientUuid,visitUuid){bedService.getAssignedBedForPatient(patientUuid,visitUuid).then(function(bedDetails){$scope.bedDetails=bedDetails})},setDirectiveAsReady=function(){$scope.isDirectiveReady=!0},onDirectiveReady=function(){$scope.addressLine=getAddress($scope),$scope.patientAttributeTypes=$sce.trustAsHtml(getPatientAttributeTypes($scope)),$scope.showBirthDate=$scope.config.showDOB!==!1,$scope.showBirthDate=$scope.showBirthDate&&!!$scope.patient.birthdate},initPromise=$q.all([assignPatientDetails(),assignRelationshipDetails()]);initPromise.then(onDirectiveReady),initPromise.then(setHasBeenAdmittedOnVisitUuidChange),initPromise.then(setDirectiveAsReady),$scope.initialization=initPromise},link=function($scope,element){spinner.forPromise($scope.initialization,element)};return{restrict:"E",controller:controller,link:link,scope:{patientUuid:"@",visitUuid:"@",config:"="},templateUrl:"../common/displaycontrols/patientprofile/views/patientProfile.html"}}])}();var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.DisplayControl=Bahmni.Common.DisplayControl||{},Bahmni.Common.DisplayControl.Diagnosis=Bahmni.Common.DisplayControl.Diagnosis||{},angular.module("bahmni.common.displaycontrol.diagnosis",[]),angular.module("bahmni.common.displaycontrol.diagnosis").filter("primaryDiagnosisFirst",function(){return function(diagnoses){var primaryDiagnoses=_.filter(diagnoses,function(diagnosis){return diagnosis.isPrimary()}),otherDiagnoses=_.filter(diagnoses,function(diagnosis){return!diagnosis.isPrimary()});return primaryDiagnoses.concat(otherDiagnoses)}}),angular.module("bahmni.common.displaycontrol.diagnosis").directive("bahmniDiagnosis",["diagnosisService","$q","spinner","$rootScope","$filter","appService",function(diagnosisService,$q,spinner,$rootScope,$filter,appService){var controller=function($scope){$scope.displayNepaliDates=appService.getAppDescriptor().getConfigValue("displayNepaliDates");var getAllDiagnosis=function(){return diagnosisService.getDiagnoses($scope.patientUuid,$scope.visitUuid).then(function(response){var diagnosisMapper=new Bahmni.DiagnosisMapper($rootScope.diagnosisStatus);$scope.allDiagnoses=diagnosisMapper.mapDiagnoses(response.data),0==$scope.showRuledOutDiagnoses&&($scope.allDiagnoses=_.filter($scope.allDiagnoses,function(diagnoses){return diagnoses.diagnosisStatus!==$rootScope.diagnosisStatus})),$scope.isDataPresent=function(){return!$scope.allDiagnoses||0!=$scope.allDiagnoses.length||($scope.$emit("no-data-present-event"),!1)}})};$scope.title=$scope.config.title,$scope.toggle=function(diagnosis,toggleLatest){toggleLatest?(diagnosis.showDetails=!1,diagnosis.showLatestDetails=!diagnosis.showLatestDetails):(diagnosis.showLatestDetails=!1,diagnosis.showDetails=!diagnosis.showDetails)};var getPromises=function(){return[getAllDiagnosis()]};$scope.isLatestDiagnosis=function(diagnosis){return!!diagnosis.latestDiagnosis&&diagnosis.existingObs==diagnosis.latestDiagnosis.existingObs},$scope.initialization=$q.all(getPromises())},link=function($scope,element){spinner.forPromise($scope.initialization,element)};return{restrict:"E",controller:controller,link:link,templateUrl:"../common/displaycontrols/diagnosis/views/diagnosisDisplayControl.html",scope:{patientUuid:"=",config:"=",visitUuid:"=?",showRuledOutDiagnoses:"=?",hideTitle:"=?",showLatestDiagnosis:"@showLatestDiagnosis"}}}]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.DisplayControl=Bahmni.Common.DisplayControl||{},Bahmni.Common.DisplayControl.navigationLinks=Bahmni.Common.DisplayControl.navigationLinks||{},angular.module("bahmni.common.displaycontrol.navigationlinks",["ui.router","ui.router.util"]),angular.module("bahmni.common.displaycontrol.navigationlinks").directive("navigationLinks",["$state","appService",function($state,appService){var controller=function($scope){(!$scope.params.showLinks&&!$scope.params.customLinks||$scope.params.showLinks&&$scope.params.customLinks&&0==$scope.params.showLinks.length&&0==$scope.params.customLinks.length)&&($scope.noNavigationLinksMessage=Bahmni.Common.Constants.noNavigationLinksMessage),$scope.standardLinks=[{name:"home",translationKey:"HOME_DASHBOARD_KEY",url:"../home/#/dashboard"},{name:"visit",url:"../clinical/#/default/patient/{{patientUuid}}/dashboard/visit/{{visitUuid}}/?encounterUuid=active",translationKey:"PATIENT_VISIT_PAGE_KEY"},{name:"inpatient",translationKey:"PATIENT_ADT_PAGE_KEY",url:"../adt/#/patient/{{patientUuid}}/visit/{{visitUuid}}/"},{name:"enrolment",translationKey:"PROGRAM_MANAGEMENT_PAGE_KEY",url:"../clinical/#/programs/patient/{{patientUuid}}/consultationContext"},{name:"visitAttribute",translationKey:"PATIENT_VISIT_ATTRIBUTES_PAGE_KEY",url:"../registration/#/patient/{{patientUuid}}/visit"},{name:"registration",translationKey:"PATIENT_REGISTRATION_PAGE_KEY",url:"../registration/#/patient/{{patientUuid}}"}];var filterLinks=function(links,showLinks){var linksSpecifiedInShowLinks=function(){return _.filter(links,function(link){return showLinks.indexOf(link.name)>-1})};return showLinks&&linksSpecifiedInShowLinks()};$scope.getLinks=function(){return _.union(filterLinks($scope.standardLinks,$scope.params.showLinks),$scope.params.customLinks)},$scope.getUrl=function(link){var url=getFormattedURL(link);window.open(url,link.title)},$scope.showUrl=function(link){var isPropertyNotPresentInLinkParams,params=getParamsToBeReplaced(link.url);for(var i in params){var property=params[i];if(isPropertyNotPresentInLinkParams=_.isEmpty($scope.linkParams[property]))return!1}return!0};var getFormattedURL=function(link){return appService.getAppDescriptor().formatUrl(link.url,$scope.linkParams)},getParamsToBeReplaced=function(link){var pattern=/{{([^}]*)}}/g,matches=link.match(pattern),params=[];return matches&&matches.forEach(function(el){var key=el.replace("{{","").replace("}}","");params.push(key)}),params}};return{restrict:"E",controller:controller,templateUrl:"../common/displaycontrols/navigationlinks/views/navigationLinks.html",scope:{params:"=",linkParams:"="}}}]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.DisplayControl=Bahmni.Common.DisplayControl||{},Bahmni.Common.DisplayControl.Custom=Bahmni.Common.DisplayControl.Custom||{},angular.module("bahmni.common.displaycontrol.custom",[]),angular.module("bahmni.common.displaycontrol.custom").directive("customDisplayControl",[function(){return{restrict:"E",template:'<div compile-html="config.template"></div>',scope:{patient:"=",visitUuid:"=",section:"=",config:"=",enrollment:"=",params:"=",visitSummary:"="}}}]);var Bahmni=Bahmni||{};Bahmni.Common=Bahmni.Common||{},Bahmni.Common.I18n=Bahmni.Common.I18n||{},angular.module("bahmni.common.i18n",[]),angular.module("bahmni.common.i18n",["pascalprecht.translate"]).provider("$bahmniTranslate",["$translateProvider",function($translateProvider){this.init=function(options){var preferredLanguage=window.localStorage.NG_TRANSLATE_LANG_KEY||"en";$translateProvider.useLoader("mergeLocaleFilesService",options),$translateProvider.useSanitizeValueStrategy("escaped"),$translateProvider.preferredLanguage(preferredLanguage),$translateProvider.useLocalStorage()},this.$get=[function(){return $translateProvider}]}]).filter("titleTranslate",["$translate",function($translate){return function(input){return input?input.translationKey?$translate.instant(input.translationKey):input.dashboardName?input.dashboardName:input.title?input.title:input.label?input.label:input.display?input.display:$translate.instant(input):input}}]),angular.module("bahmni.common.i18n").service("mergeLocaleFilesService",["$http","$q","mergeService",function($http,$q,mergeService){return function(options){var baseLocaleUrl="../i18n/",customLocaleUrl=Bahmni.Common.Constants.rootDir+"/bahmni_config/openmrs/i18n/",loadFile=function(url){return $http.get(url,{withCredentials:!0})},mergeLocaleFile=function(options){var fileURL=options.app+"/locale_"+options.key+".json",loadBahmniTranslations=function(){return loadFile(baseLocaleUrl+fileURL).then(function(result){return result},function(){})},loadCustomTranslations=function(){return loadFile(customLocaleUrl+fileURL).then(function(result){return result},function(){})},mergeTranslations=function(result){var baseFileData=result[0]?result[0].data:void 0,customFileData=result[1]?result[1].data:void 0;return options.shouldMerge||void 0===options.shouldMerge?mergeService.merge(baseFileData,customFileData):[baseFileData,customFileData]};return $q.all([loadBahmniTranslations(),loadCustomTranslations()]).then(mergeTranslations)};return mergeLocaleFile(options)}}]),angular.module("bahmni.common.services",[]),angular.module("ot",["bahmni.common.patient","bahmni.common.patientSearch","bahmni.common.uiHelper","bahmni.common.conceptSet","authentication","bahmni.common.appFramework","httpErrorInterceptor","bahmni.common.domain","bahmni.ot","bahmni.common.config","ui.router","bahmni.common.util","bahmni.common.routeErrorHandler","bahmni.common.i18n","bahmni.common.displaycontrol.dashboard","bahmni.common.displaycontrol.observation","bahmni.common.displaycontrol.disposition","bahmni.common.displaycontrol.admissiondetails","bahmni.common.displaycontrol.custom","bahmni.common.obs","bahmni.common.displaycontrol.patientprofile","bahmni.common.displaycontrol.diagnosis","RecursionHelper","ngSanitize","bahmni.common.uiHelper","bahmni.common.uicontrols.programmanagment","bahmni.common.displaycontrol.navigationlinks","pascalprecht.translate","bahmni.common.displaycontrol.dashboard","ngCookies","ngDialog","angularFileUpload","monospaced.elastic","dndLists","bahmni.common.services"]),angular.module("ot").config(["$stateProvider","$httpProvider","$urlRouterProvider","$bahmniTranslateProvider","$compileProvider",function($stateProvider,$httpProvider,$urlRouterProvider,$bahmniTranslateProvider,$compileProvider){$urlRouterProvider.otherwise("/home");var homeBackLink={type:"link",name:"Home",value:"../home/",accessKey:"h",icon:"fa-home"},otSchedulingLink={type:"state",name:"OT_SCHEDULING_KEY",value:"otScheduling",accessKey:"b"},queuesLink={type:"state",name:"OT_SURGICAL_QUEUES_KEY",value:"home",accessKey:"b"},navigationLinks=[queuesLink,otSchedulingLink];$compileProvider.debugInfoEnabled(!1),$stateProvider.state("home",{url:"/home",data:{homeBackLink:homeBackLink,navigationLinks:navigationLinks},views:{"additional-header":{templateUrl:"views/header.html"},content:{templateUrl:"../common/patient-search/views/patientsList.html",controller:"PatientsListController"}},resolve:{initialization:"initialization"}}).state("otScheduling",{url:"/otScheduling",data:{homeBackLink:homeBackLink,navigationLinks:navigationLinks},params:{viewDate:null},views:{content:{templateUrl:"views/home.html",controller:"calendarViewController"},"additional-header":{templateUrl:"views/header.html"}},resolve:{initialization:"initialization"}}).state("newSurgicalAppointment",{url:"/surgicalblock/new",data:{homeBackLink:homeBackLink,navigationLinks:navigationLinks},params:{dashboardCachebuster:null,context:null},views:{content:{templateUrl:"views/surgicalBlock.html",controller:"surgicalBlockController"},"additional-header":{templateUrl:"views/header.html"}},resolve:{initialization:"initialization"}}).state("editSurgicalAppointment",{url:"/surgicalblock/:surgicalBlockUuid/edit",data:{homeBackLink:homeBackLink,navigationLinks:navigationLinks},params:{dashboardCachebuster:null,surgicalAppointmentId:null},views:{content:{templateUrl:"views/surgicalBlock.html",controller:"surgicalBlockController"},"additional-header":{templateUrl:"views/header.html"}},resolve:{initialization:"initialization"}}),$bahmniTranslateProvider.init({app:"ot",shouldMerge:!0})}]);var Bahmni=Bahmni||{};Bahmni.OT=Bahmni.OT||{},angular.module("bahmni.ot",["bahmni.common.conceptSet","bahmni.common.logging"]);var Bahmni=Bahmni||{};Bahmni.OT=Bahmni.OT||{},Bahmni.OT.Constants=function(){var RESTWS_V1="/openmrs/ws/rest/v1";return{cancelled:"CANCELLED",postponed:"POSTPONED",completed:"COMPLETED",scheduled:"SCHEDULED",addSurgicalBlockUrl:RESTWS_V1+"/surgicalBlock",updateSurgicalAppointmentUrl:RESTWS_V1+"/surgicalAppointment",surgicalAppointmentAttributeTypeUrl:RESTWS_V1+"/surgicalAppointmentAttributeType",defaultCalendarEndTime:"23:59",defaultCalendarStartTime:"00:00"}}(),angular.module("bahmni.ot").factory("initialization",["$rootScope","$q","surgicalAppointmentHelper","appService","surgicalAppointmentService","authenticator","spinner",function($rootScope,$q,surgicalAppointmentHelper,appService,surgicalAppointmentService,authenticator,spinner){var initApp=function(){return appService.initApp("ot",{app:!0,extension:!0}).then(function(data){var providerNames=data.getConfigValue("primarySurgeonsForOT");return $q.all([surgicalAppointmentService.getSurgeons(),surgicalAppointmentService.getSurgicalAppointmentAttributeTypes()]).then(function(response){return $rootScope.surgeons=surgicalAppointmentHelper.filterProvidersByName(providerNames,response[0].data.results),$rootScope.attributeTypes=response[1].data.results,response})})};return spinner.forPromise(authenticator.authenticateUser().then(initApp))}]),angular.module("bahmni.ot").service("surgicalAppointmentHelper",[function(){this.filterProvidersByName=function(providerNames,providers){var validProviderNames=_.filter(providerNames,function(providerName){return _.find(providers,function(provider){return providerName===provider.person.display})});return _.map(validProviderNames,function(providerName){return _.find(providers,function(provider){return providerName===provider.person.display})})},this.getPatientDisplayLabel=function(display){return display.split(" - ")[1]+" ( "+display.split(" - ")[0]+" )"},this.getAppointmentAttributes=function(surgicalAppointment){return _.reduce(surgicalAppointment.surgicalAppointmentAttributes,function(attributes,attribute){return attributes[attribute.surgicalAppointmentAttributeType.name]=attribute.value,attributes},{})},this.getEstimatedDurationForAppointment=function(surgicalAppointment){var attributes=this.getAppointmentAttributes(surgicalAppointment);return this.getAppointmentDuration(attributes.estTimeHours,attributes.estTimeMinutes,attributes.cleaningTime)},this.getAppointmentDuration=function(estTimeHours,estTimeMinutes,cleaningTime){return 60*estTimeHours+(parseInt(estTimeMinutes)||0)+(parseInt(cleaningTime)||0)},this.filterSurgicalAppointmentsByStatus=function(surgicalAppointments,appointmentStatusList){return _.isEmpty(appointmentStatusList)?surgicalAppointments:_.filter(surgicalAppointments,function(appointment){return appointmentStatusList.indexOf(appointment.status)>=0})},this.filterSurgicalAppointmentsByPatient=function(surgicalAppointments,patient){return patient?_.filter(surgicalAppointments,function(appointment){return appointment.patient.uuid===patient.uuid}):surgicalAppointments}}]),angular.module("bahmni.ot").service("surgicalBlockHelper",["surgicalAppointmentHelper",function(surgicalAppointmentHelper){this.getAvailableBlockDuration=function(surgicalBlock){var blockDuration=Bahmni.Common.Util.DateUtil.diffInMinutes(surgicalBlock.startDatetime,surgicalBlock.endDatetime),appointmentsDuration=_.sumBy(_.reject(surgicalBlock.surgicalAppointments,function(appointment){return"POSTPONED"==appointment.status||"CANCELLED"==appointment.status}),function(surgicalAppointment){return surgicalAppointmentHelper.getAppointmentDuration(surgicalAppointment.surgicalAppointmentAttributes.estTimeHours.value,surgicalAppointment.surgicalAppointmentAttributes.estTimeMinutes.value,surgicalAppointment.surgicalAppointmentAttributes.cleaningTime.value)});return blockDuration-appointmentsDuration}}]),angular.module("bahmni.ot").directive("backLinksCacheBuster",["$state","$window",function($state,$window){var controller=function($scope,$state,$window){$scope.navigationLinks=$state.current.data.navigationLinks,$scope.homeBackLink=$state.current.data.homeBackLink,$scope.isCurrentState=function(link){if($state.current.name===link.value)return!0},$scope.linkAction=function(type,value,params){"state"===type?onClickState(value,params):$window.location.href=value};var onClickState=function(value,params){params||(params={}),params.dashboardCachebuster=Math.random(),$state.go(value,params)}};return{restrict:"E",controller:controller,templateUrl:"views/backLinks.html",scope:{type:"=",name:"=",value:"=",params:"=",icon:"=",accessKey:"="}}}]),angular.module("bahmni.ot").controller("surgicalBlockController",["$scope","$q","$state","$stateParams","spinner","surgicalAppointmentService","locationService","appService","messagingService","surgicalAppointmentHelper","surgicalBlockHelper","ngDialog",function($scope,$q,$state,$stateParams,spinner,surgicalAppointmentService,locationService,appService,messagingService,surgicalAppointmentHelper,surgicalBlockHelper,ngDialog){var init=function(){$scope.surgicalForm={surgicalAppointments:[]};var providerNamesFromConfig=appService.getAppDescriptor().getConfigValue("primarySurgeonsForOT");return $q.all([surgicalAppointmentService.getSurgeons(),locationService.getAllByTag("Operation Theater"),surgicalAppointmentService.getSurgicalAppointmentAttributeTypes()]).then(function(response){return $scope.surgeons=surgicalAppointmentHelper.filterProvidersByName(providerNamesFromConfig,response[0].data.results),$scope.locations=response[1].data.results,$scope.attributeTypes=response[2].data.results,$stateParams.surgicalBlockUuid?surgicalAppointmentService.getSurgicalBlockFor($stateParams.surgicalBlockUuid).then(function(response){$scope.surgicalForm=(new Bahmni.OT.SurgicalBlockMapper).map(response.data,$scope.attributeTypes,$scope.surgeons),$scope.surgicalForm.surgicalAppointments=surgicalAppointmentHelper.filterSurgicalAppointmentsByStatus($scope.surgicalForm.surgicalAppointments,[Bahmni.OT.Constants.scheduled,Bahmni.OT.Constants.completed]);var selectedSurgicalAppointment=_.find($scope.surgicalForm.surgicalAppointments,function(appointment){return appointment.id===$stateParams.surgicalAppointmentId});return selectedSurgicalAppointment&&$scope.editAppointment(selectedSurgicalAppointment),getAvailableBlockDurationInHoursAndMinutesFormat(),response}):response})},getAppointmentDuration=function(surgicalAppointment){return surgicalAppointmentHelper.getAppointmentDuration(surgicalAppointment.surgicalAppointmentAttributes.estTimeHours.value,surgicalAppointment.surgicalAppointmentAttributes.estTimeMinutes.value,surgicalAppointment.surgicalAppointmentAttributes.cleaningTime.value)},getAvailableBlockDuration=function(){return surgicalBlockHelper.getAvailableBlockDuration($scope.surgicalForm)};$scope.getPatientName=function(surgicalAppointment){return surgicalAppointment.patient.value||surgicalAppointmentHelper.getPatientDisplayLabel(surgicalAppointment.patient.display)},$scope.editAppointment=function(surgicalAppointment){_.forEach($scope.surgicalForm.surgicalAppointments,function(surgicalAppointment){delete surgicalAppointment.isBeingEdited});var clone=_.cloneDeep(surgicalAppointment);surgicalAppointment.isBeingEdited=!0,$scope.addNewSurgicalAppointment(clone)},$scope.isFormValid=function(){return $scope.createSurgicalBlockForm.$valid&&$scope.isStartDatetimeBeforeEndDatetime($scope.surgicalForm.startDatetime,$scope.surgicalForm.endDatetime)},$scope.isStartDatetimeBeforeEndDatetime=function(startDate,endDate){return!startDate||!endDate||startDate<endDate},$scope.save=function(surgicalForm){if(!$scope.isFormValid())return void messagingService.showMessage("error","{{'OT_ENTER_MANDATORY_FIELDS' | translate}}");if(getAvailableBlockDuration()<0)return void messagingService.showMessage("error","{{'OT_SURGICAL_APPOINTMENT_EXCEEDS_BLOCK_DURATION' | translate}}");$scope.updateSortWeight(surgicalForm);var surgicalBlock=(new Bahmni.OT.SurgicalBlockMapper).mapSurgicalBlockUIToDomain(surgicalForm),saveOrupdateSurgicalBlock=_.isEmpty(surgicalBlock.uuid)?surgicalAppointmentService.saveSurgicalBlock:surgicalAppointmentService.updateSurgicalBlock;spinner.forPromise(saveOrupdateSurgicalBlock(surgicalBlock)).then(function(response){$scope.surgicalForm=(new Bahmni.OT.SurgicalBlockMapper).map(response.data,$scope.attributeTypes,$scope.surgeons),$scope.surgicalForm.surgicalAppointments=surgicalAppointmentHelper.filterSurgicalAppointmentsByStatus($scope.surgicalForm.surgicalAppointments,[Bahmni.OT.Constants.scheduled,Bahmni.OT.Constants.completed]),messagingService.showMessage("info","{{'OT_SAVE_SUCCESS_MESSAGE_KEY' | translate}}"),$state.go("editSurgicalAppointment",{surgicalBlockUuid:response.data.uuid})})};var addOrUpdateTheSurgicalAppointment=function(surgicalAppointment){if(surgicalAppointment.sortWeight>=0){var existingAppointment=_.find($scope.surgicalForm.surgicalAppointments,function(appointment){return appointment.isBeingEdited===!0});existingAppointment.notes=surgicalAppointment.notes,existingAppointment.patient=surgicalAppointment.patient,existingAppointment.surgicalAppointmentAttributes=surgicalAppointment.surgicalAppointmentAttributes,existingAppointment.isBeingEdited=!1}else surgicalAppointment.sortWeight=$scope.surgicalForm.surgicalAppointments.length,$scope.surgicalForm.surgicalAppointments.push(surgicalAppointment)},canBeFittedInTheSurgicalBlock=function(surgicalAppointment){if(surgicalAppointment.sortWeight>=0){var existingAppointment=_.find($scope.surgicalForm.surgicalAppointments,function(appointment){return appointment.sortWeight===surgicalAppointment.sortWeight}),increasedDeltaTime=getAppointmentDuration(surgicalAppointment)-getAppointmentDuration(existingAppointment);return getAvailableBlockDuration()>=increasedDeltaTime}return getAvailableBlockDuration()>=getAppointmentDuration(surgicalAppointment)},checkIfSurgicalAppointmentIsDirty=function(surgicalAppointment){if(surgicalAppointment.id){var savedSurgicalAppointment=_.find($scope.surgicalForm.surgicalAppointments,function(appointment){return appointment.id===surgicalAppointment.id});delete savedSurgicalAppointment.$$hashKey,delete savedSurgicalAppointment.isDirty,surgicalAppointment.isBeingEdited=savedSurgicalAppointment.isBeingEdited,_.isEqual(savedSurgicalAppointment,surgicalAppointment)?savedSurgicalAppointment.isDirty=!1:savedSurgicalAppointment.isDirty=!0}},getAvailableBlockDurationInHoursAndMinutesFormat=function(){var availableBlockDuration=getAvailableBlockDuration();$scope.availableBlockDuration=Math.floor(availableBlockDuration/60)+" hr "+availableBlockDuration%60+" mins"};$scope.addSurgicalAppointment=function(surgicalAppointment){if(canBeFittedInTheSurgicalBlock(surgicalAppointment)){checkIfSurgicalAppointmentIsDirty(surgicalAppointment),addOrUpdateTheSurgicalAppointment(surgicalAppointment),getAvailableBlockDurationInHoursAndMinutesFormat(),ngDialog.close(),surgicalAppointment.isBeingEdited=!1,surgicalAppointment.isDirty=!0;var appointmentIndex;_.find($scope.surgicalForm.surgicalAppointments,function(appointment,index){return appointmentIndex=index,surgicalAppointment.sortWeight===appointment.sortWeight}),$scope.surgicalForm.surgicalAppointments[appointmentIndex]=surgicalAppointment}else messagingService.showMessage("error","{{'OT_SURGICAL_APPOINTMENT_EXCEEDS_BLOCK_DURATION' | translate}}")},$scope.updateSortWeight=function(surgicalBlock){var index=0;_.map(surgicalBlock&&surgicalBlock.surgicalAppointments,function(appointment){return"POSTPONED"!==appointment.status&&"CANCELLED"!==appointment.status&&(appointment.sortWeight=index++),appointment})},$scope.gotoCalendarPage=function(){var options={};options.dashboardCachebuster=Math.random(),$state.go("otScheduling",options)},$scope.cancelSurgicalBlock=function(){ngDialog.open({template:"views/cancelSurgicalBlock.html",closeByDocument:!1,controller:"cancelSurgicalBlockController",className:"ngdialog-theme-default ng-dialog-adt-popUp",showClose:!0,data:{surgicalBlock:(new Bahmni.OT.SurgicalBlockMapper).mapSurgicalBlockUIToDomain($scope.surgicalForm),provider:$scope.surgicalForm.provider.person.display}})},$scope.cancelAppointment=function(surgicalAppointment){surgicalAppointment.isBeingEdited=!0;var clonedAppointment=_.cloneDeep(surgicalAppointment);ngDialog.open({template:"views/cancelAppointment.html",controller:"surgicalBlockViewCancelAppointmentController",closeByDocument:!1,showClose:!0,className:"ngdialog-theme-default ng-dialog-adt-popUp",scope:$scope,data:{surgicalAppointment:clonedAppointment,surgicalForm:$scope.surgicalForm,updateAvailableBlockDurationFn:getAvailableBlockDurationInHoursAndMinutesFormat}})},$scope.cancelDisabled=function(){var surgicalBlockWithCompletedAppointments=function(){return _.find($scope.surgicalForm.surgicalAppointments,function(appointment){return appointment.status===Bahmni.OT.Constants.completed})};return!$scope.surgicalForm.id||surgicalBlockWithCompletedAppointments()},$scope.addNewSurgicalAppointment=function(surgicalAppointment){ngDialog.open({template:"views/surgicalAppointment.html",controller:"NewSurgicalAppointmentController",closeByDocument:!1,className:"ngdialog-theme-default surgical-appointment-dialog",showClose:!0,scope:$scope,data:surgicalAppointment})},$scope.changeInStartDateTime=function(){if(_.isUndefined($scope.surgicalForm.endDatetime)){var calendarConfig=appService.getAppDescriptor().getConfigValue("calendarView"),dayViewEnd=(calendarConfig.dayViewEnd||Bahmni.OT.Constants.defaultCalendarEndTime).split(":");$scope.surgicalForm.endDatetime=Bahmni.Common.Util.DateUtil.addMinutes(moment($scope.surgicalForm.startDatetime).startOf("day").toDate(),60*dayViewEnd[0]+parseInt(dayViewEnd[1]))}},spinner.forPromise(init())}]),angular.module("bahmni.ot").controller("NewSurgicalAppointmentController",["$scope","$q","$window","patientService","surgicalAppointmentService","messagingService","programService","appService","ngDialog","spinner","queryService","programHelper",function($scope,$q,$window,patientService,surgicalAppointmentService,messagingService,programService,appService,ngDialog,spinner,queryService,programHelper){var init=function(){return $scope.selectedPatient=$scope.ngDialogData&&$scope.ngDialogData.patient,$scope.patient=$scope.ngDialogData&&$scope.ngDialogData.patient&&($scope.ngDialogData.patient.value||$scope.ngDialogData.patient.display),$scope.otherSurgeons=_.cloneDeep($scope.surgeons),$q.all([surgicalAppointmentService.getSurgicalAppointmentAttributeTypes()]).then(function(response){$scope.attributeTypes=response[0].data.results;var attributes={},mapAttributes=(new Bahmni.OT.SurgicalBlockMapper).mapAttributes(attributes,$scope.attributeTypes);$scope.attributes=$scope.ngDialogData&&$scope.ngDialogData.surgicalAppointmentAttributes||mapAttributes,$scope.isEditMode()&&programService.getEnrollmentInfoFor($scope.ngDialogData.patient.uuid,"custom:(uuid,dateEnrolled,dateCompleted,program:(uuid),patient:(uuid))").then(function(response){var groupedPrograms=programHelper.groupPrograms(response);$scope.enrollmentInfo=groupedPrograms&&groupedPrograms.activePrograms[0]})})};$scope.isEditMode=function(){return $scope.patient&&$scope.ngDialogData&&$scope.ngDialogData.id},$scope.search=function(){return patientService.search($scope.patient).then(function(response){return response.data.pageOfResults})},$scope.onSelectPatient=function(data){$scope.selectedPatient=data;var sqlGlobalProperty=appService.getAppDescriptor().getConfigValue("procedureSQLGlobalProperty");if(sqlGlobalProperty){var params={patientUuid:data.uuid,q:sqlGlobalProperty,v:"full"};spinner.forPromise(queryService.getResponseFromQuery(params).then(function(response){if(response.data.length){$scope.attributes.procedure.value=response.data[0].all_procedures;var estHrs=response.data[0].esthrs,estMins=response.data[0].estmins;$scope.attributes.estTimeHours.value=estHrs?Math.floor(parseInt(estHrs)+estMins/60):0,$scope.attributes.estTimeMinutes.value=estMins?parseInt(estMins)%60:0}else $scope.attributes.procedure.value="",$scope.attributes.estTimeHours.value=0,$scope.attributes.estTimeMinutes.value=0}))}},$scope.responseMap=function(data){return _.map(data,function(patientInfo){return patientInfo.label=patientInfo.givenName+" "+patientInfo.familyName+" ( "+patientInfo.identifier+" )",
patientInfo})},$scope.createAppointmentAndAdd=function(){if($scope.surgicalAppointmentForm.$valid){var appointment={id:$scope.ngDialogData&&$scope.ngDialogData.id,patient:$scope.selectedPatient,sortWeight:$scope.ngDialogData&&$scope.ngDialogData.sortWeight,actualStartDatetime:$scope.ngDialogData&&$scope.ngDialogData.actualStartDatetime,actualEndDatetime:$scope.ngDialogData&&$scope.ngDialogData.actualEndDatetime,status:$scope.ngDialogData&&$scope.ngDialogData.status||Bahmni.OT.Constants.scheduled,notes:$scope.ngDialogData&&$scope.ngDialogData.notes,uuid:$scope.ngDialogData&&$scope.ngDialogData.uuid,voided:$scope.ngDialogData&&$scope.ngDialogData.voided,surgicalAppointmentAttributes:$scope.attributes};$scope.addSurgicalAppointment(appointment)}return $q.when({})},$scope.close=function(){if($scope.ngDialogData){var appointment=_.find($scope.surgicalForm.surgicalAppointments,function(surgicalAppointment){return surgicalAppointment.isBeingEdited});delete $scope.surgicalForm.surgicalAppointments[appointment.sortWeight].isBeingEdited,delete $scope.ngDialogData.isBeingEdited}ngDialog.close()},$scope.goToForwardUrl=function(){var forwardUrl=appService.getAppDescriptor().getConfigValue("patientDashboardUrl");if(isProgramDashboardUrlConfigured(forwardUrl)&&!$scope.enrollmentInfo)return void messagingService.showMessage("error",forwardUrl.errorMessage);var params=getDashboardParams(forwardUrl),formattedUrl=appService.getAppDescriptor().formatUrl(forwardUrl.link,params);$window.open(formattedUrl)};var isProgramDashboardUrlConfigured=function(forwardUrl){return forwardUrl&&forwardUrl.link&&forwardUrl.link.includes("programs")},getDashboardParams=function(forwardUrl){return forwardUrl&&forwardUrl.link&&forwardUrl.link.includes("programs")?{patientUuid:$scope.enrollmentInfo.patient.uuid,dateEnrolled:$scope.enrollmentInfo.dateEnrolled,programUuid:$scope.enrollmentInfo.program.uuid,enrollment:$scope.enrollmentInfo.uuid}:{patientUuid:$scope.selectedPatient.uuid}};spinner.forPromise(init())}]),angular.module("bahmni.ot").controller("calendarViewController",["$scope","$rootScope","$state","$stateParams","appService","patientService","locationService","ngDialog",function($scope,$rootScope,$state,$stateParams,appService,patientService,locationService,ngDialog){$scope.viewDate=$stateParams.viewDate||$state.viewDate||moment().startOf("day").toDate(),$state.viewDate=$scope.viewDate,$scope.calendarConfig=appService.getAppDescriptor().getConfigValue("calendarView");var addLocationsForFilters=function(){var locations={};_.each($scope.locations,function(location){locations[location.name]=!0}),$scope.filters.locations=locations},init=function(){return $scope.filterParams=$state.filterParams,$scope.filters={},$scope.filters.providers=[],$scope.view=$state.view||"Calendar",$state.view=$scope.view,$scope.weekOrDay=$state.weekOrDay||"day",$state.weekOrDay=$scope.weekOrDay,"week"===$scope.weekOrDay&&($scope.weekStartDate=$state.weekStartDate||new Date(moment().startOf("week")),$state.weekStartDate=$scope.weekStartDate,$scope.weekEndDate=$state.weekEndDate||new Date(moment().endOf("week").endOf("day")),$state.weekEndDate=$scope.weekEndDate),$scope.surgicalBlockSelected={},$scope.surgicalAppointmentSelected={},$scope.editDisabled=!0,$scope.moveButtonDisabled=!0,$scope.cancelDisabled=!0,$scope.addActualTimeDisabled=!0,$scope.surgeonList=_.map($rootScope.surgeons,function(surgeon){var newVar={name:surgeon.person.display,uuid:surgeon.uuid};newVar[surgeon.person.display]=!1;var otCalendarColorAttribute=_.find(surgeon.attributes,function(attribute){return"otCalendarColor"===attribute.attributeType.display});return newVar.otCalendarColor=getBackGroundHSLColorFor(otCalendarColorAttribute),newVar}),$scope.filters.statusList=[],setAppointmentStatusList($scope.view),locationService.getAllByTag("Operation Theater").then(function(response){return $scope.locations=response.data.results,addLocationsForFilters(),$scope.filters=$scope.filterParams||$scope.filters,$scope.patient=$scope.filters.patient&&$scope.filters.patient.value,$scope.applyFilters(),$scope.locations})},setAppointmentStatusList=function(view){"Calendar"===view?$scope.appointmentStatusList=[{name:Bahmni.OT.Constants.scheduled},{name:Bahmni.OT.Constants.completed}]:$scope.appointmentStatusList=[{name:Bahmni.OT.Constants.scheduled},{name:Bahmni.OT.Constants.completed},{name:Bahmni.OT.Constants.postponed},{name:Bahmni.OT.Constants.cancelled}]};$scope.calendarView=function(){$scope.weekOrDay="day",$state.weekOrDay=$scope.weekOrDay,$scope.view="Calendar",$state.view=$scope.view},$scope.listView=function(){$scope.view="List View",$state.view=$scope.view};var getBackGroundHSLColorFor=function(otCalendarColorAttribute){var hue=otCalendarColorAttribute?otCalendarColorAttribute.value.toString():"0";return"hsl("+hue+", 100%, 90%)"};$scope.applyFilters=function(){$scope.filterParams=_.cloneDeep($scope.filters),$state.filterParams=$scope.filterParams},$scope.clearFilters=function(){addLocationsForFilters(),$scope.filters.providers=[],$scope.filters.statusList=[],$scope.patient="",$scope.filters.patient=null,removeFreeTextItem(),$scope.applyFilters()};var removeFreeTextItem=function(){$("input.input")[0].value="",$("input.input")[1].value=""};$scope.search=function(){return patientService.search($scope.patient).then(function(response){return response.data.pageOfResults})},$scope.onSelectPatient=function(data){$scope.filters.patient=data,"Calendar"===$scope.view&&_.isEmpty($scope.filters.statusList)&&($scope.filters.statusList=[{name:Bahmni.OT.Constants.scheduled},{name:Bahmni.OT.Constants.completed}])},$scope.clearThePatientFilter=function(){$scope.filters.patient=null},$scope.responseMap=function(data){return _.map(data,function(patientInfo){return patientInfo.label=patientInfo.givenName+" "+patientInfo.familyName+" ("+patientInfo.identifier+")",patientInfo})},$scope.goToNewSurgicalAppointment=function(){var options={};options.dashboardCachebuster=Math.random(),$state.go("newSurgicalAppointment",options)},$scope.goToPreviousDate=function(date){$scope.viewDate=Bahmni.Common.Util.DateUtil.subtractDays(date,1),$state.viewDate=$scope.viewDate},$scope.goToCurrentDate=function(){$scope.viewDate=new Date(moment().startOf("day")),$state.viewDate=$scope.viewDate,$scope.weekOrDay="day",$state.weekOrDay=$scope.weekOrDay},$scope.goToNextDate=function(date){$scope.viewDate=Bahmni.Common.Util.DateUtil.addDays(date,1),$state.viewDate=$scope.viewDate},$scope.goToCurrentWeek=function(){$scope.weekStartDate=new Date(moment().startOf("week")),$state.weekStartDate=$scope.weekStartDate,$scope.weekEndDate=new Date(moment().endOf("week").endOf("day")),$state.weekEndDate=$scope.weekEndDate,$scope.weekOrDay="week",$state.weekOrDay=$scope.weekOrDay},$scope.goToNextWeek=function(){$scope.weekStartDate=Bahmni.Common.Util.DateUtil.addDays($scope.weekStartDate,7),$scope.weekEndDate=Bahmni.Common.Util.DateUtil.addDays($scope.weekEndDate,7),$state.weekStartDate=$scope.weekStartDate,$state.weekEndDate=$scope.weekEndDate},$scope.goToPreviousWeek=function(){$scope.weekStartDate=Bahmni.Common.Util.DateUtil.subtractDays($scope.weekStartDate,7),$scope.weekEndDate=Bahmni.Common.Util.DateUtil.subtractDays($scope.weekEndDate,7),$state.weekStartDate=$scope.weekStartDate,$state.weekEndDate=$scope.weekEndDate},$scope.$on("event:surgicalAppointmentSelect",function(event,surgicalAppointment,surgicalBlock){$scope.cancelDisabled=!(surgicalAppointment.status===Bahmni.OT.Constants.scheduled),$scope.moveButtonDisabled=!(surgicalAppointment.status===Bahmni.OT.Constants.scheduled),$scope.editDisabled=!(surgicalAppointment.status===Bahmni.OT.Constants.scheduled||surgicalAppointment.status===Bahmni.OT.Constants.completed),$scope.addActualTimeDisabled=!(surgicalAppointment.status===Bahmni.OT.Constants.scheduled||surgicalAppointment.status===Bahmni.OT.Constants.completed),$scope.surgicalAppointmentSelected=surgicalAppointment,$scope.surgicalBlockSelected=surgicalBlock}),$scope.$on("event:surgicalBlockSelect",function(event,surgicalBlock){$scope.editDisabled=!1,$scope.moveButtonDisabled=!0,$scope.addActualTimeDisabled=!0,$scope.surgicalBlockSelected=surgicalBlock,$scope.surgicalAppointmentSelected={};var surgicalBlockWithCompletedAppointments=function(){return _.find(surgicalBlock.surgicalAppointments,function(appointment){return appointment.status===Bahmni.OT.Constants.completed})};surgicalBlockWithCompletedAppointments()||($scope.cancelDisabled=!1)}),$scope.$on("event:surgicalBlockDeselect",function(event){$scope.editDisabled=!0,$scope.cancelDisabled=!0,$scope.moveButtonDisabled=!0,$scope.addActualTimeDisabled=!0,$scope.surgicalBlockSelected={},$scope.surgicalAppointmentSelected={}}),$scope.goToEdit=function($event){if(0!==Object.keys($scope.surgicalBlockSelected).length){var options={surgicalBlockUuid:$scope.surgicalBlockSelected.uuid};0!==Object.keys($scope.surgicalAppointmentSelected).length&&(options.surgicalAppointmentId=$scope.surgicalAppointmentSelected.id),options.dashboardCachebuster=Math.random(),$state.go("editSurgicalAppointment",options),$event.stopPropagation()}},$scope.gotoMove=function(){ngDialog.open({template:"views/moveAppointment.html",closeByDocument:!1,controller:"moveSurgicalAppointmentController",className:"ngdialog-theme-default ng-dialog-adt-popUp ot-dialog",showClose:!0,data:{surgicalBlock:$scope.surgicalBlockSelected,surgicalAppointment:$scope.surgicalAppointmentSelected}})},$scope.addActualTime=function(){ngDialog.open({template:"views/addActualTimeDialog.html",closeByDocument:!1,controller:"surgicalAppointmentActualTimeController",className:"ngdialog-theme-default ng-dialog-adt-popUp ot-dialog",showClose:!0,data:{surgicalBlock:$scope.surgicalBlockSelected,surgicalAppointment:$scope.surgicalAppointmentSelected}})};var cancelSurgicalAppointment=function(){ngDialog.open({template:"views/cancelAppointment.html",closeByDocument:!1,controller:"calendarViewCancelAppointmentController",className:"ngdialog-theme-default ng-dialog-adt-popUp ot-dialog",showClose:!0,data:{surgicalBlock:$scope.surgicalBlockSelected,surgicalAppointment:$scope.surgicalAppointmentSelected}})},cancelSurgicalBlock=function(){ngDialog.open({template:"views/cancelSurgicalBlock.html",closeByDocument:!1,controller:"cancelSurgicalBlockController",className:"ngdialog-theme-default ng-dialog-adt-popUp ot-dialog",showClose:!0,data:{surgicalBlock:$scope.surgicalBlockSelected,provider:$scope.surgicalBlockSelected.provider.person.display}})};$scope.cancelSurgicalBlockOrSurgicalAppointment=function(){_.isEmpty($scope.surgicalAppointmentSelected)?cancelSurgicalBlock():cancelSurgicalAppointment()},init(),$scope.$watch("view",function(newValue,oldValue){oldValue!==newValue&&("Calendar"===newValue&&(setAppointmentStatusList(newValue),$scope.filters.statusList=_.filter($scope.filters.statusList,function(status){return status.name===Bahmni.OT.Constants.scheduled||status.name===Bahmni.OT.Constants.completed})),"List View"===newValue&&setAppointmentStatusList(newValue),$scope.applyFilters())})}]),angular.module("bahmni.ot").controller("otCalendarController",["$scope","$q","$interval","spinner","locationService","surgicalAppointmentService",function($scope,$q,$interval,spinner,locationService,surgicalAppointmentService){var updateCurrentDayTimeline=function(){$scope.currentTimeLineHeight=heightPerMin*Bahmni.Common.Util.DateUtil.diffInMinutes($scope.calendarStartDatetime,new Date)},heightPerMin=120/$scope.dayViewSplit,init=function(){var dayStart=($scope.dayViewStart||Bahmni.OT.Constants.defaultCalendarStartTime).split(":"),dayEnd=($scope.dayViewEnd||Bahmni.OT.Constants.defaultCalendarEndTime).split(":");$scope.surgicalBlockSelected={},$scope.surgicalAppointmentSelected={},$scope.editDisabled=!0,$scope.cancelDisabled=!0,$scope.addActualTimeDisabled=!0,$scope.dayViewSplit=parseInt($scope.dayViewSplit)>0?parseInt($scope.dayViewSplit):60,$scope.calendarStartDatetime=Bahmni.Common.Util.DateUtil.addMinutes($scope.viewDate,60*dayStart[0]+parseInt(dayStart[1])),$scope.calendarEndDatetime=Bahmni.Common.Util.DateUtil.addMinutes($scope.viewDate,60*dayEnd[0]+parseInt(dayEnd[1])),updateCurrentDayTimeline(),$scope.rows=$scope.getRowsForCalendar();var blocksStartDatetime=$scope.viewDate,blocksEndDatetime=moment($scope.viewDate).endOf("day");return $q.all([locationService.getAllByTag("Operation Theater"),surgicalAppointmentService.getSurgicalBlocksInDateRange(blocksStartDatetime,blocksEndDatetime)]).then(function(response){$scope.locations=response[0].data.results,$scope.surgicalBlocksByLocation=_.map($scope.locations,function(location){return _.filter(response[1].data.results,function(surgicalBlock){return surgicalBlock.location.uuid===location.uuid})})})};$scope.intervals=function(){var dayStart=($scope.dayViewStart||"00:00").split(":"),dayEnd=($scope.dayViewEnd||"23:59").split(":"),noOfIntervals=(60*dayEnd[0]+parseInt(dayEnd[1])-(60*dayStart[0]+parseInt(dayStart[1])))/$scope.dayViewSplit;return Math.ceil(noOfIntervals)},$scope.getRowsForCalendar=function(){for(var rows=[],i=0;i<$scope.intervals();i++){var row={date:Bahmni.Common.Util.DateUtil.addMinutes($scope.calendarStartDatetime,i*$scope.dayViewSplit)};rows.push(row)}return rows},$scope.shouldDisplayCurrentTimeLine=function(){return moment().isBefore($scope.calendarEndDatetime)&&moment().isAfter($scope.calendarStartDatetime)};var timer=$interval(updateCurrentDayTimeline,3e6);$scope.$on("$destroy",function(){$interval.cancel(timer)}),$scope.$watch("viewDate",function(oldValue,newValue){oldValue.getTime()!==newValue.getTime()&&spinner.forPromise(init())}),spinner.forPromise(init())}]),angular.module("bahmni.ot").controller("surgicalAppointmentActualTimeController",["$scope","ngDialog","surgicalAppointmentService","messagingService","surgicalAppointmentHelper",function($scope,ngDialog,surgicalAppointmentService,messagingService,surgicalAppointmentHelper){var surgicalBlock=$scope.ngDialogData.surgicalBlock,surgicalAppointment=$scope.ngDialogData.surgicalAppointment,calculateActualEndTime=function(){var totalAppointmentsDuration=0,sortedAppointments=_.sortBy(surgicalBlock.surgicalAppointments,"sortWeight");_.find(sortedAppointments,function(appointment){return totalAppointmentsDuration+=surgicalAppointmentHelper.getEstimatedDurationForAppointment(appointment),appointment.id===surgicalAppointment.id});var appointmentEndTime=moment(surgicalBlock.startDatetime).toDate();return appointmentEndTime=Bahmni.Common.Util.DateUtil.addMinutes(appointmentEndTime,totalAppointmentsDuration)},init=function(){var calculatedAppointmentEndTime=calculateActualEndTime(),appointmentDuration=surgicalAppointmentHelper.getEstimatedDurationForAppointment(surgicalAppointment);$scope.actualStartTime=surgicalAppointment.actualStartDatetime&&moment(surgicalAppointment.actualStartDatetime).toDate()||Bahmni.Common.Util.DateUtil.subtractSeconds(calculatedAppointmentEndTime,60*appointmentDuration),$scope.actualEndTime=surgicalAppointment.actualEndDatetime&&moment(surgicalAppointment.actualEndDatetime).toDate()||calculatedAppointmentEndTime,$scope.notes=surgicalAppointment.notes,$scope.patientDisplayLabel=surgicalAppointmentHelper.getPatientDisplayLabel(surgicalAppointment.patient.display)};$scope.isStartDatetimeBeforeEndDatetime=function(startDate,endDate){return!startDate||!endDate||startDate<endDate},$scope.add=function(){if(!$scope.isStartDatetimeBeforeEndDatetime($scope.actualStartTime,$scope.actualEndTime))return void messagingService.showMessage("error","Actual start time should be less than actual end time");var surgicalAppointment={};surgicalAppointment.id=$scope.ngDialogData.surgicalAppointment.id,surgicalAppointment.uuid=$scope.ngDialogData.surgicalAppointment.uuid,surgicalAppointment.actualStartDatetime=$scope.actualStartTime,surgicalAppointment.actualEndDatetime=$scope.actualEndTime,surgicalAppointment.status=$scope.actualStartTime&&Bahmni.OT.Constants.completed||Bahmni.OT.Constants.scheduled,surgicalAppointment.notes=$scope.notes,surgicalAppointment.surgicalBlock={uuid:$scope.ngDialogData.surgicalBlock.uuid},surgicalAppointment.patient={uuid:$scope.ngDialogData.surgicalAppointment.patient.uuid},surgicalAppointment.sortWeight=$scope.ngDialogData.surgicalAppointment.sortWeight,surgicalAppointmentService.updateSurgicalAppointment(surgicalAppointment).then(function(response){$scope.ngDialogData.surgicalAppointment.actualStartDatetime=response.data.actualStartDatetime,$scope.ngDialogData.surgicalAppointment.actualEndDatetime=response.data.actualEndDatetime,$scope.ngDialogData.surgicalAppointment.status=response.data.status,$scope.ngDialogData.surgicalAppointment.notes=response.data.notes;var message="Actual time added to "+surgicalAppointmentHelper.getPatientDisplayLabel($scope.ngDialogData.surgicalAppointment.patient.display)+" - "+$scope.ngDialogData.surgicalBlock.location.name;messagingService.showMessage("info",message),ngDialog.close()})},$scope.isActualTimeRequired=function(){return $scope.actualStartTime||$scope.actualEndTime||$scope.notes},$scope.close=function(){ngDialog.close()},init()}]),angular.module("bahmni.ot").controller("calendarViewCancelAppointmentController",["$scope","$translate","$q","ngDialog","surgicalAppointmentService","messagingService","surgicalAppointmentHelper",function($scope,$translate,$q,ngDialog,surgicalAppointmentService,messagingService,surgicalAppointmentHelper){var ngDialogSurgicalAppointment=$scope.ngDialogData.surgicalAppointment,attributes=surgicalAppointmentHelper.getAppointmentAttributes(ngDialogSurgicalAppointment);$scope.appointment={estTimeHours:attributes.estTimeHours,estTimeMinutes:attributes.estTimeMinutes,patient:surgicalAppointmentHelper.getPatientDisplayLabel(ngDialogSurgicalAppointment.patient.display),notes:ngDialogSurgicalAppointment.notes,status:ngDialogSurgicalAppointment.status},$scope.confirmCancelAppointment=function(){var surgicalAppointment={};surgicalAppointment.id=$scope.ngDialogData.surgicalAppointment.id,surgicalAppointment.uuid=$scope.ngDialogData.surgicalAppointment.uuid,surgicalAppointment.notes=$scope.appointment.notes,surgicalAppointment.status=$scope.appointment.status,surgicalAppointment.surgicalBlock={uuid:$scope.ngDialogData.surgicalBlock.uuid},surgicalAppointment.patient={uuid:ngDialogSurgicalAppointment.patient.uuid},surgicalAppointment.sortWeight=null,$q.all([surgicalAppointmentService.updateSurgicalAppointment(surgicalAppointment),updateSortWeightOfSurgicalAppointments()]).then(function(response){ngDialogSurgicalAppointment.patient=response[0].data.patient,ngDialogSurgicalAppointment.status=response[0].data.status,ngDialogSurgicalAppointment.notes=response[0].data.notes,ngDialogSurgicalAppointment.sortWeight=response[0].data.sortWeight;var message="";ngDialogSurgicalAppointment.status===Bahmni.OT.Constants.postponed?message=$translate.instant("OT_SURGICAL_APPOINTMENT_POSTPONED_MESSAGE"):ngDialogSurgicalAppointment.status===Bahmni.OT.Constants.cancelled&&(message=$translate.instant("OT_SURGICAL_APPOINTMENT_CANCELLED_MESSAGE")),message=message+surgicalAppointmentHelper.getPatientDisplayLabel($scope.ngDialogData.surgicalAppointment.patient.display)+" - "+$scope.ngDialogData.surgicalBlock.location.name,messagingService.showMessage("info",message),ngDialog.close()})};var updateSortWeightOfSurgicalAppointments=function(){var surgicalBlock=_.cloneDeep($scope.ngDialogData.surgicalBlock),surgicalAppointments=_.filter(surgicalBlock.surgicalAppointments,function(appointment){return appointment.uuid!==$scope.ngDialogData.surgicalAppointment.uuid&&"POSTPONED"!==appointment.status&&"CANCELLED"!==appointment.status});return surgicalBlock.surgicalAppointments=_.map(surgicalAppointments,function(appointment,index){return appointment.sortWeight=index,appointment}),surgicalBlock.provider={uuid:surgicalBlock.provider.uuid},surgicalBlock.location={uuid:surgicalBlock.location.uuid},surgicalBlock.surgicalAppointments=_.map(surgicalBlock.surgicalAppointments,function(appointment){return appointment.patient={uuid:appointment.patient.uuid},appointment.surgicalAppointmentAttributes=_.values(appointment.surgicalAppointmentAttributes).filter(function(attribute){return!_.isUndefined(attribute.value)}),_.omit(appointment,["derivedAttributes","surgicalBlock","bedNumber","bedLocation"])}),surgicalAppointmentService.updateSurgicalBlock(surgicalBlock)};$scope.closeDialog=function(){ngDialog.close()}}]),angular.module("bahmni.ot").controller("surgicalBlockViewCancelAppointmentController",["$scope","ngDialog","surgicalAppointmentHelper",function($scope,ngDialog,surgicalAppointmentHelper){var surgicalAppointment=$scope.ngDialogData.surgicalAppointment;$scope.appointment={estTimeHours:surgicalAppointment.surgicalAppointmentAttributes.estTimeHours.value,estTimeMinutes:surgicalAppointment.surgicalAppointmentAttributes.estTimeMinutes.value,patient:surgicalAppointment.patient.label||surgicalAppointmentHelper.getPatientDisplayLabel(surgicalAppointment.patient.display),notes:surgicalAppointment.notes,status:surgicalAppointment.status},$scope.confirmCancelAppointment=function(){var actualAppointment=_.find($scope.ngDialogData.surgicalForm.surgicalAppointments,function(appointment){return appointment.isBeingEdited});null==actualAppointment.id&&(_.remove($scope.ngDialogData.surgicalForm.surgicalAppointments,actualAppointment),ngDialog.close()),actualAppointment.status=$scope.appointment.status,actualAppointment.notes=$scope.appointment.notes,actualAppointment.sortWeight=null,delete actualAppointment.isBeingEdited,$scope.ngDialogData.updateAvailableBlockDurationFn(),ngDialog.close()},$scope.closeDialog=function(){var actualAppointment=_.find($scope.ngDialogData.surgicalForm.surgicalAppointments,function(appointment){return appointment.isBeingEdited});delete actualAppointment.isBeingEdited,ngDialog.close()}}]),angular.module("bahmni.ot").controller("cancelSurgicalBlockController",["$scope","$state","$translate","ngDialog","surgicalAppointmentService","messagingService",function($scope,$state,$translate,ngDialog,surgicalAppointmentService,messagingService){var surgicalBlock=$scope.ngDialogData.surgicalBlock;$scope.confirmCancelSurgicalBlock=function(){_.forEach(surgicalBlock.surgicalAppointments,function(appointment){"SCHEDULED"===appointment.status&&(appointment.status=$scope.surgicalBlock.status,appointment.notes=$scope.surgicalBlock.notes,appointment.sortWeight=null),appointment.patient={uuid:appointment.patient.uuid}}),surgicalBlock.voided=!0,surgicalBlock.voidReason=$scope.surgicalBlock.notes,surgicalBlock.provider={uuid:surgicalBlock.provider.uuid},surgicalBlock.location={uuid:surgicalBlock.location.uuid},surgicalBlock.surgicalAppointments=_.map(surgicalBlock.surgicalAppointments,function(appointment){return _.omit(appointment,["derivedAttributes","bedNumber","bedLocation"])}),surgicalAppointmentService.updateSurgicalBlock(surgicalBlock).then(function(response){var message="";$scope.surgicalBlock.status===Bahmni.OT.Constants.postponed?message=$translate.instant("OT_SURGICAL_BLOCK_POSTPONED_MESSAGE"):$scope.surgicalBlock.status===Bahmni.OT.Constants.cancelled&&(message=$translate.instant("OT_SURGICAL_BLOCK_CANCELLED_MESSAGE")),message+=response.data.provider.person.display,messagingService.showMessage("info",message),ngDialog.close();var options={};options.dashboardCachebuster=Math.random(),$state.go("otScheduling",options)})}}]),angular.module("bahmni.ot").controller("listViewController",["$scope","$rootScope","$q","spinner","surgicalAppointmentService","appService","surgicalAppointmentHelper","surgicalBlockFilter","printer",function($scope,$rootScope,$q,spinner,surgicalAppointmentService,appService,surgicalAppointmentHelper,surgicalBlockFilter,printer){var startDatetime=moment($scope.viewDate).toDate(),surgicalBlockMapper=new Bahmni.OT.SurgicalBlockMapper,endDatetime=moment(startDatetime).endOf("day").toDate();$scope.tableInfo=[{heading:"Status",sortInfo:"status"},{heading:"Day",sortInfo:"derivedAttributes.expectedStartDate"},{heading:"Date",sortInfo:"derivedAttributes.expectedStartDate"},{heading:"Identifier",sortInfo:"derivedAttributes.patientIdentifier"},{heading:"Patient Name",sortInfo:"derivedAttributes.patientName"},{heading:"Patient Age",sortInfo:"derivedAttributes.patientAge"},{heading:"Start Time",sortInfo:"derivedAttributes.expectedStartTime"},{heading:"Est Time",sortInfo:"derivedAttributes.duration"},{heading:"Actual Time",sortInfo:"actualStartDatetime"},{heading:"OT#",sortInfo:"surgicalBlock.location.name"},{heading:"Procedure(s)",sortInfo:"surgicalAppointmentAttributes.procedure.value"},{heading:"Notes",sortInfo:"surgicalAppointmentAttributes.notes.value"},{heading:"Surgeon",sortInfo:"surgicalBlock.provider.person.display"},{heading:"Other Surgeon",sortInfo:"surgicalAppointmentAttributes.otherSurgeon.value.person.display"},{heading:"Surgical Assistant",sortInfo:"surgicalAppointmentAttributes.surgicalAssistant.value"},{heading:"Anaesthetist",sortInfo:"surgicalAppointmentAttributes.anaesthetist.value"},{heading:"Scrub Nurse",sortInfo:"surgicalAppointmentAttributes.scrubNurse.value"},{heading:"Circulating Nurse",sortInfo:"surgicalAppointmentAttributes.circulatingNurse.value"},{heading:"Status Change Notes",sortInfo:"notes"},{heading:"Bed Location",sortInfo:"bedLocation"},{heading:"Bed ID",sortInfo:"bedNumber"}];var filterSurgicalBlocksAndMapAppointmentsForDisplay=function(surgicalBlocks){var clonedSurgicalBlocks=_.cloneDeep(surgicalBlocks),filteredSurgicalBlocks=surgicalBlockFilter(clonedSurgicalBlocks,$scope.filterParams),mappedSurgicalBlocks=_.map(filteredSurgicalBlocks,function(surgicalBlock){return surgicalBlockMapper.map(surgicalBlock,$rootScope.attributeTypes,$rootScope.surgeons)});mappedSurgicalBlocks=_.map(mappedSurgicalBlocks,function(surgicalBlock){var blockStartDatetime=surgicalBlock.startDatetime;return surgicalBlock.surgicalAppointments=_.map(surgicalBlock.surgicalAppointments,function(appointment){var mappedAppointment=_.cloneDeep(appointment);mappedAppointment.surgicalBlock=surgicalBlock,mappedAppointment.derivedAttributes={};var estTimeHours=mappedAppointment.surgicalAppointmentAttributes.estTimeHours&&mappedAppointment.surgicalAppointmentAttributes.estTimeHours.value,estTimeMinutes=mappedAppointment.surgicalAppointmentAttributes.estTimeMinutes&&mappedAppointment.surgicalAppointmentAttributes.estTimeMinutes.value,cleaningTime=mappedAppointment.surgicalAppointmentAttributes.cleaningTime&&mappedAppointment.surgicalAppointmentAttributes.cleaningTime.value;return mappedAppointment.derivedAttributes.duration=surgicalAppointmentHelper.getAppointmentDuration(estTimeHours,estTimeMinutes,cleaningTime),mappedAppointment.derivedAttributes.expectedStartDate=moment(blockStartDatetime).startOf("day").toDate(),mappedAppointment.derivedAttributes.patientIdentifier=mappedAppointment.patient.display.split(" - ")[0],mappedAppointment.derivedAttributes.patientAge=mappedAppointment.patient.person.age,mappedAppointment.derivedAttributes.patientName=mappedAppointment.patient.display.split(" - ")[1],mappedAppointment.status!==Bahmni.OT.Constants.completed&&mappedAppointment.status!==Bahmni.OT.Constants.scheduled||(mappedAppointment.derivedAttributes.expectedStartTime=blockStartDatetime,blockStartDatetime=Bahmni.Common.Util.DateUtil.addMinutes(blockStartDatetime,mappedAppointment.derivedAttributes.duration)),mappedAppointment}),surgicalBlock});var surgicalAppointmentList=_.reduce(mappedSurgicalBlocks,function(surgicalAppointmentList,block){return surgicalAppointmentList.concat(block.surgicalAppointments)},[]),filteredSurgicalAppointmentsByStatus=surgicalAppointmentHelper.filterSurgicalAppointmentsByStatus(surgicalAppointmentList,_.map($scope.filterParams.statusList,function(status){return status.name})),filteredSurgicalAppointmentsByPatient=surgicalAppointmentHelper.filterSurgicalAppointmentsByPatient(filteredSurgicalAppointmentsByStatus,$scope.filterParams.patient);$scope.surgicalAppointmentList=_.sortBy(filteredSurgicalAppointmentsByPatient,["derivedAttributes.expectedStartDate","surgicalBlock.location.name","derivedAttributes.expectedStartDatetime"])},init=function(startDatetime,endDatetime){return $scope.addActualTimeDisabled=!0,$scope.editDisabled=!0,$scope.cancelDisabled=!0,$scope.reverseSort=!1,$scope.sortColumn="",$q.all([surgicalAppointmentService.getSurgicalBlocksInDateRange(startDatetime,endDatetime,!0)]).then(function(response){$scope.surgicalBlocks=response[0].data.results,filterSurgicalBlocksAndMapAppointmentsForDisplay($scope.surgicalBlocks)})};$scope.isCurrentDateinWeekView=function(appointmentDate){return _.isEqual(moment().startOf("day").toDate(),appointmentDate)&&"week"===$scope.weekOrDay},$scope.printPage=function(){var printTemplateUrl=appService.getAppDescriptor().getConfigValue("printListViewTemplateUrl")||"views/listView.html";printer.print(printTemplateUrl,{surgicalAppointmentList:$scope.surgicalAppointmentList,weekStartDate:$scope.weekStartDate,weekEndDate:$scope.weekEndDate,viewDate:$scope.viewDate,weekOrDay:$scope.weekOrDay,isCurrentDate:$scope.isCurrentDateinWeekView})},$scope.sortSurgicalAppointmentsBy=function(sortColumn){var emptyObjects=_.filter($scope.surgicalAppointmentList,function(appointment){return!_.property(sortColumn)(appointment)}),nonEmptyObjects=_.difference($scope.surgicalAppointmentList,emptyObjects),sortedNonEmptyObjects=_.sortBy(nonEmptyObjects,sortColumn);$scope.reverseSort&&sortedNonEmptyObjects.reverse(),$scope.surgicalAppointmentList=sortedNonEmptyObjects.concat(emptyObjects),$scope.sortColumn=sortColumn,$scope.reverseSort=!$scope.reverseSort},$scope.selectSurgicalAppointment=function($event,appointment){$scope.$emit("event:surgicalAppointmentSelect",appointment,appointment.surgicalBlock),$event.stopPropagation()},$scope.deselectSurgicalAppointment=function($event){$scope.$emit("event:surgicalBlockDeselect"),$event.stopPropagation()},$scope.$watch("viewDate",function(){"day"===$scope.weekOrDay&&(startDatetime=moment($scope.viewDate).toDate(),endDatetime=moment(startDatetime).endOf("day").toDate(),spinner.forPromise(init(startDatetime,endDatetime)))}),$scope.$watch("weekStartDate",function(){"week"===$scope.weekOrDay&&(startDatetime=moment($scope.weekStartDate).toDate(),endDatetime=moment($scope.weekEndDate).toDate(),spinner.forPromise(init(startDatetime,endDatetime)))}),$scope.$watch("filterParams",function(oldValue,newValue){oldValue!==newValue&&filterSurgicalBlocksAndMapAppointmentsForDisplay($scope.surgicalBlocks)}),$scope.isStatusPostponed=function(status){return status===Bahmni.OT.Constants.postponed},$scope.isStatusCancelled=function(status){return status===Bahmni.OT.Constants.cancelled},spinner.forPromise(init(startDatetime,endDatetime))}]),angular.module("bahmni.ot").controller("moveSurgicalAppointmentController",["$rootScope","$scope","$state","$q","ngDialog","surgicalAppointmentService","surgicalAppointmentHelper","surgicalBlockHelper","messagingService",function($rootScope,$scope,$state,$q,ngDialog,surgicalAppointmentService,surgicalAppointmentHelper,surgicalBlockHelper,messagingService){var init=function(){$scope.surgicalAppointment=$scope.ngDialogData.surgicalAppointment,$scope.sourceSurgicalBlock=$scope.ngDialogData.surgicalBlock,$scope.appointmentDuration=surgicalAppointmentHelper.getEstimatedDurationForAppointment($scope.surgicalAppointment)},surgicalBlockMapper=new Bahmni.OT.SurgicalBlockMapper;$scope.changeInSurgeryDate=function(){if(!$scope.dateForMovingSurgery)return void($scope.availableSurgicalBlocksForGivenDate=[]);var startDateTime=$scope.dateForMovingSurgery,endDateTime=moment($scope.dateForMovingSurgery).endOf("day").toDate();surgicalAppointmentService.getSurgicalBlocksInDateRange(startDateTime,endDateTime,!1).then(function(response){var surgicalBlocksOfThatDate=_.map(response.data.results,function(surgicalBlock){return surgicalBlockMapper.map(surgicalBlock,$rootScope.attributeTypes,$rootScope.surgeons)});$scope.availableBlocks=_.filter(surgicalBlocksOfThatDate,function(surgicalBlock){return surgicalBlockHelper.getAvailableBlockDuration(surgicalBlock)>=$scope.appointmentDuration&&surgicalBlock.uuid!==$scope.ngDialogData.surgicalBlock.uuid;
}),$scope.availableSurgicalBlocksForGivenDate=_.map($scope.availableBlocks,function(surgicalBlock){var blockStartTime=Bahmni.Common.Util.DateUtil.formatTime(surgicalBlock.startDatetime),blockEndTime=Bahmni.Common.Util.DateUtil.formatTime(surgicalBlock.endDatetime),providerName=surgicalBlock.provider.person.display,operationTheatre=surgicalBlock.location.name,validAppointments=_.filter(surgicalBlock.surgicalAppointments,function(appointment){return"POSTPONED"!==appointment.status&&"CANCELLED"!==appointment.status}),destinationBlockDetails={displayName:providerName+", "+operationTheatre+" ("+blockStartTime+" - "+blockEndTime+")",uuid:surgicalBlock.uuid,surgicalAppointment:{sortWeight:validAppointments.length}};return destinationBlockDetails})})},$scope.cancel=function(){ngDialog.close()};var updateSortWeightOfSurgicalAppointments=function(){var surgicalBlock=_.cloneDeep($scope.sourceSurgicalBlock),surgicalAppointments=_.filter(surgicalBlock.surgicalAppointments,function(appointment){return appointment.uuid!==$scope.ngDialogData.surgicalAppointment.uuid&&"POSTPONED"!==appointment.status&&"CANCELLED"!==appointment.status});return surgicalBlock.surgicalAppointments=_.map(surgicalAppointments,function(appointment,index){return appointment.sortWeight=index,appointment}),surgicalBlock.provider={uuid:surgicalBlock.provider.uuid},surgicalBlock.location={uuid:surgicalBlock.location.uuid},surgicalBlock.surgicalAppointments=_.map(surgicalBlock.surgicalAppointments,function(appointment){return appointment.patient={uuid:appointment.patient.uuid},appointment.surgicalAppointmentAttributes=_.values(appointment.surgicalAppointmentAttributes).filter(function(attribute){return!_.isUndefined(attribute.value)}),_.omit(appointment,["derivedAttributes","surgicalBlock","bedNumber","bedLocation"])}),surgicalAppointmentService.updateSurgicalBlock(surgicalBlock)};$scope.moveSurgicalAppointment=function(){var surgicalAppointment={uuid:$scope.surgicalAppointment.uuid,patient:{uuid:$scope.surgicalAppointment.patient.uuid},sortWeight:$scope.destinationBlock.surgicalAppointment.sortWeight,surgicalBlock:{uuid:$scope.destinationBlock.uuid}};surgicalAppointmentService.updateSurgicalAppointment(surgicalAppointment).then(function(){updateSortWeightOfSurgicalAppointments().then(function(){messagingService.showMessage("info","Surgical Appointment moved to the block "+$scope.destinationBlock.displayName+" Successfully"),ngDialog.close(),$state.go("otScheduling",{viewDate:$scope.dateForMovingSurgery},{reload:!0})})})},init()}]),angular.module("bahmni.ot").directive("otCalendar",[function(){return{restrict:"E",controller:"otCalendarController",scope:{viewDate:"=",dayViewStart:"=",dayViewEnd:"=",dayViewSplit:"=",filterParams:"="},templateUrl:"../ot/views/otCalendar.html"}}]),angular.module("bahmni.ot").directive("otCalendarSurgicalBlock",["surgicalAppointmentHelper",function(surgicalAppointmentHelper){var link=function($scope){var gridCellHeight=120,heightForSurgeonName=21,surgicalBlockHeightPerMin=gridCellHeight/$scope.dayViewSplit,getViewPropertiesForSurgicalBlock=function(){var surgicalBlockHeight=getHeightForSurgicalBlock();$scope.blockDimensions={height:surgicalBlockHeight,top:getTopForSurgicalBlock(),color:getColorForProvider(),appointmentHeightPerMin:(surgicalBlockHeight-heightForSurgeonName)/Bahmni.Common.Util.DateUtil.diffInMinutes($scope.surgicalBlock.startDatetime,$scope.surgicalBlock.endDatetime)}},getColorForProvider=function(){var otCalendarColorAttribute=_.find($scope.surgicalBlock.provider.attributes,function(attribute){return"otCalendarColor"===attribute.attributeType.display}),hue=otCalendarColorAttribute?otCalendarColorAttribute.value.toString():"0",backgroundColor="hsl("+hue+", 100%, 90%)",borderColor="hsl("+hue+",100%, 60%)";return{backgroundColor:backgroundColor,borderColor:borderColor}},getHeightForSurgicalBlock=function(){return Bahmni.Common.Util.DateUtil.diffInMinutes($scope.surgicalBlock.startDatetime,$scope.surgicalBlock.endDatetime)*surgicalBlockHeightPerMin},getTopForSurgicalBlock=function(){return Bahmni.Common.Util.DateUtil.diffInMinutes($scope.calendarStartDatetime,$scope.surgicalBlock.startDatetime)*surgicalBlockHeightPerMin},calculateEstimatedAppointmentDuration=function(){var surgicalAppointments=_.filter($scope.surgicalBlock.surgicalAppointments,function(surgicalAppointment){return $scope.isValidSurgicalAppointment(surgicalAppointment)});surgicalAppointments=_.sortBy(surgicalAppointments,["sortWeight"]);var nextAppointmentStartDatetime=moment($scope.surgicalBlock.startDatetime).toDate();$scope.surgicalBlock.surgicalAppointments=_.map(surgicalAppointments,function(surgicalAppointment){return surgicalAppointment.derivedAttributes={},surgicalAppointment.derivedAttributes.duration=surgicalAppointmentHelper.getEstimatedDurationForAppointment(surgicalAppointment),surgicalAppointment.derivedAttributes.expectedStartDatetime=nextAppointmentStartDatetime,surgicalAppointment.derivedAttributes.expectedEndDatetime=Bahmni.Common.Util.DateUtil.addMinutes(nextAppointmentStartDatetime,surgicalAppointment.derivedAttributes.duration),nextAppointmentStartDatetime=surgicalAppointment.derivedAttributes.expectedEndDatetime,surgicalAppointment})};$scope.isValidSurgicalAppointment=function(surgicalAppointment){return surgicalAppointment.status!==Bahmni.OT.Constants.cancelled&&surgicalAppointment.status!==Bahmni.OT.Constants.postponed},$scope.selectSurgicalBlock=function($event){$scope.$emit("event:surgicalBlockSelect",$scope.surgicalBlock),$event.stopPropagation()},$scope.deselectSurgicalBlock=function($event){$scope.$emit("event:surgicalBlockDeselect"),$event.stopPropagation()},$scope.surgicalBlockExceedsCalendar=function(){return moment($scope.surgicalBlock.endDatetime).toDate()>$scope.calendarEndDatetime},getViewPropertiesForSurgicalBlock(),calculateEstimatedAppointmentDuration()};return{restrict:"E",link:link,scope:{surgicalBlock:"=",calendarStartDatetime:"=",calendarEndDatetime:"=",dayViewSplit:"=",filterParams:"="},templateUrl:"../ot/views/calendarSurgicalBlock.html"}}]),angular.module("bahmni.ot").directive("otCalendarSurgicalAppointment",["surgicalAppointmentHelper",function(surgicalAppointmentHelper){var link=function($scope){$scope.attributes=_.reduce($scope.surgicalAppointment.surgicalAppointmentAttributes,function(attributes,attribute){return attributes[attribute.surgicalAppointmentAttributeType.name]=attribute.value,attributes},{});var hasAppointmentStatusInFilteredStatusList=function(){return!!_.isEmpty($scope.filterParams.statusList)||_.find($scope.filterParams.statusList,function(selectedStatus){return selectedStatus.name===$scope.surgicalAppointment.status})},hasAppointmentIsOfTheFilteredPatient=function(){return!!_.isEmpty($scope.filterParams.patient)||$scope.surgicalAppointment.patient.uuid===$scope.filterParams.patient.uuid};$scope.canTheSurgicalAppointmentBeShown=function(){return hasAppointmentIsOfTheFilteredPatient()&&hasAppointmentStatusInFilteredStatusList()};var getDataForSurgicalAppointment=function(){$scope.height=getHeightForSurgicalAppointment(),$scope.patient=surgicalAppointmentHelper.getPatientDisplayLabel($scope.surgicalAppointment.patient.display)},getHeightForSurgicalAppointment=function(){return $scope.surgicalAppointment.derivedAttributes.duration*$scope.heightPerMin};$scope.selectSurgicalAppointment=function($event){$scope.$emit("event:surgicalAppointmentSelect",$scope.surgicalAppointment,$scope.$parent.surgicalBlock),$event.stopPropagation()},getDataForSurgicalAppointment(),$scope.deselectSurgicalAppointment=function($event){$scope.$emit("event:surgicalBlockDeselect"),$event.stopPropagation()}};return{restrict:"E",link:link,scope:{surgicalAppointment:"=",heightPerMin:"=",backgroundColor:"=",filterParams:"="},templateUrl:"../ot/views/calendarSurgicalAppointment.html"}}]),angular.module("bahmni.ot").directive("multiSelectAutocomplete",[function(){var link=function($scope,element){$scope.focusOnTheTest=function(){var autoselectInput=$("input.input");autoselectInput[0].focus()},$scope.addItem=function(item){item[item.name]=!0,$scope.selectedValues=_.union($scope.selectedValues,item,$scope.keyProperty)},$scope.removeItem=function(item){$scope.selectedValues=_.filter($scope.selectedValues,function(value){return value[$scope.keyProperty]!==item[$scope.keyProperty]})},$scope.search=function(query){var matchingAnswers=[],unselectedValues=_.xorBy($scope.inputItems,$scope.selectedValues,$scope.keyProperty);return _.forEach(unselectedValues,function(answer){"object"!=typeof answer.name&&answer.name.toLowerCase().indexOf(query.toLowerCase())!==-1&&matchingAnswers.push(answer)}),_.uniqBy(matchingAnswers,$scope.keyProperty)}};return{restrict:"E",link:link,scope:{inputItems:"=",selectedValues:"=",displayProperty:"=",keyProperty:"=",placeholder:"=",loadOnDownArrow:"=",autoCompleteMinLength:"="},templateUrl:"../ot/views/multiSelectAutocomplete.html"}}]),angular.module("bahmni.ot").directive("stringToNumber",function(){return{require:"ngModel",link:function(scope,elem,attrs,ngModel){"number"===attrs.type&&ngModel.$formatters.push(function(value){return parseFloat(value)})}}}),angular.module("bahmni.ot").directive("listView",[function(){return{restrict:"E",controller:"listViewController",scope:{viewDate:"=",filterParams:"=",weekStartDate:"=",weekEndDate:"=",weekOrDay:"="},templateUrl:"../ot/views/listView.html"}}]),angular.module("bahmni.ot").directive("onScroll",[function(){var link=function($scope,$element,attrs){$element.bind("scroll",function(evt){$(".calendar-location").css("top",$element.scrollTop()),$(".calendar-time-container").css("left",$element.scrollLeft())})};return{restrict:"A",link:link}}]),Bahmni.OT.SurgicalBlockMapper=function(){var mapSelectedOtherSurgeon=function(otherSurgeonAttribute,surgeonList){var selectedOtherSurgeon=_.filter(surgeonList,function(surgeon){return surgeon.id===parseInt(otherSurgeonAttribute.value)});otherSurgeonAttribute.value=_.isEmpty(selectedOtherSurgeon)?null:selectedOtherSurgeon[0]},mapOpenMrsSurgicalAppointmentAttributes=function(openMrsSurgicalAppointmentAttributes,surgeonsList){var mappedAttributes={};_.each(openMrsSurgicalAppointmentAttributes,function(attribute){var attributeName=attribute.surgicalAppointmentAttributeType.name;mappedAttributes[attributeName]={id:attribute.id,uuid:attribute.uuid,value:attribute.value,surgicalAppointmentAttributeType:{uuid:attribute.surgicalAppointmentAttributeType.uuid,name:attribute.surgicalAppointmentAttributeType.name}}});var otherSurgeonnAttribute=mappedAttributes.otherSurgeon;return otherSurgeonnAttribute&&mapSelectedOtherSurgeon(otherSurgeonnAttribute,surgeonsList),mappedAttributes},mapSurgicalAppointment=function(openMrsSurgicalAppointment,attributeTypes,surgeonsList){var surgicalAppointmentAttributes=mapOpenMrsSurgicalAppointmentAttributes(openMrsSurgicalAppointment.surgicalAppointmentAttributes,surgeonsList);return{id:openMrsSurgicalAppointment.id,uuid:openMrsSurgicalAppointment.uuid,voided:openMrsSurgicalAppointment.voided||!1,patient:openMrsSurgicalAppointment.patient,sortWeight:openMrsSurgicalAppointment.sortWeight,actualStartDatetime:Bahmni.Common.Util.DateUtil.parseServerDateToDate(openMrsSurgicalAppointment.actualStartDatetime),actualEndDatetime:Bahmni.Common.Util.DateUtil.parseServerDateToDate(openMrsSurgicalAppointment.actualEndDatetime),notes:openMrsSurgicalAppointment.notes,status:openMrsSurgicalAppointment.status,bedLocation:openMrsSurgicalAppointment.bedLocation||"",bedNumber:openMrsSurgicalAppointment.bedNumber||"",surgicalAppointmentAttributes:(new Bahmni.OT.SurgicalBlockMapper).mapAttributes(surgicalAppointmentAttributes,attributeTypes)}};this.map=function(openMrsSurgicalBlock,attributeTypes,surgeonsList){var surgicalAppointments=_.map(openMrsSurgicalBlock.surgicalAppointments,function(surgicalAppointment){return mapSurgicalAppointment(surgicalAppointment,attributeTypes,surgeonsList)});return{id:openMrsSurgicalBlock.id,uuid:openMrsSurgicalBlock.uuid,voided:openMrsSurgicalBlock.voided||!1,startDatetime:Bahmni.Common.Util.DateUtil.parseServerDateToDate(openMrsSurgicalBlock.startDatetime),endDatetime:Bahmni.Common.Util.DateUtil.parseServerDateToDate(openMrsSurgicalBlock.endDatetime),provider:openMrsSurgicalBlock.provider,location:openMrsSurgicalBlock.location,surgicalAppointments:_.sortBy(surgicalAppointments,"sortWeight")}};var mapSurgicalAppointmentAttributesUIToDomain=function(appointmentAttributes){var attributes=_.cloneDeep(appointmentAttributes),otherSurgeon=attributes.otherSurgeon;return otherSurgeon.value=otherSurgeon.value&&otherSurgeon.value.id,_.values(attributes).filter(function(attribute){return!_.isUndefined(attribute.value)}).map(function(attribute){return attribute.value=!_.isNull(attribute.value)&&attribute.value.toString()||"",attribute})},mapSurgicalAppointmentUIToDomain=function(surgicalAppointmentUI){return{id:surgicalAppointmentUI.id,uuid:surgicalAppointmentUI.uuid,voided:surgicalAppointmentUI.voided||!1,patient:{uuid:surgicalAppointmentUI.patient.uuid},actualStartDatetime:surgicalAppointmentUI.actualStartDatetime,actualEndDatetime:surgicalAppointmentUI.actualEndDatetime,sortWeight:surgicalAppointmentUI.sortWeight,notes:surgicalAppointmentUI.notes,status:surgicalAppointmentUI.status,surgicalAppointmentAttributes:mapSurgicalAppointmentAttributesUIToDomain(surgicalAppointmentUI.surgicalAppointmentAttributes)}};this.mapSurgicalBlockUIToDomain=function(surgicalBlockUI){return{id:surgicalBlockUI.id,uuid:surgicalBlockUI.uuid,voided:surgicalBlockUI.voided||!1,startDatetime:surgicalBlockUI.startDatetime,endDatetime:surgicalBlockUI.endDatetime,provider:{uuid:surgicalBlockUI.provider.uuid},location:{uuid:surgicalBlockUI.location.uuid},surgicalAppointments:_.map(surgicalBlockUI.surgicalAppointments,function(surgicalAppointment){return mapSurgicalAppointmentUIToDomain(surgicalAppointment)})}};var getAttributeTypeByName=function(attributeTypes,name){return _.find(attributeTypes,function(attributeType){return attributeType.name===name})};this.mapAttributes=function(attributes,attributeTypes){return _.each(attributeTypes,function(attributeType){var existingAttribute=attributes[attributeType.name];existingAttribute||(attributes[attributeType.name]={surgicalAppointmentAttributeType:getAttributeTypeByName(attributeTypes,attributeType.name)},"cleaningTime"===attributeType.name?attributes[attributeType.name].value=15:"estTimeMinutes"===attributeType.name?attributes[attributeType.name].value=0:"estTimeHours"===attributeType.name?attributes[attributeType.name].value=0:attributes[attributeType.name].value="")}),attributes}},angular.module("bahmni.ot").filter("surgicalBlock",[function(){var filterByLocation=function(surgicalBlocks,filters){var blocksFilteredByLocation=[];return _.forEach(surgicalBlocks,function(block){filters.locations[block.location.name]?blocksFilteredByLocation.push(block):""}),blocksFilteredByLocation},filterByProvider=function(blocksFilteredByLocation,filters){if(_.isEmpty(filters.providers))return blocksFilteredByLocation;var blocksFilteredByProvider=_.filter(blocksFilteredByLocation,function(block){return _.find(filters.providers,function(provider){return provider.uuid===block.provider.uuid})});return blocksFilteredByProvider},filterByPatientUuid=function(blocksFilteredByProviders,filters){return _.isEmpty(filters.patient)?blocksFilteredByProviders:_.filter(blocksFilteredByProviders,function(block){return _.find(block.surgicalAppointments,function(appointment){return appointment.patient.uuid===filters.patient.uuid})})},filterByAppointmentStatus=function(blocksFilteredByPatient,filters){return _.isEmpty(filters.statusList)?blocksFilteredByPatient:_.filter(blocksFilteredByPatient,function(block){return _.find(block.surgicalAppointments,function(appointment){return _.find(filters.statusList,function(status){return status.name===appointment.status})})})},filterByPatientAndStatus=function(blocksFilteredByProviders,filters){if(_.isEmpty(filters.statusList)||_.isEmpty(filters.patient)){var blocksFilteredByPatient=filterByPatientUuid(blocksFilteredByProviders,filters);return filterByAppointmentStatus(blocksFilteredByPatient,filters)}return _.filter(blocksFilteredByProviders,function(block){return _.find(block.surgicalAppointments,function(appointment){return appointment.patient.uuid===filters.patient.uuid&&_.find(filters.statusList,function(status){return status.name===appointment.status})})})};return function(surgicalBlocks,filters){if(!filters)return surgicalBlocks;var blocksFilteredByLocation=filterByLocation(surgicalBlocks,filters),blocksFilteredByProviders=filterByProvider(blocksFilteredByLocation,filters);return filterByPatientAndStatus(blocksFilteredByProviders,filters)}}]),angular.module("bahmni.ot").service("surgicalAppointmentService",["$http",function($http){this.getSurgeons=function(){return $http.get(Bahmni.Common.Constants.providerUrl,{method:"GET",params:{v:"custom:(id,uuid,person:(uuid,display),attributes:(attributeType:(display),value))"},withCredentials:!0})},this.saveSurgicalBlock=function(data){return $http.post(Bahmni.OT.Constants.addSurgicalBlockUrl,data,{params:{v:"full"},withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}})},this.updateSurgicalBlock=function(data){return $http.post(Bahmni.OT.Constants.addSurgicalBlockUrl+"/"+data.uuid,data,{params:{v:"full"},withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}})},this.updateSurgicalAppointment=function(data){return $http.post(Bahmni.OT.Constants.updateSurgicalAppointmentUrl+"/"+data.uuid,data,{params:{v:"full"},withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}})},this.getSurgicalAppointmentAttributeTypes=function(){return $http.get(Bahmni.OT.Constants.surgicalAppointmentAttributeTypeUrl,{method:"GET",params:{v:"custom:(uuid,name)"},withCredentials:!0})},this.getSurgicalBlockFor=function(surgicalBlockUuid){return $http.get(Bahmni.OT.Constants.addSurgicalBlockUrl+"/"+surgicalBlockUuid,{params:{v:"full"},withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}})},this.getSurgicalBlocksInDateRange=function(startDatetime,endDatetime,includeVoided){return $http.get(Bahmni.OT.Constants.addSurgicalBlockUrl,{method:"GET",params:{startDatetime:Bahmni.Common.Util.DateUtil.parseLongDateToServerFormat(startDatetime),endDatetime:Bahmni.Common.Util.DateUtil.parseLongDateToServerFormat(endDatetime),includeVoided:includeVoided||!1,v:"custom:(id,uuid,provider:(uuid,person:(uuid,display),attributes:(attributeType:(display),value,voided)),location:(uuid,name),startDatetime,endDatetime,surgicalAppointments:(id,uuid,patient:(uuid,display,person:(age)),actualStartDatetime,actualEndDatetime,status,notes,sortWeight,bedNumber,bedLocation,surgicalAppointmentAttributes))"},withCredentials:!0})}}]),angular.module("bahmni.ot").service("queryService",["$http",function($http){this.getResponseFromQuery=function(params){return $http.get(Bahmni.Common.Constants.sqlUrl,{method:"GET",params:params,withCredentials:!0})}}]);